Accessed = sum(interview__status %in% c("Submitted", "Responding")),
Submitted = sum(interview__status == "Submitted"),
Avg_questions_unanswered = round(mean(n_questions_unanswered, na.rm = T),1),
response_rate = Submitted / Sampled
)
#Get row with totals totals --------------------------------------------------------------------
TOTALS <- tibble(
Country_name = "TOTAL",
Sampled = nrow(status),
Bounced = sum(by_country$Bounced),
Accessed = sum(by_country$Accessed),
Submitted = sum(by_country$Submitted),
Avg_questions_unanswered = round(mean(by_country$Avg_questions_unanswered, na.rm = T),1),
response_rate = Submitted/Sampled
)
#Define response rate
by_country_totals <- rbind(by_country, TOTALS) %>%
mutate(response_rate = scales::percent(response_rate, accuracy = .1),
Avg_questions_unanswered = ifelse(is.na(Avg_questions_unanswered), NA_real_, Avg_questions_unanswered))
# export summary by country
crate_xlsx_by_country(db = by_country_totals,
exfile = glue::glue("data/6.data-collection/2.response_rates/responses_by_country_{Sys.Date()}.xlsx")
)
total_countries = length(unique(by_country$Country_name))
havent_submitted =sum(by_country$Submitted ==0)
perc_havent = scales::percent(havent_submitted/total_countries)
sample_n = nrow(sample)
open = 4168
open_perc =scales::percent(open/sample_n)
accessed = comp = by_country_totals$Accessed[by_country_totals$Country_name == 'TOTAL']
acc_pers = percent(accessed/sample_n,accuracy = .01)
comp = by_country_totals$Submitted[by_country_totals$Country_name == 'TOTAL']
comp_pers = percent(comp/sample_n, accuracy = .01)
knitr::combine_words(sort(by_country$Country_name[by_country$Submitted==0]), sep = ", ")
avg_unanswered = round(mean(status$n_questions_unanswered[status$interview__status == "Submitted"], na.rm = T),1)
max_unanswered = round(max(status$n_questions_unanswered[status$interview__status == "Submitted"], na.rm = T),1)
glue::glue('from the {total_countries} countries in the sample, {havent_submitted} ({perc_havent}) have not submitted any interview yet.')
glue::glue('{open} ({open_perc}) have opened the invitation email')
glue('{accessed} ({acc_pers}) have accessed')
glue('{comp} ({comp_pers}) have submitted')
glue('The submitted interview with the maximum number of unanswered question, has {max_unanswered} unanswered')
glue("The average submitted interview has a total of {avg_unanswered} question")
list.dirs('data/3.Assignments')
#read sample ---------------------------------------------------------------------
sample <- import('data/2.sample/cps_sample_corrected.csv', encoding = "UTF-8") %>% select(cp_id , Name)
#read sample --------------------------------------------------------------------
raw_data <- import('data/6.data-collection/1.raw/cp/cp.rds') %>% select(cp_id = counterpart, interview__status)
list.files('data/4.campaigns/')
campaigns <- import('data/4.campaigns/cps_follow_up_2023-11-02.csv')
new_campaign <- campaigns %>%
left_join(sample)
View(new_campaign)
campaigns <- import('data/4.campaigns/cps_follow_up_2023-11-02.csv', encoding = "UTF-8")
new_campaign <- campaigns %>%
left_join(sample)
new_campaign <- campaigns %>%
left_join(sample) %>% get_dupes()
new_campaign <- campaigns %>%
left_join(sample) %>% get_dupes(cp_id)
new_campaign <- campaigns %>%
left_join(sample) %>% get_dupes(email)
View(new_campaign)
new_campaign <- campaigns %>%
left_join(sample) %>%
group_by(email) %>%
slice(1)
new_campaign <- campaigns %>%
left_join(sample) %>%
group_by(email) %>%
slice(1) %>%
left_join(raw_data ) %>%
filter(interview__status %in% c("Not Started", "Responding")) %>%
select(-c(date,cp_id, count, interview__status))
new_campaign <- campaigns %>%
left_join(sample) %>%
group_by(email) %>%
slice(1) %>%
left_join(raw_data)
new_campaign <- campaigns %>%
left_join(sample) %>%
group_by(email) %>%
slice(1) %>%
left_join(raw_data) %>%
filter(interview__status %in% c("Not Started", "Responding")) %>%
select(-c(cp_id, count, interview__status))
new_campaign <- campaigns %>%
left_join(sample) %>%
group_by(email) %>%
slice(1) %>%
left_join(raw_data)
tabyl(new_campaign, interview__status)
new_campaign <- campaigns %>%
left_join(sample) %>%
group_by(email) %>%
slice(1) %>%
left_join(raw_data) %>%
filter(interview__status %in% c("Not Started", "Responding"))
new_campaign <- campaigns %>%
left_join(sample) %>%
group_by(email) %>%
slice(1) %>%
left_join(raw_data) %>%
filter(interview__status %in% c("Not Started", "Responding")) %>%
select(-c(cp_id, interview__status))
export(new_campaign, 'data/4.campaigns/cps_follow_up_2023-11-07.csv')
tabyl(raw_with_sample, interview__status)
library(rio)
library(dplyr)
list.dirs('data/3.Assignments')
#read sample ---------------------------------------------------------------------
sample <- import('data/2.sample/cps_sample_corrected.csv', encoding = "UTF-8") %>% select(cp_id , Name)
#read sample --------------------------------------------------------------------
raw_data <- import('data/6.data-collection/1.raw/cp/cp.rds') %>% select(cp_id = counterpart, interview__status)
#define campaigns ---------------------------------------------------------------
campaigns <- list.files('data/4.campaigns/', pattern = "10|oct")
campaigns <- import('data/4.campaigns/cps_follow_up_2023-11-07.csv', encoding = "UTF-8")
#Using "questionnaires/NLO/Part I.PDF" as a reference and guidance
library("haven")
library("gmdacr")
list.files('data/7.NLO/')
list.files('data/7.NLO/1.raw/')
#read file, it was given by Eloisa via email
sav_file <- "data/7.NLO/1.raw/IAEA TC PROGRAMME ACHIEVEMENTS IN THE 21ST CENTURY - PART II.sav"
raw_data <- read_sav(sav_file)
View(raw_data)
#define names of the columns
col_names_single <- c(q0001 = "role",
q0002 = "country"
#q0045 = "promoted_participation_women",
#q0046 = 'received_comments'
)
format_single_select <- function(.data, col_names){
.data%>%
#get the label of the variables
mutate(across(names(col_names), function(x)susor_get_stata_labels(x))) %>%
#change the name of the variables
rename_at(vars(names(col_names)), function(x)col_names[x])
}
raw_singles <- raw_data %>% format_single_select(col_names_single)
library(dplyr)
n
format_single_select <- function(.data, col_names){
.data%>%
#get the label of the variables
mutate(across(names(col_names), function(x)susor_get_stata_labels(x))) %>%
#change the name of the variables
rename_at(vars(names(col_names)), function(x)col_names[x])
}
raw_singles <- raw_data %>% format_single_select(col_names_single)
library(susor)
format_single_select <- function(.data, col_names){
.data%>%
#get the label of the variables
mutate(across(names(col_names), function(x)susor_get_stata_labels(x))) %>%
#change the name of the variables
rename_at(vars(names(col_names)), function(x)col_names[x])
}
raw_singles <- raw_data %>% format_single_select(col_names_single)
View(raw_singles)
#define name of multiple select variables
col_names_multiple <- c("q0003" = "name_",
"q0004" = "theme_",
#"q0005" = "foa__fa_",
"q0043" = "sdg_report_"
)
prefixes <- names(col_names_multiple)
format_multiple_select <- function(.data, col_names){
.data %>%
#get the label of the variables
mutate(across(starts_with(prefixes), function(x)susor_get_stata_labels(x))) %>%
#rename using the definition of the names
rename_at(vars(starts_with(prefixes)), function(x){
#get the prefix
prefix <- str_extract(x, "^.*?(?=-|_)")
prefix <- col_names_multiple[prefix]
#get the sufix: the sequence number of the variable
sufix <- as.numeric(str_extract(x, "[^_]*$"))
#define new name
glue('{prefix}__{sufix}')
})
}
raw_multiple <- raw_singles %>% format_multiple_select(prefixes)
library(stringr)
format_multiple_select <- function(.data, col_names){
.data %>%
#get the label of the variables
mutate(across(starts_with(prefixes), function(x)susor_get_stata_labels(x))) %>%
#rename using the definition of the names
rename_at(vars(starts_with(prefixes)), function(x){
#get the prefix
prefix <- str_extract(x, "^.*?(?=-|_)")
prefix <- col_names_multiple[prefix]
#get the sufix: the sequence number of the variable
sufix <- as.numeric(str_extract(x, "[^_]*$"))
#define new name
glue('{prefix}__{sufix}')
})
}
raw_multiple <- raw_singles %>% format_multiple_select(prefixes)
library(glue)
format_multiple_select <- function(.data, col_names){
.data %>%
#get the label of the variables
mutate(across(starts_with(prefixes), function(x)susor_get_stata_labels(x))) %>%
#rename using the definition of the names
rename_at(vars(starts_with(prefixes)), function(x){
#get the prefix
prefix <- str_extract(x, "^.*?(?=-|_)")
prefix <- col_names_multiple[prefix]
#get the sufix: the sequence number of the variable
sufix <- as.numeric(str_extract(x, "[^_]*$"))
#define new name
glue('{prefix}__{sufix}')
})
}
raw_multiple <- raw_singles %>% format_multiple_select(prefixes)
View(raw_multiple)
#define name of multiple select variables
col_names_multiple <- c(#"q0003" = "name_",
"q0004" = "theme_",
#"q0005" = "foa__fa_",
"q0043" = "sdg_report_"
)
prefixes <- names(col_names_multiple)
format_multiple_select <- function(.data, col_names){
.data %>%
#get the label of the variables
mutate(across(starts_with(prefixes), function(x)susor_get_stata_labels(x))) %>%
#rename using the definition of the names
rename_at(vars(starts_with(prefixes)), function(x){
#get the prefix
prefix <- str_extract(x, "^.*?(?=-|_)")
prefix <- col_names_multiple[prefix]
#get the sufix: the sequence number of the variable
sufix <- as.numeric(str_extract(x, "[^_]*$"))
#define new name
glue('{prefix}__{sufix}')
})
}
raw_multiple <- raw_singles %>% format_multiple_select(prefixes)
raw_multiple <- raw_singles %>% format_multiple_select(prefixes) %>%
rename(First_name = q0003_0001)
raw_multiple <- raw_singles %>% format_multiple_select(prefixes) %>%
rename(First_name = q0003_0001,
Last_name = q0003_0002)
#define name of multiple select variables
col_names_multiple <- c(#"q0003" = "name_",
"q0004" = "theme_",
"q0005" = "foa__fa_"
#"q0043" = "sdg_report_"
)
prefixes <- names(col_names_multiple)
format_multiple_select <- function(.data, col_names){
.data %>%
#get the label of the variables
mutate(across(starts_with(prefixes), function(x)susor_get_stata_labels(x))) %>%
#rename using the definition of the names
rename_at(vars(starts_with(prefixes)), function(x){
#get the prefix
prefix <- str_extract(x, "^.*?(?=-|_)")
prefix <- col_names_multiple[prefix]
#get the sufix: the sequence number of the variable
sufix <- as.numeric(str_extract(x, "[^_]*$"))
#define new name
glue('{prefix}__{sufix}')
})
}
raw_multiple <- raw_singles %>% format_multiple_select(prefixes) %>%
rename(First_name = q0003_0001,
Last_name = q0003_0002)
#define name of multiple select variables
col_names_multiple <- c(#"q0003" = "name_",
"q0004" = "theme_",
"q0005" = "foa_fa_"
#"q0043" = "sdg_report_"
)
prefixes <- names(col_names_multiple)
format_multiple_select <- function(.data, col_names){
.data %>%
#get the label of the variables
mutate(across(starts_with(prefixes), function(x)susor_get_stata_labels(x))) %>%
#rename using the definition of the names
rename_at(vars(starts_with(prefixes)), function(x){
#get the prefix
prefix <- str_extract(x, "^.*?(?=-|_)")
prefix <- col_names_multiple[prefix]
#get the sufix: the sequence number of the variable
sufix <- as.numeric(str_extract(x, "[^_]*$"))
#define new name
glue('{prefix}__{sufix}')
})
}
raw_multiple <- raw_singles %>% format_multiple_select(prefixes) %>%
rename(First_name = q0003_0001,
Last_name = q0003_0002)
#define name of multiple select variables
col_names_multiple <- c(#"q0003" = "name_",
"q0004" = "theme",
"q0005" = "foa_fa"
#"q0043" = "sdg_report_"
)
prefixes <- names(col_names_multiple)
format_multiple_select <- function(.data, col_names){
.data %>%
#get the label of the variables
mutate(across(starts_with(prefixes), function(x)susor_get_stata_labels(x))) %>%
#rename using the definition of the names
rename_at(vars(starts_with(prefixes)), function(x){
#get the prefix
prefix <- str_extract(x, "^.*?(?=-|_)")
prefix <- col_names_multiple[prefix]
#get the sufix: the sequence number of the variable
sufix <- as.numeric(str_extract(x, "[^_]*$"))
#define new name
glue('{prefix}__{sufix}')
})
}
raw_multiple <- raw_singles %>% format_multiple_select(prefixes) %>%
rename(First_name = q0003_0001,
Last_name = q0003_0002)
#define name of multiple select variables
col_names_multiple <- c(#"q0003" = "name_",
"q0004" = "theme",
"q0005" = "foa_fa",
"q0026" = "foa_h"
#"q0043" = "sdg_report_"
)
prefixes <- names(col_names_multiple)
format_multiple_select <- function(.data, col_names){
.data %>%
#get the label of the variables
mutate(across(starts_with(prefixes), function(x)susor_get_stata_labels(x))) %>%
#rename using the definition of the names
rename_at(vars(starts_with(prefixes)), function(x){
#get the prefix
prefix <- str_extract(x, "^.*?(?=-|_)")
prefix <- col_names_multiple[prefix]
#get the sufix: the sequence number of the variable
sufix <- as.numeric(str_extract(x, "[^_]*$"))
#define new name
glue('{prefix}__{sufix}')
})
}
raw_multiple <- raw_singles %>% format_multiple_select(prefixes) %>%
rename(First_name = q0003_0001,
Last_name = q0003_0002)
names(raw_multiple)
sort(names(raw_multiple))
names(raw_multiple)
raw_multiple <- raw_singles %>% format_multiple_select(prefixes) %>%
rename(First_name = q0003_0001,
Last_name = q0003_0002) %>%
select(starts_with("q0029"))
View(raw_singles)
export(filter(raw_singles, country == "Georgia"), "data/7.NLO/3.Country_checks/Part_II_Georgia.xlsx")
library(rio)
export(filter(raw_singles, country == "Georgia"), "data/7.NLO/3.Country_checks/Part_II_Georgia.xlsx")
attributes(raw_data['q0004_1'])
attributes(raw_data['q0004_0001'])
attributes(raw_data[['q0004_0001']])
at <-attributes(raw_data[['q0004_0001']])
at$label
names(raw_singles)
names(raw_singles)[starts_with(names(raw_singles), "q")]
names(raw_singles)[str_detect(names(raw_singles), "^q")]
q_vars <- names(raw_singles)[str_detect(names(raw_singles), "^q")]
names(raw_singles)[names(raw_singles) == 'q0004_0001' ]
names(raw_singles)[names(raw_singles) == 'q0004_0001' ]
names(raw_singles)[names(raw_singles) == 'q0004_0001' ] <- at$label
names(raw_singles)
for (v in q_vars) {
at <-attributes(raw_data[[v]])
names(raw_singles)[names(raw_singles) == v ] <- at$label
}
names(raw_singles)
export(filter(raw_singles, country == "Georgia"), "data/7.NLO/3.Country_checks/Part_II_Georgia.xlsx")
for (v in q_vars) {
at <-attributes(raw_data[[v]])
names(raw_singles)[names(raw_singles) == v ] <- at$label
}
View(raw_singles)
#define name of multiple select variables
col_names_multiple <- c(#"q0003" = "name_",
"q0004" = "theme",
"q0005" = "foa_fa",
"q0026" = "foa_h",
"q0053" = "foa_e",
"q0058" = "foa_i",
"q0066" = "foa_w",
"q0074" = "foa_s"
#"q0043" = "sdg_report_"
)
prefixes <- names(col_names_multiple)
format_multiple_select <- function(.data, col_names){
.data %>%
#get the label of the variables
mutate(across(starts_with(prefixes), function(x)susor_get_stata_labels(x))) %>%
#rename using the definition of the names
rename_at(vars(starts_with(prefixes)), function(x){
#get the prefix
prefix <- str_extract(x, "^.*?(?=-|_)")
prefix <- col_names_multiple[prefix]
#get the sufix: the sequence number of the variable
sufix <- as.numeric(str_extract(x, "[^_]*$"))
#define new name
glue('{prefix}__{sufix}')
})
}
raw_multiple <- raw_singles %>% format_multiple_select(prefixes) %>%
rename(First_name = q0003_0001,
Last_name = q0003_0002) %>%
select(starts_with("q0029"))
format_single_select <- function(.data, col_names){
.data%>%
#get the label of the variables
mutate(across(names(col_names), function(x)susor_get_stata_labels(x))) %>%
#change the name of the variables
rename_at(vars(names(col_names)), function(x)col_names[x])
}
raw_singles <- raw_data %>% format_single_select(col_names_single)
raw_singles <- raw_data %>% format_single_select(col_names_single)
#Format multiple select =======================================================
#These are simple mulitple select. One question, multiple answers
attributes(raw_data$q0005_0001_0001)
#define name of multiple select variables
col_names_multiple <- c(#"q0003" = "name_",
"q0004" = "theme",
"q0005" = "foa_fa",
"q0026" = "foa_h",
"q0053" = "foa_e",
"q0058" = "foa_i",
"q0066" = "foa_w",
"q0074" = "foa_s"
#"q0043" = "sdg_report_"
)
prefixes <- names(col_names_multiple)
format_multiple_select <- function(.data, col_names){
.data %>%
#get the label of the variables
mutate(across(starts_with(prefixes), function(x)susor_get_stata_labels(x))) %>%
#rename using the definition of the names
rename_at(vars(starts_with(prefixes)), function(x){
#get the prefix
prefix <- str_extract(x, "^.*?(?=-|_)")
prefix <- col_names_multiple[prefix]
#get the sufix: the sequence number of the variable
sufix <- as.numeric(str_extract(x, "[^_]*$"))
#define new name
glue('{prefix}__{sufix}')
})
}
raw_multiple <- raw_singles %>% format_multiple_select(prefixes) %>%
rename(First_name = q0003_0001,
Last_name = q0003_0002) %>%
select(starts_with("q0029"))
names(raw_multiple)[names(raw_multiple) == 'q0004_0001' ] <- at$label
for (v in q_vars) {
at <-attributes(raw_multiple[[v]])
names(raw_multiple)[names(raw_multiple) == v ] <- at$label
}
export(filter(raw_multiple, country == "Georgia"), "data/7.NLO/3.Country_checks/Part_II_Georgia.xlsx")
names(raw_multiple)
raw_multiple <- raw_singles %>% format_multiple_select(prefixes) %>%
rename(First_name = q0003_0001,
Last_name = q0003_0002)
q_vars <- names(raw_multiple)[str_detect(names(raw_multiple), "^q")]
names(raw_multiple)[names(raw_multiple) == 'q0004_0001' ] <- at$label
for (v in q_vars) {
at <-attributes(raw_multiple[[v]])
names(raw_multiple)[names(raw_multiple) == v ] <- at$label
}
names(raw_multiple)
export(filter(raw_multiple, country == "Georgia"), "data/7.NLO/3.Country_checks/Part_II_Georgia.xlsx")
sort(names(raw_multiple))
raw_multiple <- raw_singles %>% format_multiple_select(prefixes) %>%
rename(First_name = q0003_0001,
Last_name = q0003_0002)
export(filter(raw_multiple, country == "Georgia"), "data/7.NLO/3.Country_checks/Part_II_Georgia.xlsx")
export(filter(raw_multiple, country == "Georgia"),
"data/7.NLO/3.Country_checks/Part_II_Georgia.xlsx",
overwrite = T)
#Using "questionnaires/NLO/Part I.PDF" as a reference and guidance
library("haven")
library("gmdacr")
#read file, it was given by Eloisa via email
sav_file <- "data/7.NLO/1.raw/IAEA TC PROGRAMME ACHIEVEMENTS IN THE 21ST CENTURY - PART I.sav"
raw_data <- read_sav(sav_file)
#look up countries is created in R/2.sample, it is used to get the region
lkp_countries <- import("data/9.lookups/countries.rds" )
#play around with the function attributes to learn how to fetch the variable labels
attributes(raw_data$q0004_0001)
attributes(raw_data$q0004_0001)
#Format single select ==========================================================
#These are basic single select questions
#define names of the columns
col_names_single <- c(q0001 = "role",
q0002 = "country",
q0045 = "promoted_participation_women",
q0046 = 'received_comments'
)
#replace value for label and rename variables
format_single_select <- function(.data, col_names){
.data%>%
#get the label of the variables
mutate(across(names(col_names), function(x)susor_get_stata_labels(x))) %>%
#change the name of the variables
rename_at(vars(names(col_names)), function(x)col_names[x])
}
raw_singles <- raw_data %>% format_single_select(col_names_single)
export(filter(raw_singles, country == "Georgia"),
"data/7.NLO/3.Country_checks/Part_I_Georgia.xlsx",
overwrite = T)
