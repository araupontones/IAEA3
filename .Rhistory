# num_vars = seq(1, longest_name, 8)
#
# # Crear nombre de variables
# var_names = paste0(prefix, seq(1,length(num_vars)))
#
# # Crear variables
# vars = purrr::map(num_vars, function(x){
#
#   #Split the number in separate variables
#   t = substr(nameNumeric, x, x+7)
#
#   return(t)
}
fn_split_numbers = function(db, name, prefix, ...){
nameNumeric = sapply(gtools::asc(name, simplify = T), function(x)paste(unlist(x), collapse = ''))
# # get longest name
# longest_name =  max(nchar(nameNumeric))
#
# ## numero de variables a crear
# num_vars = seq(1, longest_name, 8)
#
# # Crear nombre de variables
# var_names = paste0(prefix, seq(1,length(num_vars)))
#
# # Crear variables
# vars = purrr::map(num_vars, function(x){
#
#   #Split the number in separate variables
#   t = substr(nameNumeric, x, x+7)
#
#   return(t)
}
num_values <- fn_split_numbers(long, name = 'value', prefix = 'val')
num_values
num_values <- fn_split_numbers(long, name = 'value', prefix = 'val')
num_values
gtools::asc(long$value)
gtools::asc(long$value, simplify = T)
numbers <- gtools::asc(long$value, simplify = T)
View(numbers)
lapply(numbers, function(x){
print(name(x))
})
lapply(numbers, function(x){
print(names(x))
})
lapply(numbers, function(x){
print(numbers[i])
})
lapply(numbers, function(x){
print(numbers[1])
})
numbers[1]
names(numbers)
lapply(1:length(numbers), function(i){
print(names(numbers)[i])
})
numbers[1]
lapply(1:length(numbers), function(i){
#name of the cateogry
level_char <- names(numbers)[i]
level_num <- numbers[i]
})
db_values <- function(numbers){
lista <- lapply(1:length(numbers), function(i){
#name of the cateogry
db <- tibble(
level_char = names(numbers)[i]
level_num =  numbers[i]
)
}
do.call(rbind, lista)
})
db_values <- function(numbers){
lista <- lapply(1:length(numbers), function(i){
#name of the cateogry
db <- tibble(
level_char = names(numbers)[i]
level_num =  numbers[i]
)
})
do.call(rbind, lista)
}
db_values <- function(numbers){
lista <- lapply(1:length(numbers), function(i){
#name of the cateogry
db <- tibble(
level_char = names(numbers)[i]
level_num =  numbers[i]
)
})
# do.call(rbind, lista)
}
db_values <- function(numbers){
lista <- lapply(1:length(numbers), function(i){
db <- tibble(
level_char = names(numbers)[i]
level_num =  numbers[i]
)
})
# do.call(rbind, lista)
}
db_values <- function(numbers){
lista <- lapply(1:length(numbers), function(i){
db <- tibble(
level_char = names(numbers)[i]
level_num =  numbers[i]
)
})
return(lista)
}
db_values <- function(numbers){
lista <- lapply(1:length(numbers), function(i){
db <- tibble(
level_char = names(numbers)[i]
level_num =  numbers[i]
)
})
return(lista)
}
db_values <- function(numbers){
lista <- lapply(1:length(numbers), function(i){
names(numbers)[i]
# db <- tibble(
#   level_char = names(numbers)[i]
#   level_num =  numbers[i]
# )
})
return(lista)
}
db_values <- function(numbers){
lista <- lapply(1:length(numbers), function(i){
print(names(numbers)[i])
# db <- tibble(
#   level_char = names(numbers)[i]
#   level_num =  numbers[i]
# )
})
return(lista)
}
db_values(numbers)
db_values <- function(numbers){
lista <- lapply(1:length(numbers), function(i){
print(names(numbers)[i])
db <- tibble(
level_char = names(numbers)[i]
level_num =  numbers[i]
)
})
return(lista)
}
db_values <- function(numbers){
lista <- lapply(1:length(numbers), function(i){
print(names(numbers)[i])
db = tibble(
level_char = names(numbers)[i]
level_num =  numbers[i]
)
})
return(lista)
}
db_values <- function(numbers){
lista <- lapply(1:length(numbers), function(i){
db = tibble(
level_char = names(numbers)[i],
level_num =  numbers[i]
)
})
return(lista)
}
db_values <- function(numbers){
lista <- lapply(1:length(numbers), function(i){
db = tibble(
level_char = names(numbers)[i],
level_num =  numbers[i]
)
})
do.call(rbind, lista)
}
db_values(numbers)
create_db_values <- function(numbers){
lista <- lapply(1:length(numbers), function(i){
db = tibble(
level_char = names(numbers)[i],
level_num =  numbers[i]
)
})
do.call(rbind, lista)
}
db_values <- create_db_values(numbers)
View(db_values)
num_values <- fn_split_numbers(long, name = 'value', prefix = 'val')
#transform text to numbers
numbers <- gtools::asc(long$value, simplify = T)
numbers
db_values$level_num
pastedb_values$level_num, collapse = ''))
paste(db_values$level_num, collapse = ''))
paste(db_values$level_num)
paste(db_values$level_num, collapse = '')
create_db_values <- function(numbers){
lista <- lapply(1:length(numbers), function(i){
db = tibble(
level_char = names(numbers)[i],
level_num =  numbers[i]
) %>%
mutate(num = paste(level_num, collapse = ''))
})
do.call(rbind, lista)
}
db_values <- create_db_values(numbers)
View(db_values)
class(db_values$level_num)
create_db_values <- function(numbers){
lista <- lapply(1:length(numbers), function(i){
db = tibble(
level_char = names(numbers)[i],
level_num =  numbers[i]
) %>%
mutate(le = paste(unlist(level_num), collapse = ''))
})
do.call(rbind, lista)
}
db_values <- create_db_values(numbers)
create_db_values <- function(numbers){
lista <- lapply(1:length(numbers), function(i){
db = tibble(
level_char = names(numbers)[i],
level_num =  paste(unlist(numbers[i]), collapse = '')
)
})
do.call(rbind, lista)
}
db_values <- create_db_values(numbers)
View(db_values)
long <- criterion %>%
pivot_longer(-FOA,
names_to = 'level',
values_to = 'value') %>%
filter(value != "No Capacity")
long <- criterion %>%
pivot_longer(-FOA,
names_to = 'level',
values_to = 'value') %>%
filter(value != "No capacity")
long <- criterion %>%
pivot_longer(-FOA,
names_to = 'level',
values_to = 'value') %>%
filter(value != "No capacity") %>%
mutate(level = stringr::str_remove(level, "Level "))
long <- criterion %>%
pivot_longer(-FOA,
names_to = 'level',
values_to = 'value') %>%
filter(value != "No capacity") %>%
mutate(level = stringr::str_remove(level, "Level "),
FOA = ifelse(FOA == "General", 98, FOA))
#transform text criterion to numbers
numbers <- gtools::asc(long$value, simplify = T)
#create data table
create_db_values <- function(numbers){
lista <- lapply(1:length(numbers), function(i){
db = tibble(
level_char = names(numbers)[i],
level_num =  paste(unlist(numbers[i]), collapse = '')
)
})
do.call(rbind, lista)
}
db_values <- create_db_values(numbers)
View(db_values)
lkp <- long %>%
left_join(db_values)
names(long)
names(db_values)
#create data table
create_db_values <- function(numbers){
lista <- lapply(1:length(numbers), function(i){
db = tibble(
level = names(numbers)[i],
level_num =  paste(unlist(numbers[i]), collapse = '')
)
})
do.call(rbind, lista)
}
db_values <- create_db_values(numbers)
names(long)
names(db_values)
lkp <- long %>%
left_join(db_values)
View(lkp)
#create data table
create_db_values <- function(numbers){
lista <- lapply(1:length(numbers), function(i){
db = tibble(
value = names(numbers)[i],
level_num =  paste(unlist(numbers[i]), collapse = '')
)
})
do.call(rbind, lista)
}
lkp <- long %>%
left_join(db_values)
View(lkp)
#transform to long
long <- criterion %>%
pivot_longer(-FOA,
names_to = 'level',
values_to = 'title') %>%
filter(value != "No capacity") %>%
mutate(level = stringr::str_remove(level, "Level "),
FOA = ifelse(FOA == "General", 98, FOA))
#transform to long
long <- criterion %>%
pivot_longer(-FOA,
names_to = 'level',
values_to = 'title') %>%
filter(title != "No capacity") %>%
mutate(level = stringr::str_remove(level, "Level "),
FOA = ifelse(FOA == "General", 98, FOA))
#transform text criterion to numbers
numbers <- gtools::asc(long$title, simplify = T)
#transform text criterion to numbers
numbers <- gtools::asc(long$title, simplify = T)
#create data table
create_db_values <- function(numbers){
lista <- lapply(1:length(numbers), function(i){
db = tibble(
title = names(numbers)[i],
level_num =  paste(unlist(numbers[i]), collapse = '')
)
})
do.call(rbind, lista)
}
db_values <- create_db_values(numbers)
lkp <- long %>%
left_join(db_values)
View(lkp)
values_ids <- long %>%
left_join(db_values)
longest_name =  max(nchar(values_ids$level_num))
#create data table
create_db_values <- function(numbers){
lista <- lapply(1:length(numbers), function(i){
db = tibble(
title = names(numbers)[i],
title_num =  paste(unlist(numbers[i]), collapse = '')
)
})
do.call(rbind, lista)
}
db_values <- create_db_values(numbers)
values_ids <- long %>%
left_join(db_values)
View(values_ids)
longest_name =  max(nchar(values_ids$title_num))
longest_name
# ## numero de variables a crear
num_vars = seq(1, longest_name, 8)
num_vars
# # Crear nombre de variables
var_names = paste0("title", seq(1,length(num_vars)))
var_names
foas_ref <- import('data/1.reference/Copy of FOA mapping - old to new.xlsx')
names(foas_ref)
unique(foas_ref$`Thematic Area then and now`)
library(rio)
library(dplyr)
library(tidyr)
#read criterions from master file
criterion <- import('questionnaires/CP/list_of_achievements.xlsx', sheet = "Improvements")
ids_themes <- function(theme){
case_when(detecta(theme, "Food") ~ 1,
detecta(theme, "Health") ~ 2,
detecta(theme, "Energy") ~ 3,
detecta(theme, "Industrial") ~ 4,
detecta(theme, "Water") ~ 5,
detecta(theme, "Safety") ~ 6,
detecta(theme, "Knowledge") ~ 7
)
}
#read criterions from master file
raw <- import('questionnaires/CP/list_of_achievements.xlsx', sheet = "Improvements")
names(raw)
ids_themes <- function(theme){
case_when(detecta(theme, "Food") ~ 1,
detecta(theme, "Health") ~ 2,
detecta(theme, "Energy") ~ 3,
detecta(theme, "Industrial") ~ 4,
detecta(theme, "Water") ~ 5,
detecta(theme, "Safety") ~ 6,
detecta(theme, "Knowledge") ~ 7
)
}
themes <- raw %>%
group_by(Theme) %>%
slice(1) %>%
ungroup() %>%
mutate(theme_id = id_themes(Theme))
themes <- raw %>%
group_by(Theme) %>%
slice(1) %>%
ungroup() %>%
mutate(theme_id = ids_themes(Theme))
gmdacr::load_functions('functions')
themes <- raw %>%
group_by(Theme) %>%
slice(1) %>%
ungroup() %>%
mutate(theme_id = ids_themes(Theme))
#function to detect strings
detecta <- function(x, find){stringr::str_detect(x, find)}
themes <- raw %>%
group_by(Theme) %>%
slice(1) %>%
ungroup() %>%
mutate(theme_id = ids_themes(Theme))
View(themes)
themes <- raw %>%
group_by(Theme) %>%
slice(1) %>%
ungroup() %>%
mutate(theme_id = ids_themes(Theme)) %>%
select(title = Theme},
value =theme_id},
themes <- raw %>%
group_by(Theme) %>%
slice(1) %>%
ungroup() %>%
mutate(theme_id = ids_themes(Theme)) %>%
select(title = Theme,
value =theme_id
)
themes <- raw %>%
group_by(Theme) %>%
slice(1) %>%
ungroup() %>%
mutate(theme_id = ids_themes(Theme)) %>%
select(title = Theme,
value =theme_id
) %>%
arrange(theme_id)
themes <- raw %>%
group_by(Theme) %>%
slice(1) %>%
ungroup() %>%
mutate(theme_id = ids_themes(Theme)) %>%
select(title = Theme,
value =theme_id
) %>%
arrange(value)
cat_themes <- themes %>%
mutate(parentvalue = "",
attachmentname = ""
)
export(cat_themes,'questionnaires/categories/themes.xlsx', sheetName = "Categories", overwrite = T)
#create improvements ids --------------------------------------------------------
improvements <- raw %>%
left_join(themes, by = c("Themes"='title'))
names(raw)
#create improvements ids --------------------------------------------------------
improvements <- raw %>%
left_join(themes, by = c("Theme"='title'))
View(themes)
View(foas_ref)
#create improvements ids --------------------------------------------------------
improvements <- themes %>%
left_join(themes, by = c("Theme"='title'))
names(raw)
#create improvements ids --------------------------------------------------------
improvements <- raw %>%
left_join(themes, by = c("Theme"='title'))
#create improvements ids --------------------------------------------------------
improvements <- raw %>%
left_join(themes, by = c("Theme"='title'))
names(improvements)
#create improvements ids --------------------------------------------------------
improvements <- raw %>%
left_join(themes, by = c("Theme"='title')) %>%
rename(parentid = value)
names(improvements)
#create improvements ids --------------------------------------------------------
improvements <- raw %>%
left_join(themes, by = c("Theme"='title')) %>%
select(title = Improvement,
parentid = value)
rename(parentid = value)
names(improvements)
#create improvements ids --------------------------------------------------------
improvements <- raw %>%
left_join(themes, by = c("Theme"='title')) %>%
select(title = Improvement,
parentid = value)
names(improvements)
#create improvements ids --------------------------------------------------------
improvements <- raw %>%
left_join(themes, by = c("Theme"='title')) %>%
select(title = Improvement,
parentvalue = value) %>%
group_by(parentvalue)
#create improvements ids --------------------------------------------------------
improvements <- raw %>%
left_join(themes, by = c("Theme"='title')) %>%
select(title = Improvement,
parentvalue = value) %>%
group_by(parentvalue) %>%
mutate(value = paste0(parentvalue, row_number()),
attachmentname = "")
View(improvements)
export(cat_themes,'questionnaires/categories/improvements.xlsx', sheetName = "Categories", overwrite = T)
export(improvements,'questionnaires/categories/improvements.xlsx', sheetName = "Categories", overwrite = T)
