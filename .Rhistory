)
library(dplyr)
qa <- sdg %>%
group_by(id) %>%
summarise(questions = n(),
unanswered = sum(is.na(sdg)),
perc_unanswered = unanswered/questions
)
empty <- sum(qa$perc_unanswered == 1)
empty
names(sdg)
data_plot <- sdg %>%
filter(theme == "FOOD and AGRICULTURE") %>%
filter(!is.na(sdg)) %>%
group_by(region, sdg, area) %>%
summarise(total = n()) %>%
ungroup()
data_plot <- sdg %>%
filter(!is.na(sdg)) %>%
group_by(region, sdg, area) %>%
summarise(total = n()) %>%
ungroup()
View(data_plot)
data_plot <- sdg %>%
filter(!is.na(sdg)) %>%
group_by(region, sdg, area) %>%
summarise(total = n()) %>%
ungroup() %>%
group_by(sdg, region) %>%
mutate(answers = sum(total),
perc= total/answers) %>%
ungroup()
data_plot <- sdg %>%
filter(!is.na(sdg)) %>%
group_by(region, sdg, area)
data_plot <- sdg %>%
filter(!is.na(sdg)) %>%
group_by(region, sdg, area) %>%
summarise(total = n()) %>%
ungroup()
data_plot <- sdg %>%
filter(!is.na(sdg)) %>%
group_by(region, sdg, area) %>%
summarise(total = n()) %>%
ungroup()
data_plot <- sdg %>%
filter(!is.na(sdg)) %>%
group_by(region, sdg, area) %>%
summarise(total = n()) %>%
ungroup() %>%
group_by(region,area) %>%
mutate(answers = sum(total),
perc= total/answers)
#plot
ggplot(data_plot,
aes(
x = sdg,
y = perc,
fill = area)) +
geom_col() +
facet_wrap(~region)
#plot
ggplot(data_plot,
aes(
x = sdg,
y = perc,
fill = area)) +
geom_col(position = position_dodge()) +
facet_wrap(~region)
#plot
ggplot(data_plot,
aes(
y = sdg,
x = perc,
fill = area)) +
geom_col(position = position_dodge()) +
facet_wrap(~region)
#plot
ggplot(data_plot,
aes(
y = reorder(sdg,perd),
x = perc,
fill = area)) +
geom_col(position = position_dodge()) +
facet_wrap(~region)
#plot
ggplot(data_plot,
aes(
y = reorder(sdg,perc),
x = perc,
fill = area)) +
geom_col(position = position_dodge()) +
facet_wrap(~region)
#plot
ggplot(data_plot,
aes(
y = reorder(sdg,perc),
x = perc,
fill = area)) +
geom_col(position = position_dodge()) +
facet_wrap(~region) +
scale_x_continuous(labels = function(x)scales::percent(x)) +
scale_fill_brewer()
#plot
ggplot(data_plot,
aes(
y = reorder(sdg,perc),
x = perc,
fill = area)) +
geom_col(position = position_dodge()) +
facet_wrap(~region) +
scale_x_continuous(labels = function(x)scales::percent(x)) +
scale_fill_brewer() +
theme(legend.position = 'bottom') +
labs(y = "",
x = "",
title = "CONTRIBUTION TO SUSTAINABLE DEVELOPMENT GOALS",
subtitle = ""
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, vjust = .5),
axis.text.y = element_text(hjust = 0, size = 8),
legend.position = 'bottom',
legend.title = element_blank(),
plot.title.position = 'plot',
text = element_text(family = "Open Sans"))
#plot
ggplot(data_plot,
aes(
y = reorder(sdg,perc),
x = perc,
fill = area)) +
geom_col(position = position_dodge()) +
facet_wrap(~region) +
scale_x_continuous(labels = function(x)scales::percent(x)) +
scale_fill_brewer() +
theme(legend.position = 'bottom') +
labs(y = "",
x = "",
title = "CONTRIBUTION TO SUSTAINABLE DEVELOPMENT GOALS",
subtitle = "Direct contribution of nuclear technologies supported by TC programme"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, vjust = .5),
axis.text.y = element_text(hjust = 0, size = 8),
legend.position = 'bottom',
legend.title = element_blank(),
plot.title.position = 'plot',
text = element_text(family = "Open Sans"))
#plot
ggplot(data_plot,
aes(
y = reorder(sdg,perc),
x = perc,
fill = area)) +
geom_col(position = position_dodge()) +
facet_wrap(~region) +
scale_x_continuous(labels = function(x)scales::percent(x)) +
scale_fill_brewer(breaks = c("a", "b")) +
theme(legend.position = 'bottom') +
labs(y = "",
x = "",
title = "CONTRIBUTION TO SUSTAINABLE DEVELOPMENT GOALS",
subtitle = "Direct contribution of nuclear technologies supported by TC programme."
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, vjust = .5),
axis.text.y = element_text(hjust = 0, size = 8),
legend.position = 'bottom',
legend.title = element_blank(),
plot.title.position = 'plot',
text = element_text(family = "Open Sans"))
#plot
ggplot(data_plot,
aes(
y = reorder(sdg,perc),
x = perc,
fill = area)) +
geom_col(position = position_dodge()) +
facet_wrap(~region) +
scale_x_continuous(labels = function(x)scales::percent(x)) +
scale_fill_brewer(labels = c("a", "b")) +
theme(legend.position = 'bottom') +
labs(y = "",
x = "",
title = "CONTRIBUTION TO SUSTAINABLE DEVELOPMENT GOALS",
subtitle = "Direct contribution of nuclear technologies supported by TC programme."
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, vjust = .5),
axis.text.y = element_text(hjust = 0, size = 8),
legend.position = 'bottom',
legend.title = element_blank(),
plot.title.position = 'plot',
text = element_text(family = "Open Sans"))
#plot
ggplot(data_plot,
aes(
y = reorder(sdg,perc),
x = perc,
fill = area)) +
geom_col(position = position_dodge()) +
facet_wrap(~region) +
scale_x_continuous(labels = function(x)scales::percent(x))
#plot
ggplot(data_plot,
aes(
y = reorder(sdg,perc),
x = perc,
fill = area)) +
geom_col(position = position_dodge()) +
facet_wrap(~region) +
scale_x_continuous(labels = function(x)scales::percent(x)) +
#scale_fill_brewer(labels = c("a", "b")) +
theme(legend.position = 'bottom') +
labs(y = "",
x = "",
title = "CONTRIBUTION TO SUSTAINABLE DEVELOPMENT GOALS",
subtitle = "Direct contribution of nuclear technologies supported by TC programme."
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, vjust = .5),
axis.text.y = element_text(hjust = 0, size = 8),
legend.position = 'bottom',
legend.title = element_blank(),
plot.title.position = 'plot',
text = element_text(family = "Open Sans"))
#plot
ggplot(data_plot,
aes(
y = reorder(sdg,perc),
x = perc,
fill = area)) +
geom_col(position = position_dodge()) +
facet_wrap(~region) +
scale_x_continuous(labels = function(x)scales::percent(x)) +
scale_fill_brewer(labels = c("In achieving SDG",
"In Reporting on SDG progress")) +
theme(legend.position = 'bottom') +
labs(y = "",
x = "",
title = "CONTRIBUTION TO SUSTAINABLE DEVELOPMENT GOALS",
subtitle = "Contribution of nuclear technologies supported by TC programme."
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, vjust = .5),
axis.text.y = element_text(hjust = 0, size = 8),
legend.position = 'bottom',
legend.title = element_blank(),
plot.title.position = 'plot',
text = element_text(family = "Open Sans"))
#plot
ggplot(data_plot,
aes(
y = reorder(sdg,perc),
x = perc,
fill = area)) +
geom_col(position = position_dodge()) +
facet_wrap(~region) +
scale_x_continuous(labels = function(x)scales::percent(x),
expand = c(0,0)) +
scale_fill_brewer(labels = c("In achieving SDG",
"In Reporting on SDG progress")) +
theme(legend.position = 'bottom') +
labs(y = "",
x = "",
title = "CONTRIBUTION TO SUSTAINABLE DEVELOPMENT GOALS",
subtitle = "Contribution of nuclear technologies supported by TC programme."
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, vjust = .5),
axis.text.y = element_text(hjust = 0, size = 8),
legend.position = 'bottom',
legend.title = element_blank(),
plot.title.position = 'plot',
text = element_text(family = "Open Sans"))
#plot
ggplot(data_plot,
aes(
y = reorder(sdg,perc),
x = perc,
fill = area)) +
geom_col(position = position_dodge()) +
facet_wrap(~region) +
scale_x_continuous(labels = function(x)scales::percent(x),
expand = c(0,0)) +
scale_fill_brewer(labels = c("In Achieving SDG",
"In Reporting on SDG Progress")) +
theme(legend.position = 'bottom') +
labs(y = "",
x = "",
title = "CONTRIBUTION TO SUSTAINABLE DEVELOPMENT GOALS",
subtitle = "Contribution of nuclear technologies supported by TC programme."
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, vjust = .5),
axis.text.y = element_text(hjust = 0, size = 8),
legend.position = 'bottom',
legend.title = element_blank(),
plot.title.position = 'plot',
text = element_text(family = "Open Sans"))
ggsave('plots/sdg_test.png',
last_plot())
empty
#load dependencies --------------------------------------------------------------
#source("R_/5.QA/utils_QA.R")
library(dplyr)
library(httr)
library(stringr)
library(lubridate)
library(rio)
library(janitor)
library(susor)
#dfine parameters --------------------------------------------------------------
#sample_girls<- rio::import(survey_girls_sample_path)
questionnaire <- "cp"
sample_file <- 'data/2.sample/cps_sample_corrected.csv'
sample <- import(sample_file)
bounces <- import('data/4.campaigns/bounces_Oct_16_2023.csv') %>%
select(email =`Email Address`,
bounce = `Bounce Type`)
#download data ----------------------------------------------------------------
#login
#Import list of interviewers logged in Survey Solutions -----------------------
susor::susor_login(susor_server = "https://www.pulpodata.solutions",
susor_user = "araupontones",
susor_password = "Seguridad1",
susor_dir_downloads = 'data/6.data-collection/0.downloads',
susor_dir_raw = 'data/6.data-collection/1.raw',
limit = 100,
ofset = 1
)
#Download all versions of the questionnaire ----------------------------------
#get versions ---------------------------------------------------------------
versions <- susor_questionnaires$Version[susor_questionnaires$Variable == questionnaire]
downloads <- lapply(versions, function(x){
susor::susor_export_file(susor_qn_variable = questionnaire,
susor_qn_version = x,
susor_format = "STATA"
)
})
#append all versions ---------------------------------------------------------
susor::susor_append_versions(susor_qn_variable = questionnaire,
susor_format = "STATA")
#read raw data -----------------------------------------------------
raw_data <- rio::import(file.path(susor_dir_raw, questionnaire, 'cp.dta'))
#count missing values
raw_data$na_count <- apply(raw_data, 1, function(x) sum(is.na(x)))
raw_no_dupes<- raw_data %>%
#Keep only one observation by counterpart
group_by(counterpart) %>%
filter(na_count == min(na_count)) %>%
filter(n_questions_unanswered == min(n_questions_unanswered)) %>%
filter(row_number() == 1) %>%
ungroup() %>%
relocate(counterpart, na_count, n_questions_unanswered, interview__status)
#count number of  duplicates
dupes <- get_dupes(raw_no_dupes, counterpart)
#join with sample
raw_with_sample <- raw_no_dupes %>%
right_join(sample, by = c('counterpart' = 'cp_id')) %>%
mutate(across(c(interview__status, country), function(x)susor_get_stata_labels(x))) %>%
left_join(bounces) %>%
mutate(interview__status = case_when(!is.na(bounce) ~ "Bounced",
is.na(interview__status) ~ "Not Started",
#cases when user did not "completed the interview"
interview__status == "InterviewerAssigned" &
na_count <= 70 &
n_questions_unanswered <=3 ~ "Submitted",
interview__status == "InterviewerAssigned" ~ "Responding",
interview__status == "Completed" ~ "Submitted"
))
tabyl(raw_with_sample, interview__status)
#export raw data
export(raw_with_sample, file.path(susor_dir_raw, questionnaire, 'cp.rds'))
#QA response rates by countries
library(dplyr)
library(tidyr)
library(rio)
library(janitor)
library(susor)
library(openxlsx)
library(scales)
library(glue)
gmdacr::load_functions('functions')
#define paths =================================================================
raw_dir <- 'data/6.data-collection/1.raw/cp'
raw_data <- import(file.path(raw_dir, 'cp.rds'))
# gStatus ======================================================================
status <- raw_data %>%
relocate(Country_name, Name, email, interview__status, n_questions_unanswered)
#summary by country
by_country <- status %>%
group_by(Country_name) %>%
summarise(Sampled = n(),
Bounced = sum(interview__status == "Bounced"),
Accessed = sum(interview__status %in% c("Submitted", "Responding")),
Submitted = sum(interview__status == "Submitted"),
Avg_questions_unanswered = round(mean(n_questions_unanswered, na.rm = T),1),
response_rate = Submitted / Sampled
)
#Get row with totals totals --------------------------------------------------------------------
TOTALS <- tibble(
Country_name = "TOTAL",
Sampled = nrow(status),
Bounced = sum(by_country$Bounced),
Accessed = sum(by_country$Accessed),
Submitted = sum(by_country$Submitted),
Avg_questions_unanswered = round(mean(by_country$Avg_questions_unanswered, na.rm = T),1),
response_rate = Submitted/Sampled
)
#Define response rate
by_country_totals <- rbind(by_country, TOTALS) %>%
mutate(response_rate = scales::percent(response_rate, accuracy = .1),
Avg_questions_unanswered = ifelse(is.na(Avg_questions_unanswered), NA_real_, Avg_questions_unanswered))
# export summary by country
crate_xlsx_by_country(db = by_country_totals,
exfile = glue::glue("data/6.data-collection/2.response_rates/responses_by_country_{Sys.Date()}.xlsx")
)
total_countries = length(unique(by_country$Country_name))
havent_submitted =sum(by_country$Submitted ==0)
perc_havent = scales::percent(havent_submitted/total_countries)
sample_n = nrow(sample)
open = 4168
open_perc =scales::percent(open/sample_n)
accessed = comp = by_country_totals$Accessed[by_country_totals$Country_name == 'TOTAL']
acc_pers = percent(accessed/sample_n,accuracy = .01)
comp = by_country_totals$Submitted[by_country_totals$Country_name == 'TOTAL']
comp_pers = percent(comp/sample_n, accuracy = .01)
knitr::combine_words(sort(by_country$Country_name[by_country$Submitted==0]), sep = ", ")
avg_unanswered = round(mean(status$n_questions_unanswered[status$interview__status == "Submitted"], na.rm = T),1)
max_unanswered = round(max(status$n_questions_unanswered[status$interview__status == "Submitted"], na.rm = T),1)
glue::glue('from the {total_countries} countries in the sample, {havent_submitted} ({perc_havent}) have not submitted any interview yet.')
glue::glue('{open} ({open_perc}) have opened the invitation email')
glue('{accessed} ({acc_pers}) have accessed')
glue('{comp} ({comp_pers}) have submitted')
glue('The submitted interview with the maximum number of unanswered question, has {max_unanswered} unanswered')
glue("The average submitted interview has a total of {avg_unanswered} question")
list.dirs('data/3.Assignments')
#read sample ---------------------------------------------------------------------
sample <- import('data/2.sample/cps_sample_corrected.csv', encoding = "UTF-8") %>% select(cp_id , Name)
#read sample --------------------------------------------------------------------
raw_data <- import('data/6.data-collection/1.raw/cp/cp.rds') %>% select(cp_id = counterpart, interview__status)
list.files('data/4.campaigns/')
campaigns <- import('data/4.campaigns/cps_follow_up_2023-11-02.csv')
new_campaign <- campaigns %>%
left_join(sample)
View(new_campaign)
campaigns <- import('data/4.campaigns/cps_follow_up_2023-11-02.csv', encoding = "UTF-8")
new_campaign <- campaigns %>%
left_join(sample)
new_campaign <- campaigns %>%
left_join(sample) %>% get_dupes()
new_campaign <- campaigns %>%
left_join(sample) %>% get_dupes(cp_id)
new_campaign <- campaigns %>%
left_join(sample) %>% get_dupes(email)
View(new_campaign)
new_campaign <- campaigns %>%
left_join(sample) %>%
group_by(email) %>%
slice(1)
new_campaign <- campaigns %>%
left_join(sample) %>%
group_by(email) %>%
slice(1) %>%
left_join(raw_data ) %>%
filter(interview__status %in% c("Not Started", "Responding")) %>%
select(-c(date,cp_id, count, interview__status))
new_campaign <- campaigns %>%
left_join(sample) %>%
group_by(email) %>%
slice(1) %>%
left_join(raw_data)
new_campaign <- campaigns %>%
left_join(sample) %>%
group_by(email) %>%
slice(1) %>%
left_join(raw_data) %>%
filter(interview__status %in% c("Not Started", "Responding")) %>%
select(-c(cp_id, count, interview__status))
new_campaign <- campaigns %>%
left_join(sample) %>%
group_by(email) %>%
slice(1) %>%
left_join(raw_data)
tabyl(new_campaign, interview__status)
new_campaign <- campaigns %>%
left_join(sample) %>%
group_by(email) %>%
slice(1) %>%
left_join(raw_data) %>%
filter(interview__status %in% c("Not Started", "Responding"))
new_campaign <- campaigns %>%
left_join(sample) %>%
group_by(email) %>%
slice(1) %>%
left_join(raw_data) %>%
filter(interview__status %in% c("Not Started", "Responding")) %>%
select(-c(cp_id, interview__status))
export(new_campaign, 'data/4.campaigns/cps_follow_up_2023-11-07.csv')
tabyl(raw_with_sample, interview__status)
library(rio)
library(dplyr)
list.dirs('data/3.Assignments')
#read sample ---------------------------------------------------------------------
sample <- import('data/2.sample/cps_sample_corrected.csv', encoding = "UTF-8") %>% select(cp_id , Name)
#read sample --------------------------------------------------------------------
raw_data <- import('data/6.data-collection/1.raw/cp/cp.rds') %>% select(cp_id = counterpart, interview__status)
#define campaigns ---------------------------------------------------------------
campaigns <- list.files('data/4.campaigns/', pattern = "10|oct")
campaigns <- import('data/4.campaigns/cps_follow_up_2023-11-07.csv', encoding = "UTF-8")
