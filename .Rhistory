}
)
})
library(rio)
library(ggplot2)
library(RColorBrewer)
library(extrafont)
library(janitor)
library(dplyr)
library(scales)
library(glue)
library(stringr)
gmdacr::load_functions('functions/')
gmdacr::load_functions('functions/analysis_future/')
gmdacr::load_functions('functions/themes/')
gmdacr::load_functions('functions/plots//')
#import data ------------------------------------------------------------------
future_raw <- import('data/7.NLO/2.raw_formatted/Part_1_future.rds')
countries_lkp <- import('data/9.lookups/countries.rds') %>% select(-region)
#drop missing answers
future_clean <- future_raw %>%
dplyr::filter(!is.na(likert)) %>%
left_join(countries_lkp)
#check countries that asked these questions
who_answered <- future_clean %>%
group_by(country) %>%
slice(1)
#define categories of th likert scale, later used in the charts
categories <- levels(future_clean$likert)
list_analysis <- list(
#1. between thematic areas ---------------------------------------------------
list(
group_1= c('theme', 'likert'),
group_2 = c('theme'),
subtitle = "Between Themes."
),
#2. between geographic areas ------------------------------------------------
list(
group_1= c('region','theme', 'likert'),
group_2 = c('region','theme'),
subtitle = "Between Themes & Regions."
)
,
#3. between LDC status ------------------------------------------------------
list(
group_1= c('ldc','theme', 'likert'),
group_2 = c('ldc','theme'),
subtitle = "Between Themes & LDC status."
)
,
#between year joined ---------------------------------------------------------
list(
group_1= c('joined','theme', 'likert'),
group_2 = c('joined', 'theme'),
subtitle = "Between Themes & Year Joined."
)
)
#create plots
plots_future  <- lapply(c(1:length(list_analysis)), function(i){
pl <- charts_future(i, db = future_clean)
subtitulo =  list_analysis[[i]]$subtitle
#export chart
ggsave(glue('analysis/plots/1.future/{subtitulo}.png'),
pl,
units = 'cm')
}
)
# Future perspectives
#==============???????????????????????????????????===============================
# Research question
#? how important will the contribution of the TC programme be in achievingresults
# in the following areas in your country over the next 5-10 years?
library(rio)
library(ggplot2)
library(RColorBrewer)
library(extrafont)
library(janitor)
library(dplyr)
library(scales)
library(glue)
library(stringr)
gmdacr::load_functions('functions/')
gmdacr::load_functions('functions/analysis_future/')
gmdacr::load_functions('functions/themes/')
gmdacr::load_functions('functions/plots//')
#import data ------------------------------------------------------------------
future_raw <- import('data/7.NLO/2.raw_formatted/Part_1_future.rds')
countries_lkp <- import('data/9.lookups/countries.rds') %>% select(-region)
#drop missing answers
future_clean <- future_raw %>%
dplyr::filter(!is.na(likert)) %>%
left_join(countries_lkp)
View(future_clean)
#check countries that asked these questions
who_answered <- future_clean %>%
group_by(country) %>%
slice(1)
View(who_answered)
who_answered$country[!is.na(who_answered$joined)]
knitr::combine_words(who_answered$country[!is.na(who_answered$joined)])
knitr::combine_words(sort(who_answered$country[!is.na(who_answered$joined)]))
knitr::combine_words(sort(who_answered$country[who_answered$region == "Africa"]))
who_answered$country[who_answered$region == "Africa"])
who_answered$country[who_answered$region == "Africa"]
length(who_answered$country[who_answered$region == "Africa"])
knitr::combine_words(sort(who_answered$country[who_answered$region == "Africa"]))
knitr::combine_words(sort(who_answered$country[who_answered$region == "Asia and the Pacific"]))
knitr::combine_words(sort(who_answered$country[who_answered$region == "Asia and the Pacific"]))
length(who_answered$country[who_answered$region == "Asia and the Pacific"])
knitr::combine_words(sort(who_answered$country[who_answered$region == "Europe"]))
length(who_answered$country[who_answered$region == "Europe"])
knitr::combine_words(sort(who_answered$country[who_answered$region == "Latin America and the Caribbean"]))
length(who_answered$country[who_answered$region == "Latin America and the Caribbean"])
#load dependencies --------------------------------------------------------------
#source("R_/5.QA/utils_QA.R")
library(dplyr)
library(httr)
library(stringr)
library(lubridate)
library(rio)
library(janitor)
library(susor)
#dfine parameters --------------------------------------------------------------
#sample_girls<- rio::import(survey_girls_sample_path)
questionnaire <- "cp"
sample_file <- 'data/2.sample/cps_sample_corrected.csv'
sample <- import(sample_file)
bounces <- import('data/4.campaigns/bounces_Oct_16_2023.csv') %>%
select(email =`Email Address`,
bounce = `Bounce Type`)
#download data ----------------------------------------------------------------
#login
#Import list of interviewers logged in Survey Solutions -----------------------
susor::susor_login(susor_server = "https://www.pulpodata.solutions",
susor_user = "araupontones",
susor_password = "Seguridad1",
susor_dir_downloads = 'data/6.data-collection/0.downloads',
susor_dir_raw = 'data/6.data-collection/1.raw',
limit = 100,
ofset = 1
)
#Download all versions of the questionnaire ----------------------------------
#get versions ---------------------------------------------------------------
versions <- susor_questionnaires$Version[susor_questionnaires$Variable == questionnaire]
downloads <- lapply(versions, function(x){
susor::susor_export_file(susor_qn_variable = questionnaire,
susor_qn_version = x,
susor_format = "STATA"
)
})
#append all versions ---------------------------------------------------------
susor::susor_append_versions(susor_qn_variable = questionnaire,
susor_format = "STATA")
#read raw data -----------------------------------------------------
raw_data <- rio::import(file.path(susor_dir_raw, questionnaire, 'cp.dta'))
#count missing values
raw_data$na_count <- apply(raw_data, 1, function(x) sum(is.na(x)))
raw_no_dupes<- raw_data %>%
#Keep only one observation by counterpart
group_by(counterpart) %>%
filter(na_count == min(na_count)) %>%
filter(n_questions_unanswered == min(n_questions_unanswered)) %>%
filter(row_number() == 1) %>%
ungroup() %>%
relocate(counterpart, na_count, n_questions_unanswered, interview__status)
#count number of  duplicates
dupes <- get_dupes(raw_no_dupes, counterpart)
#join with sample
raw_with_sample <- raw_no_dupes %>%
right_join(sample, by = c('counterpart' = 'cp_id')) %>%
mutate(across(c(interview__status, country), function(x)susor_get_stata_labels(x))) %>%
left_join(bounces) %>%
mutate(interview__status = case_when(!is.na(bounce) ~ "Bounced",
is.na(interview__status) ~ "Not Started",
#cases when user did not "completed the interview"
interview__status == "InterviewerAssigned" &
na_count <= 70 &
n_questions_unanswered <=3 ~ "Submitted",
interview__status == "InterviewerAssigned" ~ "Responding",
interview__status == "Completed" ~ "Submitted"
))
tabyl(raw_with_sample, interview__status)
#export raw data
export(raw_with_sample, file.path(susor_dir_raw, questionnaire, 'cp.rds'))
#load dependencies --------------------------------------------------------------
#source("R_/5.QA/utils_QA.R")
library(dplyr)
library(httr)
library(stringr)
library(lubridate)
library(rio)
library(janitor)
library(susor)
#dfine parameters --------------------------------------------------------------
#sample_girls<- rio::import(survey_girls_sample_path)
questionnaire <- "cp"
sample_file <- 'data/2.sample/cps_sample_corrected.csv'
sample <- import(sample_file)
bounces <- import('data/4.campaigns/bounces_Oct_16_2023.csv') %>%
select(email =`Email Address`,
bounce = `Bounce Type`)
#download data ----------------------------------------------------------------
#login
#Import list of interviewers logged in Survey Solutions -----------------------
susor::susor_login(susor_server = "https://www.pulpodata.solutions",
susor_user = "araupontones",
susor_password = "Seguridad1",
susor_dir_downloads = 'data/6.data-collection/0.downloads',
susor_dir_raw = 'data/6.data-collection/1.raw',
limit = 100,
ofset = 1
)
#Download all versions of the questionnaire ----------------------------------
#get versions ---------------------------------------------------------------
versions <- susor_questionnaires$Version[susor_questionnaires$Variable == questionnaire]
downloads <- lapply(versions, function(x){
susor::susor_export_file(susor_qn_variable = questionnaire,
susor_qn_version = x,
susor_format = "STATA"
)
})
#append all versions ---------------------------------------------------------
susor::susor_append_versions(susor_qn_variable = questionnaire,
susor_format = "STATA")
#read raw data -----------------------------------------------------
raw_data <- rio::import(file.path(susor_dir_raw, questionnaire, 'cp.dta'))
#count missing values
raw_data$na_count <- apply(raw_data, 1, function(x) sum(is.na(x)))
raw_no_dupes<- raw_data %>%
#Keep only one observation by counterpart
group_by(counterpart) %>%
filter(na_count == min(na_count)) %>%
filter(n_questions_unanswered == min(n_questions_unanswered)) %>%
filter(row_number() == 1) %>%
ungroup() %>%
relocate(counterpart, na_count, n_questions_unanswered, interview__status)
#count number of  duplicates
dupes <- get_dupes(raw_no_dupes, counterpart)
#join with sample
raw_with_sample <- raw_no_dupes %>%
right_join(sample, by = c('counterpart' = 'cp_id')) %>%
mutate(across(c(interview__status, country), function(x)susor_get_stata_labels(x))) %>%
left_join(bounces) %>%
mutate(interview__status = case_when(!is.na(bounce) ~ "Bounced",
is.na(interview__status) ~ "Not Started",
#cases when user did not "completed the interview"
interview__status == "InterviewerAssigned" &
na_count <= 70 &
n_questions_unanswered <=3 ~ "Submitted",
interview__status == "InterviewerAssigned" ~ "Responding",
interview__status == "Completed" ~ "Submitted"
))
tabyl(raw_with_sample, interview__status)
#export raw data
export(raw_with_sample, file.path(susor_dir_raw, questionnaire, 'cp.rds'))
library(ggplot2)
library(extrafont)
#check response rates
all_responses <- list.files('data/6.data-collection/2.response_rates', pattern = "xlsx")
all_responses
reports <- lapply(all_responses, function(x){
r <- rio::import(file.path("data/6.data-collection/2.response_rates",x)) %>%
filter(Country_name == "TOTAL") %>%
mutate(date = str_remove_all(x, "responses_by_country_|.xlsx")) %>%
select(Submitted, Accessed, date)
}) %>% do.call(rbind,.)
clean_r <- reports %>%
mutate(date = lubridate::ymd(date)) %>%
pivot_longer(-date,
names_to = "status")
responses  = max(clean_r$value[clean_r$status == 'Submitted'])
rsponses_label = prettyNum(responses, big.mark = ",")
ggplot(clean_r,
aes(x = date,
y = value,
color = status)
) +
geom_line(size = 1) +
geom_point(size = 3) +
scale_x_date(date_breaks = '1 day', date_labels = "%b %d") +
scale_color_manual(name = "",
values = c('#019BAD', '#72B62C')) +
scale_y_continuous(
breaks = seq(0,responses +500, 500),
labels = function(x)prettyNum(seq(0,responses +500, 500), big.mark = ",")) +
theme_minimal() +
labs(y = "Counterparts",
x ="",
title = "Evolution of Responses",
subtitle = glue("CP Survey: {rsponses_label} counterparts have submitted their interview."),
caption = "Data: CP Survey | November 23 2023")+
theme(
plot.title.position = 'plot',
plot.title = element_text(size = 20, face = 'bold'),
plot.subtitle = element_text(size = 14),
axis.text.x = element_text(angle = 90),
axis.title.x = element_text(margin = margin(r = 20)),
legend.text = element_text(size = 11),
legend.position = 'top',
text = element_text(family = "Open Sans")
)
# str_remove_all(all_responses, "responses_by_country_|.xlsx")
#check response rates
all_responses <- list.files('data/6.data-collection/2.response_rates', pattern = "xlsx")
all_responses
reports <- lapply(all_responses, function(x){
r <- rio::import(file.path("data/6.data-collection/2.response_rates",x)) %>%
filter(Country_name == "TOTAL") %>%
mutate(date = str_remove_all(x, "responses_by_country_|.xlsx")) %>%
select(Submitted, Accessed, date)
}) %>% do.call(rbind,.)
clean_r <- reports %>%
mutate(date = lubridate::ymd(date)) %>%
pivot_longer(-date,
names_to = "status")
library(tidyr)
clean_r <- reports %>%
mutate(date = lubridate::ymd(date)) %>%
pivot_longer(-date,
names_to = "status")
responses  = max(clean_r$value[clean_r$status == 'Submitted'])
rsponses_label = prettyNum(responses, big.mark = ",")
ggplot(clean_r,
aes(x = date,
y = value,
color = status)
) +
geom_line(size = 1) +
geom_point(size = 3) +
scale_x_date(date_breaks = '1 day', date_labels = "%b %d") +
scale_color_manual(name = "",
values = c('#019BAD', '#72B62C')) +
scale_y_continuous(
breaks = seq(0,responses +500, 500),
labels = function(x)prettyNum(seq(0,responses +500, 500), big.mark = ",")) +
theme_minimal() +
labs(y = "Counterparts",
x ="",
title = "Evolution of Responses",
subtitle = glue("CP Survey: {rsponses_label} counterparts have submitted their interview."),
caption = "Data: CP Survey | November 23 2023")+
theme(
plot.title.position = 'plot',
plot.title = element_text(size = 20, face = 'bold'),
plot.subtitle = element_text(size = 14),
axis.text.x = element_text(angle = 90),
axis.title.x = element_text(margin = margin(r = 20)),
legend.text = element_text(size = 11),
legend.position = 'top',
text = element_text(family = "Open Sans")
)
library(glue)
ggplot(clean_r,
aes(x = date,
y = value,
color = status)
) +
geom_line(size = 1) +
geom_point(size = 3) +
scale_x_date(date_breaks = '1 day', date_labels = "%b %d") +
scale_color_manual(name = "",
values = c('#019BAD', '#72B62C')) +
scale_y_continuous(
breaks = seq(0,responses +500, 500),
labels = function(x)prettyNum(seq(0,responses +500, 500), big.mark = ",")) +
theme_minimal() +
labs(y = "Counterparts",
x ="",
title = "Evolution of Responses",
subtitle = glue("CP Survey: {rsponses_label} counterparts have submitted their interview."),
caption = "Data: CP Survey | November 23 2023")+
theme(
plot.title.position = 'plot',
plot.title = element_text(size = 20, face = 'bold'),
plot.subtitle = element_text(size = 14),
axis.text.x = element_text(angle = 90),
axis.title.x = element_text(margin = margin(r = 20)),
legend.text = element_text(size = 11),
legend.position = 'top',
text = element_text(family = "Open Sans")
)
#define all themes in the data
temas <- levels(future_clean$theme)
# Future perspectives
#==============???????????????????????????????????===============================
# Research question
#? how important will the contribution of the TC programme be in achievingresults
# in the following areas in your country over the next 5-10 years?
library(rio)
library(ggplot2)
library(RColorBrewer)
library(extrafont)
library(janitor)
library(dplyr)
library(scales)
library(glue)
library(stringr)
gmdacr::load_functions('functions/')
gmdacr::load_functions('functions/analysis_future/')
gmdacr::load_functions('functions/themes/')
gmdacr::load_functions('functions/plots//')
#import data ------------------------------------------------------------------
future_raw <- import('data/7.NLO/2.raw_formatted/Part_1_future.rds')
countries_lkp <- import('data/9.lookups/countries.rds') %>% select(-region)
#drop missing answers
future_clean <- future_raw %>%
dplyr::filter(!is.na(likert)) %>%
left_join(countries_lkp)
#check countries that asked these questions
who_answered <- future_clean %>%
group_by(country) %>%
slice(1)
knitr::combine_words(sort(who_answered$country[who_answered$region == "Latin America and the Caribbean"]))
length(who_answered$country[who_answered$region == "Latin America and the Caribbean"])
#define categories of th likert scale, later used in the charts
categories <- levels(future_clean$likert)
#define aggregations ===========================================================
list_analysis <- list(
#1. between thematic areas ---------------------------------------------------
list(
group_1= c('theme', 'likert'),
group_2 = c('theme'),
subtitle = "Between Themes."
),
#2. between geographic areas ------------------------------------------------
list(
group_1= c('region','theme', 'likert'),
group_2 = c('region','theme'),
subtitle = "Between Themes & Regions."
)
,
#3. between LDC status ------------------------------------------------------
list(
group_1= c('ldc','theme', 'likert'),
group_2 = c('ldc','theme'),
subtitle = "Between Themes & LDC status."
)
,
#between year joined ---------------------------------------------------------
list(
group_1= c('joined','theme', 'likert'),
group_2 = c('joined', 'theme'),
subtitle = "Between Themes & Year Joined."
)
)
#create plots
plots_future  <- lapply(c(1:length(list_analysis)), function(i){
pl <- charts_future(i, db = future_clean)
subtitulo =  list_analysis[[i]]$subtitle
#export chart
ggsave(glue('analysis/plots/1.future/{subtitulo}.png'),
pl,
units = 'cm')
}
)
#By FOA ========================================================================
#define all themes in the data
temas <- levels(future_clean$theme)
#loop over themes
analysis_themes <- lapply(temas, function(tema){
message(tema)
#define parameters of the theme (used to export and organize plots)
theme_id <- ids_themes(str_to_title(tema))
theme_sufix <- theme_suffix(theme_id)
#filter data of the team
data_theme <- filter(future_clean,theme == tema)  %>%
mutate(theme = as.character(tema),
foa = as.character(foa)) %>%
#doing this so I dont have to modify the function used above
select(-theme) %>%
rename(theme = foa)
plots_future  <- lapply(c(1:length(list_analysis)), function(i){
#create plot
pl <- charts_future(i, db = data_theme)
pl_2 <- pl +
scale_y_discrete(labels = label_wrap_gen(40))
subtitulo =  list_analysis[[i]]$subtitle
subtitulo = str_replace(subtitulo, "Theme", "FoA")
message(subtitulo)
#export chart
ggsave(glue('analysis/plots/1.future/{theme_sufix}_{subtitulo}.png'),
pl_2,
units = 'cm')
}
)
})
categories
themes
temas
temas
names_themes <- function(theme){
case_when(detecta(theme, "fa") ~ "FOOD and AGRICULTURE",
detecta(theme, "h") ~ "HEALTH and NUTRITION",
detecta(theme, "e") ~ "ENERGY PLANNING and NUCLEAR POWER",
detecta(theme, "i") ~ "INDUSTRIAL APPLICATIONS and RADIATION TECHNOLOGY",
detecta(theme, "w") ~ "WATER and ENVIRONMENT",
detecta(theme, "n") ~  "NUCLEAR SAFETY AND SECURITY",
detecta(theme, "Knowledge") ~ ""
)
}
names_themes <- function(theme){
case_when(detecta(theme, "fa") ~ "FOOD and AGRICULTURE",
detecta(theme, "h") ~ "HEALTH and NUTRITION",
detecta(theme, "e") ~ "ENERGY PLANNING and NUCLEAR POWER",
detecta(theme, "i") ~ "INDUSTRIAL APPLICATIONS and RADIATION TECHNOLOGY",
detecta(theme, "w") ~ "WATER and ENVIRONMENT",
detecta(theme, "n") ~  "NUCLEAR SAFETY AND SECURITY",
detecta(theme, "Knowledge") ~ ""
)
}
sufixes <- c("fa", "h", "e", "i", "w", "n")
plots_by_themes <- png_files[!main_section]
