tabyl(change_dev, decreased)
#change in development
change_dev <- dev_level %>%
#select(dev_2000, dev_2023) %>%
pivot_longer(c(dev_2000, dev_2023),
names_to = "period") %>%
filter(!is.na(value)) %>%
mutate(period = str_remove(period, "dev_"),
period = ifelse(period == "2000", "Before TCP", period),
status = case_when(str_detect(value, "EARLY") ~ "1.Early Stage",
str_detect(value, "OPERATIONAL") ~ "2.Operational",
str_detect(value, "EXPANSION") ~ "3.Expansion",
T ~ "0.No Capacity"
),
status = factor(status,
levels = c("0.No Capacity", "1.Early Stage", "2.Operational", "3.Expansion"),
ordered = T
),
Shrinked = ifelse(is.na(dev_reason), "Shrinked","Improved" )
)
export(change_dev, "data/11.powerbi/status_development.csv")
tabyl(change_dev, decreased)
tabyl(change_dev, shrinked)
#change in development
change_dev <- dev_level %>%
#select(dev_2000, dev_2023) %>%
pivot_longer(c(dev_2000, dev_2023),
names_to = "period") %>%
filter(!is.na(value)) %>%
mutate(period = str_remove(period, "dev_"),
period = ifelse(period == "2000", "Before TCP", period),
status = case_when(str_detect(value, "EARLY") ~ "1.Early Stage",
str_detect(value, "OPERATIONAL") ~ "2.Operational",
str_detect(value, "EXPANSION") ~ "3.Expansion",
T ~ "0.No Capacity"
),
status = factor(status,
levels = c("0.No Capacity", "1.Early Stage", "2.Operational", "3.Expansion"),
ordered = T
),
shrinked = ifelse(is.na(dev_reason), "Shrinked","Improved" )
)
tabyl(change_dev, shrinked)
export(change_dev, "data/11.powerbi/status_development.csv")
#change in development
change_dev <- dev_level %>%
#select(dev_2000, dev_2023) %>%
pivot_longer(c(dev_2000, dev_2023),
names_to = "period") %>%
filter(!is.na(value)) %>%
mutate(period = str_remove(period, "dev_"),
period = ifelse(period == "2000", "Before TCP", period),
status = case_when(str_detect(value, "EARLY") ~ "1.Early Stage",
str_detect(value, "OPERATIONAL") ~ "2.Operational",
str_detect(value, "EXPANSION") ~ "3.Expansion",
T ~ "0.No Capacity"
),
status = factor(status,
levels = c("0.No Capacity", "1.Early Stage", "2.Operational", "3.Expansion"),
ordered = T
),
shrinked = ifelse(!is.na(dev_reason), "Shrinked","Improved" )
)
export(change_dev, "data/11.powerbi/status_development.csv")
#development level.
#variables: dev_2023, dev_2000, and dev_reason (in case dev_2023 < dev_2000)
dev_level <- foas %>%
select(interview__id,theme, starts_with('dev'), region, foa, improvement, tcp_contribution)
#%>%
#mutate(theme = names_themes_2(theme)) %>%
# filter(theme == "Food and Agriculture")
tabyl(dev_level, tcp_contribution)
#clean data from CP survey
library(janitor)
library(dplyr)
library(tidyr)
library(rio)
library(forcats)
# Load data ===================================================================
# main section
raw_main <- import('data/6.data-collection/1.raw/cp/cp.rds')
#roster of foas
raw_foas <- import('data/6.data-collection/1.raw/cp/foas.dta')
#look up countries
countries_lkp <- import('data/9.lookups/countries.rds') %>% select(-region)
#Categories of foas in questionnaire
cat_foas <- import('questionnaires/categories/improvements.xlsx') %>%
select(improvement = title,
foas__id = value)
#Dictionary of foas for the whole evaluation
dictionary_foas <- import('data/1.reference/mapping_foas.xlsx') %>%
select(foa, improvement,theme ) %>%
group_by(improvement, theme) %>%
slice(1) %>%
ungroup()
# Clean main data ==============================================================
#keep completed interviews only
# Clean countries to make it consistent with sample
completed_main <- raw_main %>%
filter(interview__status == 'Submitted') %>%
filter(!is.na(theme)) %>%
#correct country name discrepancies
mutate(country = fct_recode(country,
'Saint Vincent & the Grenadines' = "Saint Vincent &amp; the Grenadines" )
) %>%
left_join(countries_lkp) %>%
#get labels of variables
mutate(across(c(theme),function(x)as.character(susor::susor_get_stata_labels(x))))
#total of 2674 interviews
#check that all countries are in the countries_lkp
# cp_countries <- unique(completed_d$country)
# setdiff(cp_countries, countries_lkp$country)
#Clean roster of foas ==========================================================
#count missing values
raw_foas$na_count <- apply(raw_foas, 1, function(x) sum(is.na(x)))
#get information from main questionnaire
#keep only completed interviews
completed_foas <- raw_foas %>%
left_join(select(completed_main,
interview__id, interview__status,
country, region,theme)) %>%
relocate(country, region,interview__status, na_count, theme) %>%
#drop interviews not in completed cp
filter(!is.na(interview__status)) %>%
#drop empty sections
filter(na_count < 36) %>%
#get variable labels
mutate(across(c(starts_with('dev'),tcp_contribution),
function(x)as.character(susor::susor_get_stata_labels(x))))
tabyl(completed_foas, tcp_contribution)
#get the name of the foas as they are in the evaluation framework
foas_consistent <- completed_foas %>%
#get the value of the foas (improvement) from the categories of the questionnaire
left_join(cat_foas) %>%
#get the foa from the dictionary
left_join(dictionary_foas)
message(paste("After:", nrow(foas_consistent)))
#export clean files
export(completed_main, 'data/6.data-collection/4.clean/cps.rds')
export(foas_consistent, 'data/6.data-collection/4.clean/foas.rds')
#Constraints Based on the Evaluation Framework developed in SCHEMA toc FOOD AND AGRICULTURE
library(dplyr)
library(rio)
library(janitor)
library(tidyr)
library(stringr)
library(ggplot2)
gmdacr::load_functions('functions')
gmdacr::load_functions('functions/themes/')
# LOAD DATA =====================================================================
#load foas' roster collected in the CP survey
foas <-import('data/6.data-collection/4.clean/foas.rds')
names(foas)
names(foas)
tabyl(foas, theme)
# PREPARE DATA ================================================================
#development level.
#variables: dev_2023, dev_2000, and dev_reason (in case dev_2023 < dev_2000)
dev_level <- foas %>%
select(interview__id,theme, starts_with('dev'), region, foa, improvement, tcp_contribution)
#%>%
#mutate(theme = names_themes_2(theme)) %>%
# filter(theme == "Food and Agriculture")
tabyl(dev_level, tcp_contribution)
#change in development
change_dev <- dev_level %>%
#select(dev_2000, dev_2023) %>%
pivot_longer(c(dev_2000, dev_2023),
names_to = "period") %>%
filter(!is.na(value)) %>%
mutate(period = str_remove(period, "dev_"),
period = ifelse(period == "2000", "Before TCP", period),
status = case_when(str_detect(value, "EARLY") ~ "1.Early Stage",
str_detect(value, "OPERATIONAL") ~ "2.Operational",
str_detect(value, "EXPANSION") ~ "3.Expansion",
T ~ "0.No Capacity"
),
status = factor(status,
levels = c("0.No Capacity", "1.Early Stage", "2.Operational", "3.Expansion"),
ordered = T
),
shrinked = ifelse(!is.na(dev_reason), "Shrinked","Improved" )
)
names(change_dev)
export(change_dev, "data/11.powerbi/status_development.csv")
#Constraints Based on the Evaluation Framework developed in SCHEMA toc FOOD AND AGRICULTURE
library(dplyr)
library(rio)
library(janitor)
library(tidyr)
library(stringr)
library(ggplot2)
gmdacr::load_functions('functions')
gmdacr::load_functions('functions/themes/')
# LOAD DATA =====================================================================
#load foas' roster collected in the CP survey
foas <-import('data/6.data-collection/4.clean/foas.rds')
names(foas)
names(foas)
tabyl(foas, theme)
# PREPARE DATA ================================================================
#development level.
#variables: dev_2023, dev_2000, and dev_reason (in case dev_2023 < dev_2000)
dev_level <- foas %>%
select(interview__id,theme, starts_with('dev'), region, foa, improvement, tcp_contribution)
#%>%
#mutate(theme = names_themes_2(theme)) %>%
# filter(theme == "Food and Agriculture")
tabyl(dev_level, tcp_contribution)
sum(!is.na(dev_level$dev_reason))
#change in development
change_dev <- dev_level %>%
#select(dev_2000, dev_2023) %>%
pivot_longer(c(dev_2000, dev_2023),
names_to = "period") %>%
filter(!is.na(value)) %>%
mutate(period = str_remove(period, "dev_"),
period = ifelse(period == "2000", "Before TCP", period),
status = case_when(str_detect(value, "EARLY") ~ "1.Early Stage",
str_detect(value, "OPERATIONAL") ~ "2.Operational",
str_detect(value, "EXPANSION") ~ "3.Expansion",
T ~ "0.No Capacity"
),
status = factor(status,
levels = c("0.No Capacity", "1.Early Stage", "2.Operational", "3.Expansion"),
ordered = T
),
shrinked = ifelse(!is.na(dev_reason), "Shrinked","Improved" )
)
tabyl(change_dev, tcp_contribution)
#change in development
change_dev <- dev_level %>%
#select(dev_2000, dev_2023) %>%
pivot_longer(c(dev_2000, dev_2023),
names_to = "period") %>%
filter(!is.na(value)) %>%
mutate(period = str_remove(period, "dev_"),
period = ifelse(period == "2000", "Before TCP", period),
status = case_when(str_detect(value, "EARLY") ~ "1.Early Stage",
str_detect(value, "OPERATIONAL") ~ "2.Operational",
str_detect(value, "EXPANSION") ~ "3.Expansion",
T ~ "0.No Capacity"
),
status = factor(status,
levels = c("0.No Capacity", "1.Early Stage", "2.Operational", "3.Expansion"),
ordered = T
),
tcp_contribution = case_when(str_detect(tcp_contribution, "not contributed") ~ "0.Did not contribute",
str_detect(tcp_contribution, "extent") ~ "1.To some extent",
str_detect(tcp_contribution, "substantially ") ~ "2.Contributed substantially",
str_detect(tcp_contribution, "not possible") ~ "3.Impossible without TCP",
T ~ tcp_contribution
),
shrinked = ifelse(!is.na(dev_reason), "Shrinked","Improved" )
)
tabyl(change_dev, tcp_contribution)
export(change_dev, "data/11.powerbi/status_development.csv")
library(rio)
library(ggplot2)
library(RColorBrewer)
library(extrafont)
sustainability <- import('data/7.NLO/2.raw_formatted/Part_1_sustainability.rds')
library(rio)
library(dplyr)
library(tidyr)
library(janitor)
gmdacr::load_functions('functions/')
raw_data <- import('data/7.NLO/1.raw/Part_1.rds')
#define section
sections <- c(#"relevance")
#"effectiveness")
"sustainability")
#define themes ---------------------------------------------------------------
themes <- names(raw_data)[str_detect(names(raw_data), 'theme')]
library(stringr)
gmdacr::load_functions('functions/')
raw_data <- import('data/7.NLO/1.raw/Part_1.rds')
#define section
sections <- c(#"relevance")
#"effectiveness")
"sustainability")
#define themes ---------------------------------------------------------------
themes <- names(raw_data)[str_detect(names(raw_data), 'theme')]
#Mapping of foas
mapping_foas <- import('data/1.reference/mapping_foas.xlsx') %>%
#updating the name of the foa
select(foa,
foa_nlo1_effectiveness,
improvement) %>%
filter(!is.na(foa)) %>%
group_by(foa) %>%
slice(1) %>%
ungroup()
tabyl(mapping_foas, foa_nlo1_effectiveness)
tabyl(mapping_foas, foa)
#Mapping of foas
mapping_foas <- import('data/1.reference/mapping_foas.xlsx') %>%
#updating the name of the foa
select(foa,
foa_nlo1_effectiveness,
improvement) %>%
filter(!is.na(foa_nlo1_effectiveness)) %>%
group_by(foa) %>%
slice(1) %>%
ungroup()
tabyl(mapping_foas, foa)
append_themes <- lapply(themes, function(t){
#get the suffix, it allows to identify the theme of the variables
sufix = get_suffix(t, raw_data)
r <- raw_data %>%
#keep data for relevance section only,
#and pivot it longer
#function created in functions.
keep_section(t, sections[1], sufix) %>%
#   #the column name contains all the info:
mutate(section = str_extract(name, '^.*?(?=-|_)'),
foa = str_remove(name, '^.*_[a-z]{1,}_'),
outcome_nlo = str_extract(foa, "_.{1,}$"),
outcome_nlo = str_remove(foa, outcome_nlo),
outcome_nlo = str_remove(outcome_nlo, "_")
) %>%
rename(period = value) %>%
select(-name)
}) %>% do.call(rbind,.)
tabyl(append_themes, outcome_nlo)
#Mapping of foas
mapping_foas <- import('data/1.reference/mapping_foas.xlsx') %>%
#updating the name of the foa
select(foa,
foa_nlo1_effectiveness,
improvement) %>%
filter(!is.na(foa_nlo1_effectiveness)) %>%
group_by(foa) %>%
slice(1) %>%
ungroup()
tabyl(mapping_foas, foa)
#define section
sections <- c(#"relevance")
#"effectiveness")
"sustainability")
#define themes ---------------------------------------------------------------
themes <- names(raw_data)[str_detect(names(raw_data), 'theme')]
append_themes <- lapply(themes, function(t){
#get the suffix, it allows to identify the theme of the variables
sufix = get_suffix(t, raw_data)
r <- raw_data %>%
#keep data for relevance section only,
#and pivot it longer
#function created in functions.
keep_section(t, sections[1], sufix) %>%
#   #the column name contains all the info:
mutate(section = str_extract(name, '^.*?(?=-|_)'),
foa = str_remove(name, '^.*_[a-z]{1,}_'),
improvement = str_extract(foa, "_.{1,}$"),
foa = str_remove(foa, improvement),
improvement = str_remove(improvement, "_")
) %>%
rename(period = value) %>%
select(-name)
}) %>% do.call(rbind,.)
tabyl(append_themes, improvement)
append_themes <- lapply(themes, function(t){
#get the suffix, it allows to identify the theme of the variables
sufix = get_suffix(t, raw_data)
r <- raw_data %>%
#keep data for relevance section only,
#and pivot it longer
#function created in functions.
keep_section(t, sections[1], sufix) %>%
#   #the column name contains all the info:
mutate(section = str_extract(name, '^.*?(?=-|_)'),
foa = str_remove(name, '^.*_[a-z]{1,}_'),
improvement = str_extract(foa, "_.{1,}$"),
foa = str_remove(foa, improvement),
improvement = str_remove(improvement, "_"),
improvement = str_trim(improvement)
) %>%
rename(period = value) %>%
select(-name)
}) %>% do.call(rbind,.)
tabyl(append_themes, improvement)
r <- raw_data %>%
#keep data for relevance section only,
#and pivot it longer
#function created in functions.
keep_section(t, sections[1], sufix) %>%
#   #the column name contains all the info:
mutate(section = str_extract(name, '^.*?(?=-|_)'),
foa = str_remove(name, '^.*_[a-z]{1,}_'),
improvement = str_extract(foa, "_.{1,}$"),
foa = str_remove(foa, improvement),
improvement = str_remove(improvement, "_"),
improvement = str_trim(improvement),
improvement = str_to_sentence(improvement)
) %>%
rename(period = value) %>%
select(-name)
append_themes <- lapply(themes, function(t){
#get the suffix, it allows to identify the theme of the variables
sufix = get_suffix(t, raw_data)
r <- raw_data %>%
#keep data for relevance section only,
#and pivot it longer
#function created in functions.
keep_section(t, sections[1], sufix) %>%
#   #the column name contains all the info:
mutate(section = str_extract(name, '^.*?(?=-|_)'),
foa = str_remove(name, '^.*_[a-z]{1,}_'),
improvement = str_extract(foa, "_.{1,}$"),
foa = str_remove(foa, improvement),
improvement = str_remove(improvement, "_"),
improvement = str_trim(improvement),
improvement = str_to_sentence(improvement)
) %>%
rename(period = value) %>%
select(-name)
}) %>% do.call(rbind,.)
tabyl(append_themes, improvement)
append_themes <- lapply(themes, function(t){
#get the suffix, it allows to identify the theme of the variables
sufix = get_suffix(t, raw_data)
r <- raw_data %>%
#keep data for relevance section only,
#and pivot it longer
#function created in functions.
keep_section(t, sections[1], sufix) %>%
#   #the column name contains all the info:
mutate(section = str_extract(name, '^.*?(?=-|_)'),
foa = str_remove(name, '^.*_[a-z]{1,}_'),
improvement = str_extract(foa, "_.{1,}$"),
foa = str_remove(foa, improvement),
improvement = str_remove(improvement, "_"),
improvement = str_trim(improvement),
improvement = str_to_sentence(improvement),
improvement = str_replace_all(improvement, "/ ", "/")
) %>%
rename(period = value) %>%
select(-name)
}) %>% do.call(rbind,.)
tabyl(append_themes, improvement)
append_themes <- lapply(themes, function(t){
#get the suffix, it allows to identify the theme of the variables
sufix = get_suffix(t, raw_data)
r <- raw_data %>%
#keep data for relevance section only,
#and pivot it longer
#function created in functions.
keep_section(t, sections[1], sufix) %>%
#   #the column name contains all the info:
mutate(section = str_extract(name, '^.*?(?=-|_)'),
foa = str_remove(name, '^.*_[a-z]{1,}_'),
improvement = str_extract(foa, "_.{1,}$"),
foa = str_remove(foa, improvement),
improvement = str_remove(improvement, "_"),
improvement = str_trim(improvement),
improvement = str_to_sentence(improvement),
improvement = str_replace_all(improvement, "/ ", "/"),
improvement = str_replace_all(improvement, "education centre", "education centres")
) %>%
rename(period = value) %>%
select(-name)
}) %>% do.call(rbind,.)
tabyl(append_themes, improvement)
append_themes <- lapply(themes, function(t){
#get the suffix, it allows to identify the theme of the variables
sufix = get_suffix(t, raw_data)
r <- raw_data %>%
#keep data for relevance section only,
#and pivot it longer
#function created in functions.
keep_section(t, sections[1], sufix) %>%
#   #the column name contains all the info:
mutate(section = str_extract(name, '^.*?(?=-|_)'),
foa = str_remove(name, '^.*_[a-z]{1,}_'),
improvement = str_extract(foa, "_.{1,}$"),
foa = str_remove(foa, improvement),
improvement = str_remove(improvement, "_"),
improvement = str_trim(improvement),
improvement = str_to_sentence(improvement),
improvement = str_replace_all(improvement, "/ ", "/"),
improvement = str_replace_all(improvement, "education centres", "education centre")
) %>%
rename(period = value) %>%
select(-name)
}) %>% do.call(rbind,.)
tabyl(append_themes, improvement)
tabyl(append_themes, foa)
append_themes <- lapply(themes, function(t){
#get the suffix, it allows to identify the theme of the variables
sufix = get_suffix(t, raw_data)
r <- raw_data %>%
#keep data for relevance section only,
#and pivot it longer
#function created in functions.
keep_section(t, sections[1], sufix) %>%
#   #the column name contains all the info:
mutate(section = str_extract(name, '^.*?(?=-|_)'),
foa = str_remove(name, '^.*_[a-z]{1,}_'),
improvement = str_extract(foa, "_.{1,}$"),
foa = str_remove(foa, improvement),
improvement = str_remove(improvement, "_"),
improvement = str_trim(improvement),
improvement = str_to_sentence(improvement),
improvement = str_replace_all(improvement, "/ ", "/"),
improvement = str_replace_all(improvement, "education centres", "education centre")
) %>%
rename(period = value,
foa_nlo1_effectiveness = foa) %>%
select(-name)
}) %>% do.call(rbind,.)
tabyl(append_themes, foa)
tabyl(append_themes, foa_nlo1_effectiveness)
