# mutate(Institution = case_when(str_detect(Institution, "COMENA") ~ "Commissariat à l'énergie atomique (COMENA)",
#                                str_detect(Institution, "AAEHC") ~ "Afghanistan Atomic Energy High Commission (AAEHC)",
#                                str_detect(Institution, "AMARAP") ~ "Agence Malienne de Radioprotection (AMARAP)",
#                                T ~ Institution)) %>%
rename(country = Country) %>%
clean_countries() %>%
rename(FOA_old = FOADescription) %>%
left_join(lkp_foas)
names(institutions_id)
institutions_id <- df_complete %>%
#Select relevant variables
select(Index, ProjectNumber, FOADescription,Country,Area,Institution, Name, EMail, Nationality) %>%
#create a row by each institution of the project
separate(Institution,paste0("inst_",c(1:9)), ";") %>%
pivot_longer(-c(Index, Country,Area, Name, EMail,ProjectNumber, FOADescription, Nationality),
values_to = "Institution") %>%
select(-name) %>%
filter(!is.na(Institution)) %>%
#clean some institutions,
#this could take a long time. There are many cases of the same institution written
#differently
mutate(Institution = stringr::str_trim(Institution)) %>%
# distinct() %>%
# filter(!Institution %in% c('.', "", "•")) %>%
# mutate(Institution = case_when(str_detect(Institution, "COMENA") ~ "Commissariat à l'énergie atomique (COMENA)",
#                                str_detect(Institution, "AAEHC") ~ "Afghanistan Atomic Energy High Commission (AAEHC)",
#                                str_detect(Institution, "AMARAP") ~ "Agence Malienne de Radioprotection (AMARAP)",
#                                T ~ Institution)) %>%
rename(country = Country) %>%
clean_countries() %>%
rename(FOA_old = FOADescription) %>%
left_join(lkp_foas) %>%
select(-Index,
-total_projects
)
names(institutions_id)
tabyl(institutions_id, FOA_new)
lkp_improvements <- import('data/9.lookups/improvements.rds')
names(lkp_improvements)
institutions_id <- df_complete %>%
#Select relevant variables
select(Index, ProjectNumber, FOADescription,Country,Area,Institution, Name, EMail, Nationality) %>%
#create a row by each institution of the project
separate(Institution,paste0("inst_",c(1:9)), ";") %>%
pivot_longer(-c(Index, Country,Area, Name, EMail,ProjectNumber, FOADescription, Nationality),
values_to = "Institution") %>%
select(-name) %>%
filter(!is.na(Institution)) %>%
#clean some institutions,
#this could take a long time. There are many cases of the same institution written
#differently
mutate(Institution = stringr::str_trim(Institution)) %>%
# distinct() %>%
# filter(!Institution %in% c('.', "", "•")) %>%
# mutate(Institution = case_when(str_detect(Institution, "COMENA") ~ "Commissariat à l'énergie atomique (COMENA)",
#                                str_detect(Institution, "AAEHC") ~ "Afghanistan Atomic Energy High Commission (AAEHC)",
#                                str_detect(Institution, "AMARAP") ~ "Agence Malienne de Radioprotection (AMARAP)",
#                                T ~ Institution)) %>%
rename(country = Country) %>%
#Clean countries
clean_countries() %>%
#fetch foas
rename(FOA_old = FOADescription) %>%
left_join(lkp_foas) %>%
#fetch improvements
left_join(lkp_improvements)
institutions_id <- df_complete %>%
#Select relevant variables
select(Index, ProjectNumber, FOADescription,Country,Area,Institution, Name, EMail, Nationality) %>%
#create a row by each institution of the project
separate(Institution,paste0("inst_",c(1:9)), ";") %>%
pivot_longer(-c(Index, Country,Area, Name, EMail,ProjectNumber, FOADescription, Nationality),
values_to = "Institution") %>%
select(-name) %>%
filter(!is.na(Institution)) %>%
#clean some institutions,
#this could take a long time. There are many cases of the same institution written
#differently
mutate(Institution = stringr::str_trim(Institution)) %>%
# distinct() %>%
# filter(!Institution %in% c('.', "", "•")) %>%
# mutate(Institution = case_when(str_detect(Institution, "COMENA") ~ "Commissariat à l'énergie atomique (COMENA)",
#                                str_detect(Institution, "AAEHC") ~ "Afghanistan Atomic Energy High Commission (AAEHC)",
#                                str_detect(Institution, "AMARAP") ~ "Agence Malienne de Radioprotection (AMARAP)",
#                                T ~ Institution)) %>%
rename(country = Country) %>%
#Clean countries
clean_countries() %>%
#fetch foas
rename(FOA_old = FOADescription) %>%
left_join(lkp_foas) %>%
#fetch improvements
left_join(lkp_improvements) %>%
select(-Index,
-total_projects
)
tabyl(institutions_id, FOA_new)
tabyl(institutions_id, Improvement)
names(institutions_id)
export(institutions_id, 'data/1.reference/clean/institutions.rds')
institutions <- import('data/1.reference/clean/institutions.rds')
#Total number of institutions
total_institutions = prettyNum(length(unique(institutions$Institution)), big.mark = ',')
total_institutions
unique_insts <- function(var){length(unique(var))}
institutions %>%
group_by(theme) %>%
#Count unique institutions by theme
summarise(projects = unique_insts(Institution)) %>%
plot_num_projects(theme = "Across Tematic Areas",
unit_title = "Institutions",
y_variable = theme,
num_projects_theme = total_institutions)
institutions <- import('data/1.reference/clean/institutions.rds') %>%
filter(!is.na(theme))
#Total number of institutions
total_institutions = prettyNum(length(unique(institutions$Institution)), big.mark = ',')
total_institutions
unique_insts <- function(var){length(unique(var))}
institutions %>%
group_by(theme) %>%
#Count unique institutions by theme
summarise(projects = unique_insts(Institution)) %>%
plot_num_projects(theme = "Across Tematic Areas",
unit_title = "Institutions",
y_variable = theme,
num_projects_theme = total_institutions)
institutions %>%
group_by(theme) %>%
#Count unique institutions by theme
summarise(projects = unique_insts(Institution)) %>%
plot_num_projects(theme = "Across Tematic Areas",
unit_title = "Institutions",
y_variable = theme,
num_projects_theme = total_institutions)
plot_num_projects <- function(.data,
theme,
y_variable = Improvement,
regroup = F,
num_projects_theme,
label_size = 5,
hjust = 1.5,
unit_title = "Projects"){
unit_subtitle <- str_to_lower(unit_title)
d <- .data
if(regroup){
d <- .data %>% group_by(Improvement, region) %>% summarise(projects = sum(projects), .groups = 'drop')
}
d %>%
ggplot(
aes(x = projects,
y = reorder({{y_variable}}, projects),
label = prettyNum(projects, big.mark = ','))
) +
geom_col(fill = blue,
width = .8
) +
geom_text(hjust =hjust,
size = label_size,
family = "Open Sans",
color = "white") +
scale_y_discrete(label = label_wrap_gen(30)) +
scale_fill_brewer(palette = 'Greens') +
scale_x_continuous(labels = function(x)prettyNum(x, big.mark = ",")) +
labs(title = glue("Number of {unit_title} Supported by the TCP in the 21st Century."),
subtitle = glue('{theme}: Distribution of the {num_projects_theme} {unit_subtitle} supported.'),
caption = "Source: Administrative Data.")+
theme_main()
}
institutions %>%
group_by(theme) %>%
#Count unique institutions by theme
summarise(projects = unique_insts(Institution)) %>%
plot_num_projects(theme = "Across Tematic Areas",
unit_title = "Institutions",
y_variable = theme,
num_projects_theme = total_institutions)
ggsave(glue('{exdir}/total_institutions.png'))
View(institutions)
ggsave(glue('{exdir}/total_institutions.png'))
institutions %>%
group_by(theme, region) %>%
summarise(projects = unique_insts(Institution)),
.groups = 'drop') %>%
plot_num_projects(theme = "Across Tematic Areas",
unit_title = 'Institutions',
y_variable = theme,
num_projects_theme = total_institutions,
label_size = 2,
hjust = 1) +
facet_wrap(~region)
institutions %>%
group_by(theme, region) %>%
summarise(projects = unique_insts(Institution),
.groups = 'drop') %>%
plot_num_projects(theme = "Across Tematic Areas",
unit_title = 'Institutions',
y_variable = theme,
num_projects_theme = total_institutions,
label_size = 2,
hjust = 1) +
facet_wrap(~region)
institutions %>%
group_by(theme, region) %>%
summarise(projects = unique_insts(Institution),
.groups = 'drop') %>%
plot_num_projects(theme = "Across Tematic Areas",
unit_title = 'Institutions',
y_variable = theme,
num_projects_theme = total_institutions,
label_size = 2,
hjust = 1) +
facet_wrap(~region)
names(institutions_id)
lkp_countries <- import('data/9.lookups/countries.rds')
institutions_id <- df_complete %>%
#Select relevant variables
select(Index, ProjectNumber, FOADescription,Country,Area,Institution, Name, EMail, Nationality) %>%
#create a row by each institution of the project
separate(Institution,paste0("inst_",c(1:9)), ";") %>%
pivot_longer(-c(Index, Country,Area, Name, EMail,ProjectNumber, FOADescription, Nationality),
values_to = "Institution") %>%
select(-name) %>%
filter(!is.na(Institution)) %>%
#clean some institutions,
#this could take a long time. There are many cases of the same institution written
#differently
mutate(Institution = stringr::str_trim(Institution)) %>%
# distinct() %>%
# filter(!Institution %in% c('.', "", "•")) %>%
# mutate(Institution = case_when(str_detect(Institution, "COMENA") ~ "Commissariat à l'énergie atomique (COMENA)",
#                                str_detect(Institution, "AAEHC") ~ "Afghanistan Atomic Energy High Commission (AAEHC)",
#                                str_detect(Institution, "AMARAP") ~ "Agence Malienne de Radioprotection (AMARAP)",
#                                T ~ Institution)) %>%
rename(country = Country) %>%
#Clean countries
clean_countries() %>%
left_join(lkp_countries) %>%
clean_regions(.)
institutions_id <- df_complete %>%
#Select relevant variables
select(Index, ProjectNumber, FOADescription,Country,Area,Institution, Name, EMail, Nationality) %>%
#create a row by each institution of the project
separate(Institution,paste0("inst_",c(1:9)), ";") %>%
pivot_longer(-c(Index, Country,Area, Name, EMail,ProjectNumber, FOADescription, Nationality),
values_to = "Institution") %>%
select(-name) %>%
filter(!is.na(Institution)) %>%
#clean some institutions,
#this could take a long time. There are many cases of the same institution written
#differently
mutate(Institution = stringr::str_trim(Institution)) %>%
# distinct() %>%
# filter(!Institution %in% c('.', "", "•")) %>%
# mutate(Institution = case_when(str_detect(Institution, "COMENA") ~ "Commissariat à l'énergie atomique (COMENA)",
#                                str_detect(Institution, "AAEHC") ~ "Afghanistan Atomic Energy High Commission (AAEHC)",
#                                str_detect(Institution, "AMARAP") ~ "Agence Malienne de Radioprotection (AMARAP)",
#                                T ~ Institution)) %>%
rename(country = Country) %>%
#Clean countries
clean_countries() %>%
left_join(lkp_countries) %>%
clean_regions(.) %>%
#fetch foas
rename(FOA_old = FOADescription) %>%
left_join(lkp_foas) %>%
#fetch improvements
left_join(lkp_improvements) %>%
select(-Index,
-total_projects
)
tabyl(institutions, region)
tabyl(institutions_id, region)
export(institutions_id, 'data/1.reference/clean/institutions.rds')
institutions <- import('data/1.reference/clean/institutions.rds') %>%
filter(!is.na(theme))
#Utils ----------------------------------------------------------------------
#count unique number of institution
unique_insts <- function(var){length(unique(var))}
#Total number of institutions
total_institutions = prettyNum(length(unique(institutions$Institution)), big.mark = ',')
total_institutions
institutions %>%
group_by(theme) %>%
#Count unique institutions by theme
summarise(projects = unique_insts(Institution)) %>%
plot_num_projects(theme = "Across Tematic Areas",
unit_title = "Institutions",
y_variable = theme,
num_projects_theme = total_institutions)
ggsave(glue('{exdir}/total_institutions.png'))
institutions %>%
group_by(theme, region) %>%
summarise(projects = unique_insts(Institution),
.groups = 'drop') %>%
plot_num_projects(theme = "Across Tematic Areas",
unit_title = 'Institutions',
y_variable = theme,
num_projects_theme = total_institutions,
label_size = 2,
hjust = 1) +
facet_wrap(~region)
ggsave(glue('{exdir}/total_institutions_regions.png'))
themes <- unique(institutions$theme)
themes <- unique(institutions$theme)
export_plots <- lapply(themes, function(theme_){
message(theme_)
#Fetch theme details from lookup
theme_code_ <- find_in_lkp(projects, fetch = 'theme_code', when = 'theme', equals = theme_)[1]
theme_dir <- find_in_lkp(lkp_themes, 'dirname', 'theme_code', theme_code_)
#define exit directory of this theme
exdir_theme <- glue('{exdir}/{theme_dir}')
if(!dir.exists(exdir_theme)){
dir.create(exdir_theme)
}
#Define data of the theme ----------------------------------------------------
db_theme <- institutions %>% filter(theme == theme_)
#Count projects by theme
num_projects_theme <- prettyNum(unique_insts(db_theme$Institution), big.mark = ',')
#Count projects by Improvement -------------------------------------------------
projects_foa <- db_theme %>%
group_by(FOACode_new, FOA_new) %>%
summarise(projects = unique_insts(Institution),
.groups = 'drop') %>%
#Get the name of the improvement
left_join(filter(lkp_improvements, theme_code == theme_code_ ),
by = "FOACode_new") %>%
#Create this only to avoid problems in the future
mutate(region = "1")
#PLOTS by themes ------------------------------------------------------------
#Plot projects by FOA (using improvement)
plot_imp<- projects_foa %>%
plot_num_projects(theme_,
y_variable = Improvement,
unit_title = "Institutions",
#For some cases there are 1:m improvements to foas
#So data must be re-groupped and re summarise
regroup = T,
num_projects_theme)
#Plot using FOA name
plot_foa <- projects_foa %>%
plot_num_projects(theme_,
y_variable = FOA_new,
unit_title = "Institutions",
regroup = F,
num_projects_theme)
ggsave(glue('{exdir_theme}/insts_foas.png'),plot_foa)
cli::cli_alert_info("done")
ggsave(glue('{exdir_theme}/insts_improvements.png'),plot_imp)
#By regions ====================================================================
#by region
projects_foa_region <- db_theme %>%
group_by(FOACode_new, FOA_new,region) %>%
#Count projects by region and by foa
summarise(projects = n(),
.groups = 'drop') %>%
left_join(filter(lkp_improvements, theme_code == theme_code_ ))
#plot by Improvement--------------------------------------------------
plot_imp_reg <- projects_foa_region %>%
plot_num_projects(theme_,
y_variable = Improvement,
unit_title = "Institutions",
regroup = T,
num_projects_theme,
label_size = 3) +
facet_wrap(~ region)
#Plot by foa name ----------------------------------------------------------------
plot_foa_reg <- projects_foa_region %>%
plot_num_projects(theme_,
y_variable = FOA_new,
unit_title = "Institutions",
regroup = F,
num_projects_theme,
label_size = 3) +
facet_wrap(~ region)
ggsave(glue('{exdir_theme}/insts_improvements_reg.png'),plot_imp_reg)
ggsave(glue('{exdir_theme}/insts_foas_reg.png'),plot_foa_reg)
})
names(institutions)
themes <- unique(institutions$theme)
export_plots <- lapply(themes, function(theme_){
message(theme_)
#Fetch theme details from lookup
theme_code_ <- find_in_lkp(institutions, fetch = 'theme_code', when = 'theme', equals = theme_)[1]
theme_dir <- find_in_lkp(lkp_themes, 'dirname', 'theme_code', theme_code_)
#define exit directory of this theme
exdir_theme <- glue('{exdir}/{theme_dir}')
if(!dir.exists(exdir_theme)){
dir.create(exdir_theme)
}
#Define data of the theme ----------------------------------------------------
db_theme <- institutions %>% filter(theme == theme_)
#Count projects by theme
num_projects_theme <- prettyNum(unique_insts(db_theme$Institution), big.mark = ',')
#Count projects by Improvement -------------------------------------------------
projects_foa <- db_theme %>%
group_by(FOACode_new, FOA_new) %>%
summarise(projects = unique_insts(Institution),
.groups = 'drop') %>%
#Get the name of the improvement
left_join(filter(lkp_improvements, theme_code == theme_code_ ),
by = "FOACode_new") %>%
#Create this only to avoid problems in the future
mutate(region = "1")
#PLOTS by themes ------------------------------------------------------------
#Plot projects by FOA (using improvement)
plot_imp<- projects_foa %>%
plot_num_projects(theme_,
y_variable = Improvement,
unit_title = "Institutions",
#For some cases there are 1:m improvements to foas
#So data must be re-groupped and re summarise
regroup = T,
num_projects_theme)
#Plot using FOA name
plot_foa <- projects_foa %>%
plot_num_projects(theme_,
y_variable = FOA_new,
unit_title = "Institutions",
regroup = F,
num_projects_theme)
ggsave(glue('{exdir_theme}/insts_foas.png'),plot_foa)
cli::cli_alert_info("done")
ggsave(glue('{exdir_theme}/insts_improvements.png'),plot_imp)
#By regions ====================================================================
#by region
projects_foa_region <- db_theme %>%
group_by(FOACode_new, FOA_new,region) %>%
#Count projects by region and by foa
summarise(projects = n(),
.groups = 'drop') %>%
left_join(filter(lkp_improvements, theme_code == theme_code_ ))
#plot by Improvement--------------------------------------------------
plot_imp_reg <- projects_foa_region %>%
plot_num_projects(theme_,
y_variable = Improvement,
unit_title = "Institutions",
regroup = T,
num_projects_theme,
label_size = 3) +
facet_wrap(~ region)
#Plot by foa name ----------------------------------------------------------------
plot_foa_reg <- projects_foa_region %>%
plot_num_projects(theme_,
y_variable = FOA_new,
unit_title = "Institutions",
regroup = F,
num_projects_theme,
label_size = 3) +
facet_wrap(~ region)
ggsave(glue('{exdir_theme}/insts_improvements_reg.png'),plot_imp_reg)
ggsave(glue('{exdir_theme}/insts_foas_reg.png'),plot_foa_reg)
})
library(rio)
library(dplyr)
library(tidyr)
library(janitor)
gmdacr::load_functions('functions/')
#import raw data creted in 0.format/format_names_part_1.R
#the above script formats the data from SPSS to R so it is readable
raw_data <- import('data/7.NLO/1.raw/Part_1.rds')
#define section
sections <- c("relevance")
# "effectiveness",
#"sustainability",
#"regionalCoop",
#"future",
#"visibility")
#define themes ---------------------------------------------------------------
themes <- names(raw_data)[str_detect(names(raw_data), 'theme')]
#each team enabled a different section of the questionnaire.
#bring all themes in a tidy format
#the name of the variable (created in 0.format/format_names_part_1.R) contains all the information
append_themes <- lapply(themes, function(t){
#get the suffix, it allows to identify the theme of the variables
sufix = get_suffix(t, raw_data)
r <- raw_data %>%
#keep data for relevance section only,
#and pivot it longer
#function created in functions.
keep_section(t, 'relevance', sufix) %>%
#the column name contains all the info:
mutate(section = str_extract(name, '^.*?(?=-|_)'),
foa = str_remove(name, '^.*_[a-z]{1,}_'),
period = str_extract(name,'_.[0-9]{1,}_[0-9]{1,}$'),
foa = str_remove(foa, period),
foa = str_trim(foa),
period = str_remove(period,'_'),
period = str_replace(period, '_', '-')
) %>%
select(-name)
}) %>% do.call(rbind,.)
#clean relevance ---------------------------------------------------------------
periods <- sort(unique(append_themes$period))
categories <- c('Not applicable', 'Initial stage', 'Established stage', 'Master stage', 'Regional reference')
clean_relevance <- append_themes %>%
mutate(period = factor(period,
labels = periods,
ordered = T),
value = case_when(value == 0 ~ categories[1],
value == 1 ~ categories[2],
value == 2 ~ categories[3],
value == 3 ~ categories[4],
value == 4 ~ categories[5],
T ~ NA_character_
),
value = factor(value,
labels = categories,
ordered = T)
)
tabyl(clean_relevance, value)
View(clean_relevance)
