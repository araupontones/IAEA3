select(-name) %>%
mutate(survey = survey)
}
#Function to keep only themes in data
keep_areas <- function(.data, survey, min_answers = 15){
.data %>%
rowwise() %>%
mutate(answered = sum(!is.na(across(starts_with('q'))))) %>%
filter(answered > min_answers) %>%
#mutate_all(as.character)
rename(country = q0002) %>%
mutate(country = susor_get_stata_labels(country)) %>%
select(country, starts_with('q0004')) %>%
mutate(across(starts_with('q'), function(x)susor_get_stata_labels(x))) %>%
pivot_longer(-country,
values_to = 'theme') %>%
filter(!is.na(theme)) %>%
select(-name) %>%
mutate(survey = survey)
}
countries_by_theme <- function(){
sav_file <- "data/7.NLO/1.raw/IAEA TC PROGRAMME ACHIEVEMENTS IN THE 21ST CENTURY - PART I.sav"
sav_file2 <- "data/7.NLO/1.raw/IAEA TC PROGRAMME ACHIEVEMENTS IN THE 21ST CENTURY - PART II.sav"
raw_data <- read_sav(sav_file)
raw_data2 <- read_sav(sav_file2)
raw_cps <- import('data/6.data-collection/4.clean/cps.rds')
countries_in_region <- countries_region()
#append all surveys ===========================================================
nlo1 <- raw_data %>% keep_areas('nlo1')
nlo2 <- raw_data2 %>% keep_areas('nlo2')
cp <- raw_cps %>% select(country, theme) %>%
mutate(theme = susor_get_stata_labels(theme),
survey = 'cp')
all <- do.call(rbind, list(nlo1, nlo2, cp)) %>%
mutate(theme = str_to_sentence(theme),
id_theme = ids_themes(theme),
theme = names_themes_2(id_theme)) %>%
clean_countries()
return(all)
}
countries_by_theme <- function(min_answers= 15){
sav_file <- "data/7.NLO/1.raw/IAEA TC PROGRAMME ACHIEVEMENTS IN THE 21ST CENTURY - PART I.sav"
sav_file2 <- "data/7.NLO/1.raw/IAEA TC PROGRAMME ACHIEVEMENTS IN THE 21ST CENTURY - PART II.sav"
raw_data <- read_sav(sav_file)
raw_data2 <- read_sav(sav_file2)
raw_cps <- import('data/6.data-collection/4.clean/cps.rds')
countries_in_region <- countries_region()
#append all surveys ===========================================================
nlo1 <- raw_data %>% keep_areas('nlo1')
nlo2 <- raw_data2 %>% keep_areas('nlo2')
cp <- raw_cps %>% select(country, theme) %>%
mutate(theme = susor_get_stata_labels(theme),
survey = 'cp')
all <- do.call(rbind, list(nlo1, nlo2, cp)) %>%
mutate(theme = str_to_sentence(theme),
id_theme = ids_themes(theme),
theme = names_themes_2(id_theme)) %>%
clean_countries()
return(all)
}
all <- countries_by_theme(min_answers = 15)
#countries by theme is in functions/countries_by_theme_in_surveys
all <- countries_by_theme(min_answers = 15) #min answers allowed to keep
#countries by theme is in functions/countries_by_theme_in_surveys
all <- countries_by_theme(min_answers = 15) #min answers allowed to keep
#check participation by theme
by_theme <- all %>%
group_by(country, theme, id_theme, survey) %>%
summarise(total = n(), .groups = 'drop') %>%
pivot_wider(id_cols = c(country, theme, id_theme),
values_from = total,
names_from = survey) %>%
#in util responses
responses_surveys_themes()
exdir = 'report/sample'
theme_name = find_in_lkp(db_lkp = lkp_themes, fetch = 'theme', when = "theme_code", equals =1)
dirmane =find_in_lkp(db_lkp = lkp_themes, fetch = 'dirname', when = "theme_code", equals = 1)
exfile = glue('{exdir}/map_{dirmane}.png')
data_plot <- by_theme %>%
filter(id_theme == 1) %>%
full_join(world, by = 'country'
) %>%
sf::st_as_sf() %>%
mutate(#status = ifelse(is.na(status), 'N/A', status),
status = factor(status,
levels =c('all_surveys', 'only_cp',
'cp_nlo1', 'cp_nlo2',
'nlos_no_cp', 'only_nlo2'
),
ordered = T)
)
ggplot(data = data_plot,
aes(fill = status)) +
geom_sf() +
scale_fill_brewer(palette = 'Set3',direction=-1) +
theme_bw()+
theme_main()+
labs(title = glue("{theme_name}: Participation to the Data Collection Instruments.")) +
theme(legend.position = 'bottom',
plot.title = element_text(size = 12),
legend.title = element_blank(),
axis.text.x = element_blank())
ggsave(exfile, last_plot())
ggplot(data = data_plot,
aes(fill = status)) +
geom_sf() +
scale_fill_brewer(palette = 'Set3',direction=-1) +
theme_bw()+
theme_main()+
labs(title = glue("{theme_name}: Participation to Surveys.")) +
theme(legend.position = 'bottom',
plot.title = element_text(size = 12),
legend.title = element_blank(),
axis.text.x = element_blank())
ggsave(exfile, last_plot())
themes <- unique(by_theme$id_theme)
themes <- unique(by_theme$id_theme)
plots <- lapply(themes, function(t){
theme_name = find_in_lkp(db_lkp = lkp_themes, fetch = 'theme', when = "theme_code", equals =t)
dirmane =find_in_lkp(db_lkp = lkp_themes, fetch = 'dirname', when = "theme_code", equals = t)
exfile = glue('{exdir}/map_{dirmane}.png')
message(exfile)
data_plot <- by_theme %>%
filter(id_theme == t) %>%
full_join(world, by = 'country'
) %>%
sf::st_as_sf() %>%
mutate(#status = ifelse(is.na(status), 'N/A', status),
status = factor(status,
levels =c('all_surveys', 'only_cp',
'cp_nlo1', 'cp_nlo2',
'nlos_no_cp', 'only_nlo2'
),
ordered = T)
)
ggplot(data = data_plot,
aes(fill = status)) +
geom_sf() +
scale_fill_brewer(palette = 'Set3',direction=-1) +
theme_bw()+
theme_main()+
labs(title = glue("{theme_name}: Participation to Surveys.")) +
theme(legend.position = 'bottom',
plot.title = element_text(size = 12),
legend.title = element_blank(),
axis.text.x = element_blank())
theme_main
ggsave(exfile, last_plot())
})
library(rio)
foas <- import('data/9.lookups/foas.rds')
View(foas)
dictionary <- import('data/1.reference/~$Copy of FOA mapping - old to new.xlsx')
dictionary <- import('data/1.reference/Copy of FOA mapping - old to new.xlsx')
View(dictionary)
#Create LookUP tables of FOAs
#There are different ids across different tools
#We need to link Themes and FOAs to the ones used in the surveys
library(rio)
library(dplyr)
library(tidyr)
library(janitor)
library(stringr)
library(googlesheets4)
gmdacr::load_functions('functions')
#read raw data ================================================================
#All Projects
projects <- import('data/1.reference/Copy of CPs_2022_09_12.xlsx')
#get mapping given by IAEA
mapping <- import('data/1.reference/Copy of FOA mapping - old to new.xlsx')
#Get foas from questionnaire
url_gs <- 'https://docs.google.com/spreadsheets/d/15SY9gpr5ELo0dLRYZNjqzNzOKbF8JYtkI42eBIZDe68/edit#gid=597634711'
#Get foas from questionnaires and from projects================================
#from questionnaire
foas_questonnaire_raw <- read_sheet(url_gs, 'FOAs')
#read raw data ================================================================
#All Projects
projects <- import('data/1.reference/Copy of CPs_2022_09_12.xlsx')
#get mapping given by IAEA
mapping <- import('data/1.reference/Copy of FOA mapping - old to new.xlsx')
#Get foas from questionnaire
url_gs <- 'https://docs.google.com/spreadsheets/d/15SY9gpr5ELo0dLRYZNjqzNzOKbF8JYtkI42eBIZDe68/edit#gid=597634711'
#from questionnaire
foas_questonnaire_raw <- read_sheet(url_gs, 'FOAs')
#All Projects
projects <- import('data/1.reference/Copy of CPs_2022_09_12.xlsx')
names(projects)
unique(projects$FOACode)
length(unique(projects$FOACode))
#All Projects
projects <- import('data/1.reference/Copy of CPs_2022_09_12.xlsx') %>%
count(FOACode)
View(projects)
#All Projects
projects <- import('data/1.reference/Copy of CPs_2022_09_12.xlsx') %>%
filter(!is.na(FOACode)) %>%
count(FOACode)
nrow(projects)
#All Projects
projects <- import('data/1.reference/Copy of CPs_2022_09_12.xlsx') %>%
filter(!is.na(FOACode)) %>%
count(FOACode,Area )
names(dictionary)
dictionary %>%
count(old,`Thematic Area` )
dictionary %>%
count(`Thematic Area` )
library(ggplot2)
dictionary %>%
count(`Thematic Area` ) %>%
ggplot() +
geom_col()
dictionary %>%
count(`Thematic Area` ) %>%
ggplot() +
geom_col(aes(x = n))
dictionary <- import('data/1.reference/Copy of FOA mapping - old to new.xlsx') %>%
rename(Area = `Thematic Area`)
dictionary %>%
count(Area ) %>%
ggplot() +
geom_col(aes(x = n,
y = Area))
dictionary %>%
count(Area ) %>%
ggplot() +
geom_col(aes(x = n,
y = Area)) +
labs(y = "",
x= "OLD FOAs")
gmdacr::load_functions('functions/themes/')
dictionary %>%
count(Area ) %>%
ggplot() +
geom_col(aes(x = n,
y = Area)) +
labs(y = "",
x= "OLD FOAs") +
theme_main()
dictionary %>%
count(Area ) %>%
ggplot() +
geom_col(aes(x = n,
y = reorder(Area,n))) +
labs(y = "",
x= "OLD FOAs") +
theme_main()
dictionary %>%
count(Area ) %>%
ggplot() +
geom_col(aes(x = n,
y = reorder(Area,n),
label = n)) +
labs(y = "",
x= "OLD FOAs") +
theme_main()
dictionary %>%
count(Area ) %>%
ggplot(aes(label = n)) +
geom_col(aes(x = n,
y = reorder(Area,n))) +
labs(y = "",
x= "OLD FOAs") +
theme_main()
dictionary %>%
count(Area ) %>%
ggplot(aes(label = n)) +
geom_col(aes(x = n,
y = reorder(Area,n))) +
geom_text(hjust = 1)
dictionary %>%
count(Area ) %>%
ggplot(aes(label = n)) +
geom_col(aes(x = n,
y = reorder(Area,n))) +
geom_abline()
dictionary %>%
count(Area ) %>%
ggplot(aes(label = n)) +
geom_col(aes(x = n,
y = reorder(Area,n))) +
geom_text()
dictionary %>%
count(Area ) %>%
ggplot(aes(x = n,
y = reorder(Area,n),
label= n)) +
geom_col() +
geom_text()
dictionary %>%
count(Area ) %>%
ggplot(aes(x = n,
y = reorder(Area,n),
label= n)) +
geom_col() +
geom_text(hjust= 1)
dictionary %>%
count(Area ) %>%
ggplot(aes(x = n,
y = reorder(Area,n),
label= n)) +
geom_col() +
geom_text(hjust= 1,
color = 'white')
dictionary %>%
count(Area ) %>%
ggplot(aes(x = n,
y = reorder(Area,n),
label= n)) +
geom_col() +
geom_text(hjust= 1,
color = 'white',
family = "Old Sans")
dictionary %>%
count(Area ) %>%
ggplot(aes(x = n,
y = reorder(Area,n),
label= n)) +
geom_col() +
geom_text(hjust= 1,
color = 'white',
family = "Open Sans")
dictionary %>%
count(Area ) %>%
ggplot(aes(x = n,
y = reorder(Area,n),
label= n)) +
geom_col() +
geom_text(hjust= 1,
color = 'white',
family = "Open Sans") +
labs(y = "",
x= "OLD FOAs") +
theme_main()
dictionary %>%
count(Area ) %>%
ggplot(aes(x = n,
y = reorder(Area,n),
label= n)) +
geom_col(fill = blue_sky) +
geom_text(hjust= 1,
color = 'white',
family = "Open Sans") +
labs(y = "",
x= "OLD FOAs") +
theme_main()
dictionary %>%
count(Area ) %>%
ggplot(aes(x = n,
y = reorder(Area,n),
label= n)) +
geom_col(fill = blue_sky) +
geom_text(hjust= 1,
color = 'white',
family = "Open Sans") +
labs(y = "",
x= "OLD FOAs") +
theme_main() +
theme(axis.text.x = element_text(color = "black"))
dictionary %>%
count(Area ) %>%
ggplot(aes(x = n,
y = reorder(Area,n),
label= n)) +
geom_col(fill = blue_sky) +
geom_text(hjust= 1,
color = 'white',
family = "Open Sans") +
labs(y = "",
x= "OLD FOAs") +
theme_main() +
theme(axis.title.x = element_text(color = "black"))
dictionary %>%
count(Area ) %>%
ggplot(aes(x = n,
y = reorder(Area,n),
label= n)) +
geom_col(fill = blue_sky) +
geom_text(hjust= 1,
color = 'white',
family = "Open Sans") +
labs(y = "",
x= "# OLD FOAs") +
theme_main() +
theme(axis.title.x = element_text(color = "black"))
dictionary %>%
count(Area ) %>%
ggplot(aes(x = n,
y = reorder(Area,n),
label= n)) +
geom_col(fill = blue_sky) +
geom_text(hjust= 1,
color = 'white',
family = "Open Sans") +
labs(y = "",
x= "# of OLD FOAs") +
theme_main() +
theme(axis.title.x = element_text(color = "black"))
dictionary %>%
count(Area ) %>%
ggplot(aes(x = n,
y = reorder(Area,n),
label= n)) +
geom_col(fill = blue_sky) +
geom_text(hjust= 1,
color = 'white',
family = "Open Sans") +
labs(y = "",
x= "# of OLD FOAs") +
theme_main() +
theme(axis.title.x = element_text(color = "black"),
axis.text = element_text(size = 12))
# How Many new FOas? ======================================================
names(dictionary)
create_plot <- function(.data, title){
.data %>%
ggplot(aes(x = n,
y = reorder(Area,n),
label= n)) +
geom_col(fill = blue_sky) +
geom_text(hjust= 1,
color = 'white',
family = "Open Sans") +
labs(y = "",
x= title) +
theme_main() +
theme(axis.title.x = element_text(color = "black"),
axis.text = element_text(size = 12))
}
dictionary %>%
count(Area ) %>%
create_plot("# of OLD FOAs")
# How Many new FOas? ======================================================
names(dictionary)
dictionary %>%
count(new, Area)
dictionary %>%
count(new, Area) %>%
count(Area)
dictionary %>%
count(new, Area) %>%
count(Area) %>%
sum(.$n)
dictionary %>%
count(new, Area) %>%
count(Area) %>%
sum(n)
t <- dictionary %>%
count(new, Area) %>%
count(Area)
sum(t$n)
unique(dictionary$new)
length(unique(dictionary$new))
dictionary %>%
count(new, Area) %>%
count(Area) %>%
create_plot()
dictionary %>%
count(new, Area) %>%
count(Area) %>%
create_plot(title = "# of New Foas")
dictionary %>%
count(new, Area) %>%
count(Area) %>%
create_plot(title = "# of NEW FOAS")
dictionary %>%
count(new, Area) %>%
count(Area) %>%
create_plot(title = "# of NEW FOAS") +
theme(axis.title.x = element_blank())
dictionary %>%
count(new, Area) %>%
count(Area) %>%
create_plot(title = "# of NEW FOAS") +
theme(axis.text.x = element_blank())
dictionary %>%
count(foa_nlo1, Area) %>%
count(Area) %>%
create_plot(title = "# of FOAS in NLO1") +
theme(axis.text.x = element_blank())
dictionary %>%
count(foa_nlo1, Area) %>%
count(Area)
t <- dictionary %>%
count(foa_nlo1, Area) %>%
count(Area)
sum(t$b)
sum(t$n)
t <- dictionary %>%
count(foa_nlo2, Area) %>%
count(Area)
# How Many new FOas? ======================================================
names(dictionary)
t <- dictionary %>%
count(`foa_nlo2 (improvements)`, Area) %>%
count(Area)
create_plot(title = "# of FOAS in NLO2") +
theme(axis.text.x = element_blank())
t <- dictionary %>%
count(`foa_nlo2 (improvements)`, Area) %>%
count(Area) %>%
create_plot(title = "# of FOAS in NLO2") +
theme(axis.text.x = element_blank())
t <- dictionary %>%
count(`foa_nlo2 (improvements)`, Area) %>%
count(Area)
sum(t$n)
t <- dictionary %>%
count(`foa_nlo2 (improvements)`, Area) %>%
count(Area) %>%
create_plot(title = "# of FOAS in NLO2") +
theme(axis.text.x = element_blank())
