#updating the name of the foa
select(theme,
foa,
foa_nlo1_effectiveness,
improvement) %>%
filter(!is.na(foa)) %>%
group_by(theme,foa) %>%
slice(1) %>%
ungroup()
#names(mapping_foas)
#Mapping of foas
mapping_foas <- import('data/1.reference/mapping_foas.xlsx')
#names(mapping_foas)
#Mapping of foas
mapping_foas <- import('data/1.reference/mapping_foas.xlsx') %>%
#updating the name of the foa
select(theme,
foa,
foa_nlo1_effectiveness,
improvement)
#names(mapping_foas)
#Mapping of foas
mapping_foas <- import('data/1.reference/mapping_foas.xlsx') %>%
#updating the name of the foa
select(theme,
foa,
foa_nlo1_effectiveness,
improvement) %>%
filter(!is.na(foa)) %>%
group_by(theme,foa) %>%
slice(1) %>%
ungroup()
#names(mapping_foas)
#Mapping of foas
mapping_foas <- import('data/1.reference/mapping_foas.xlsx') %>%
#updating the name of the foa
select(theme,
foa,
foa_nlo1_effectiveness,
improvement)
#names(mapping_foas)
#Mapping of foas
mapping_foas <- import('data/1.reference/mapping_foas.xlsx') %>%
#updating the name of the foa
select(theme,
foa,
foa_nlo1_effectiveness,
improvement) %>%
filter(!is.na(foa))
#names(mapping_foas)
#Mapping of foas
mapping_foas <- import('data/1.reference/mapping_foas.xlsx') %>%
#updating the name of the foa
select(theme,
foa,
foa_nlo1_effectiveness,
improvement) %>%
filter(!is.na(foa)) %>%
group_by(theme,foa) %>%
slice(1) %>%
ungroup()
#names(mapping_foas)
#Mapping of foas
mapping_foas <- import('data/1.reference/mapping_foas.xlsx') %>%
#updating the name of the foa
select(theme,
foa,
foa_nlo1_effectiveness,
improvement) %>%
filter(!is.na(foa)) %>%
group_by(theme,foa) %>%
slice(1) %>%
ungroup()
#names(mapping_foas)
#Mapping of foas
mapping_foas <- import('data/1.reference/mapping_foas.xlsx')
#names(mapping_foas)
#Mapping of foas
mapping_foas <- import('data/1.reference/mapping_foas.xlsx')
#names(mapping_foas)
#Mapping of foas
mapping_foas <- import('data/1.reference/mapping_foas.xlsx') %>%
#updating the name of the foa
select(theme,
foa,
foa_nlo1_effectiveness,
improvement) %>%
filter(!is.na(foa)) %>%
group_by(theme,foa) %>%
slice(1) %>%
ungroup()
lkp_outcomes <- import('data/9.lookups/int_outcomes.xlsx')
#define section
sections <- c(#"relevance")
"effectiveness")
#define themes ---------------------------------------------------------------
themes <- names(raw_data)[str_detect(names(raw_data), 'theme')]
append_themes <- lapply(themes, function(t){
#get the suffix, it allows to identify the theme of the variables
sufix = get_suffix(t, raw_data)
r <- raw_data %>%
#keep data for relevance section only,
#and pivot it longer
#function created in functions.
keep_section(t, sections[1], sufix) %>%
#   #the column name contains all the info:
mutate(section = str_extract(name, '^.*?(?=-|_)'),
foa = str_remove(name, '^.*_[a-z]{1,}_'),
int_outcome_nlo = str_extract(foa, "_.{1,}$"),
foa = str_remove(foa, int_outcome_nlo),
int_outcome_nlo = str_remove(int_outcome_nlo, "_"),
int_outcome_nlo = str_trim(int_outcome_nlo),
int_outcome_nlo = ifelse(str_detect(int_outcome_nlo, "Upgrade institutions"), "Upgraded institutions / Laboratories/ Educational centers", int_outcome_nlo)
) %>%
rename(period = value,
foa_nlo1_effectiveness = foa) %>%
select(-name)
}) %>% do.call(rbind,.)
#clean relevance ---------------------------------------------------------------
periods <- sort(unique(append_themes$period))
tabyl(clean_effectiveness, theme)
#14,725
clean_effectiveness <- append_themes %>%
mutate(period = factor(period,
labels = periods,
ordered = T)) %>%
mutate(foa_nlo1_effectiveness = str_trim(foa_nlo1_effectiveness),
foa_nlo1_effectiveness = str_replace_all(foa_nlo1_effectiveness, "  ", " "),
theme = from_nlo_to_foas(theme)) %>%
#get the improvements
left_join(mapping_foas,
by = c("foa_nlo1_effectiveness", "theme")
) %>%
#get the outcomes
left_join(lkp_outcomes) %>%
select(-int_outcome_nlo) %>%
#identifit those countries that have achieved it
mutate(achieved = ifelse(is.na(period)|period == "N/A", 0,1),
period = fct_recode(period, "< 2000" = "> 2000"))
tabyl(clean_effectiveness, theme)
my_theme = filter(clean_effectiveness, theme == "Safety and Security")
tabyl(my_theme, foa)
tabyl(my_theme, foa_nlo1_effectiveness)
#export ------------------------------------------------------------------------
export(clean_effectiveness, glue('data/7.NLO/2.raw_formatted/Part_1_{sections[1]}.rds'))
library(rio)
library(ggplot2)
library(RColorBrewer)
library(extrafont)
library(janitor)
#this data is cleaned in R/8.nlo/PartI/0.format
effectiveness <- import('data/7.NLO/2.raw_formatted/Part_1_effectiveness.rds')
#missing <- scales::percent(sum(is.na(effectiveness$period)) / nrow(effectiveness))
names(effectiveness)
tabyl(effectiveness, foa, theme)
nrow(effectiveness)
tabyl(effectiveness, foa)
glue('{missing} of the questions were missing')
names(effectiveness)
#data for power BI =============================================================
powerbi_eff <- effectiveness %>%
#drop missing foas (we need to associate the missing ones in the mapping_foas)
filter(!is.na(foa)) %>%
group_by(country,region, theme,improvement, foa,int_outcome, foa_nlo1_effectiveness) %>%
summarise(when_int_outcome = min(period, na.rm = T),
achieved_int_outcome = max(achieved),
.groups = 'drop'
)
names(powerbi_eff)
warnings()
tabyl(powerbi_sus, foa)
nrow(powerbi_eff)
sections
#View(powerbi)
export(powerbi_eff, glue('data/11.powerbi/{sections}.csv'))
tabyl(clean_effectiveness, theme)
my_theme = filter(clean_effectiveness, theme == "Water and the Environment")
tabyl(my_theme, foa)
tabyl(my_theme, foa_nlo1_effectiveness)
names(raw_data)
raw_data <- import('data/7.NLO/1.raw/Part_1.rds')
#names(mapping_foas)
#Mapping of foas
mapping_foas <- import('data/1.reference/mapping_foas.xlsx') %>%
#updating the name of the foa
select(theme,
foa,
foa_nlo1_effectiveness,
improvement) %>%
filter(!is.na(foa)) %>%
group_by(theme,foa) %>%
slice(1) %>%
ungroup()
lkp_outcomes <- import('data/9.lookups/int_outcomes.xlsx')
#define section
sections <- c(#"relevance")
"effectiveness")
#define themes ---------------------------------------------------------------
themes <- names(raw_data)[str_detect(names(raw_data), 'theme')]
append_themes <- lapply(themes, function(t){
#get the suffix, it allows to identify the theme of the variables
sufix = get_suffix(t, raw_data)
r <- raw_data %>%
#keep data for relevance section only,
#and pivot it longer
#function created in functions.
keep_section(t, sections[1], sufix) %>%
#   #the column name contains all the info:
mutate(section = str_extract(name, '^.*?(?=-|_)'),
foa = str_remove(name, '^.*_[a-z]{1,}_'),
int_outcome_nlo = str_extract(foa, "_.{1,}$"),
foa = str_remove(foa, int_outcome_nlo),
int_outcome_nlo = str_remove(int_outcome_nlo, "_"),
int_outcome_nlo = str_trim(int_outcome_nlo),
int_outcome_nlo = ifelse(str_detect(int_outcome_nlo, "Upgrade institutions"), "Upgraded institutions / Laboratories/ Educational centers", int_outcome_nlo)
) %>%
rename(period = value,
foa_nlo1_effectiveness = foa) %>%
select(-name)
}) %>% do.call(rbind,.)
#clean relevance ---------------------------------------------------------------
periods <- sort(unique(append_themes$period))
tabyl(clean_effectiveness, theme)
#14,725
clean_effectiveness <- append_themes %>%
mutate(period = factor(period,
labels = periods,
ordered = T)) %>%
mutate(foa_nlo1_effectiveness = str_trim(foa_nlo1_effectiveness),
foa_nlo1_effectiveness = str_replace_all(foa_nlo1_effectiveness, "  ", " "),
theme = from_nlo_to_foas(theme)) %>%
#get the improvements
left_join(mapping_foas,
by = c("foa_nlo1_effectiveness", "theme")
) %>%
#get the outcomes
left_join(lkp_outcomes) %>%
select(-int_outcome_nlo) %>%
#identifit those countries that have achieved it
mutate(achieved = ifelse(is.na(period)|period == "N/A", 0,1),
period = fct_recode(period, "< 2000" = "> 2000"))
tabyl(clean_effectiveness, theme)
my_theme = filter(clean_effectiveness, theme == "Water and the Environment")
tabyl(my_theme, foa)
tabyl(my_theme, foa_nlo1_effectiveness)
#foa_nlo1_effectiveness
sections
#export ------------------------------------------------------------------------
export(clean_effectiveness, glue('data/7.NLO/2.raw_formatted/Part_1_{sections[1]}.rds'))
library(rio)
library(ggplot2)
library(RColorBrewer)
library(extrafont)
library(janitor)
#this data is cleaned in R/8.nlo/PartI/0.format
effectiveness <- import('data/7.NLO/2.raw_formatted/Part_1_effectiveness.rds')
#missing <- scales::percent(sum(is.na(effectiveness$period)) / nrow(effectiveness))
names(effectiveness)
tabyl(effectiveness, foa, theme)
nrow(effectiveness)
tabyl(effectiveness, foa)
glue('{missing} of the questions were missing')
names(effectiveness)
#data for power BI =============================================================
powerbi_eff <- effectiveness %>%
#drop missing foas (we need to associate the missing ones in the mapping_foas)
filter(!is.na(foa)) %>%
group_by(country,region, theme,improvement, foa,int_outcome, foa_nlo1_effectiveness) %>%
summarise(when_int_outcome = min(period, na.rm = T),
achieved_int_outcome = max(achieved),
.groups = 'drop'
)
names(powerbi_eff)
warnings()
tabyl(powerbi_sus, foa)
nrow(powerbi_eff)
sections
#View(powerbi)
export(powerbi_eff, glue('data/11.powerbi/{sections}.csv'))
library(rio)
library(ggplot2)
library(RColorBrewer)
library(extrafont)
library(dplyr)
library(janitor)
sustainability <- import('data/7.NLO/2.raw_formatted/Part_1_sustainability.rds')
#missing <- scales::percent(sum(is.na(effectiveness$period)) / nrow(effectiveness))
#glue('{missing} of the questions were missing')
names(sustainability)
#data for power BI =============================================================
powerbi_sus <- sustainability %>%
#drop missing foas (we need to associate the missing ones in the mapping_foas)
filter(!is.na(foa)) %>%
group_by(country,region, theme,improvement, foa,outcome, int_outcome) %>%
summarise(when_outcome = min(period, na.rm = T),
achieved_outcome = max(achieved),
.groups = 'drop'
) %>%
select(country,theme, foa, outcome,int_outcome, when_outcome, achieved_outcome) %>%
#join with efficiency to get outcomes and int_outcomes in one page
full_join(powerbi_eff)
library(rio)
library(ggplot2)
library(RColorBrewer)
library(extrafont)
library(janitor)
#this data is cleaned in R/8.nlo/PartI/0.format
effectiveness <- import('data/7.NLO/2.raw_formatted/Part_1_effectiveness.rds')
#missing <- scales::percent(sum(is.na(effectiveness$period)) / nrow(effectiveness))
names(effectiveness)
tabyl(effectiveness, foa, theme)
nrow(effectiveness)
tabyl(effectiveness, foa)
glue('{missing} of the questions were missing')
names(effectiveness)
#data for power BI =============================================================
powerbi_eff <- effectiveness %>%
#drop missing foas (we need to associate the missing ones in the mapping_foas)
filter(!is.na(foa)) %>%
group_by(country,region, theme,improvement, foa,int_outcome, foa_nlo1_effectiveness) %>%
summarise(when_int_outcome = min(period, na.rm = T),
achieved_int_outcome = max(achieved),
.groups = 'drop'
)
library(rio)
library(ggplot2)
library(RColorBrewer)
library(extrafont)
library(dplyr)
library(janitor)
sustainability <- import('data/7.NLO/2.raw_formatted/Part_1_sustainability.rds')
#missing <- scales::percent(sum(is.na(effectiveness$period)) / nrow(effectiveness))
#glue('{missing} of the questions were missing')
names(sustainability)
#data for power BI =============================================================
powerbi_sus <- sustainability %>%
#drop missing foas (we need to associate the missing ones in the mapping_foas)
filter(!is.na(foa)) %>%
group_by(country,region, theme,improvement, foa,outcome, int_outcome) %>%
summarise(when_outcome = min(period, na.rm = T),
achieved_outcome = max(achieved),
.groups = 'drop'
) %>%
select(country,theme, foa, outcome,int_outcome, when_outcome, achieved_outcome) %>%
#join with efficiency to get outcomes and int_outcomes in one page
full_join(powerbi_eff)
names(powerbi_sus)
tabyl(powerbi_sus, achieved_int_outcome)
tabyl(powerbi_eff,achieved_int_outcome )
names(powerbi_eff)
eff <- select(country, foa, theme, int_outcome,achieved_int_outcome, when_int_outcome )
eff <- select(powerbi_eff,country, foa, theme, int_outcome,achieved_int_outcome, when_int_outcome )
powerbi_sus <- sustainability %>%
#drop missing foas (we need to associate the missing ones in the mapping_foas)
filter(!is.na(foa)) %>%
group_by(country,region, theme,improvement, foa,outcome, int_outcome) %>%
summarise(when_outcome = min(period, na.rm = T),
achieved_outcome = max(achieved),
.groups = 'drop'
) %>%
select(country,theme, foa, outcome,int_outcome, when_outcome, achieved_outcome) %>%
#join with efficiency to get outcomes and int_outcomes in one page
full_join(eff)
powerbi_sus <- sustainability %>%
#drop missing foas (we need to associate the missing ones in the mapping_foas)
filter(!is.na(foa)) %>%
group_by(country,region, theme,improvement, foa,outcome, int_outcome)
tabyl(powerbi_sus, outcome)
names(powerbi_eff)
tabyl(powerbi_sus, outcome)
tabyl(powerbi_sus, int_outcome)
powerbi_sus <- sustainability %>%
#drop missing foas (we need to associate the missing ones in the mapping_foas)
filter(!is.na(foa)) %>%
group_by(country,region, theme,improvement, foa,outcome, int_outcome)
powerbi_sus <- sustainability %>%
#drop missing foas (we need to associate the missing ones in the mapping_foas)
filter(!is.na(foa)) %>%
group_by(country,region, theme,improvement, foa,outcome, int_outcome) %>%
summarise(when_outcome = min(period, na.rm = T),
achieved_outcome = max(achieved),
.groups = 'drop'
) %>%
select(country,theme, foa, outcome,int_outcome, when_outcome, achieved_outcome) %>%
#join with efficiency to get outcomes and int_outcomes in one page
full_join(eff)
tabyl(powerbi_sus, int_outcome)
tabyl(powerbi_sus, outcome)
powerbi_sus <- sustainability %>%
#drop missing foas (we need to associate the missing ones in the mapping_foas)
filter(!is.na(foa)) %>%
group_by(country,region, theme,improvement, foa,outcome, int_outcome) %>%
summarise(when_outcome = min(period, na.rm = T),
achieved_outcome = max(achieved),
.groups = 'drop'
) %>%
select(country,theme, foa, outcome,int_outcome, when_outcome, achieved_outcome) %>%
#join with efficiency to get outcomes and int_outcomes in one page
left_join(eff)
tabyl(powerbi_sus, outcome)
tabyl(powerbi_sus, int_outcome)
tabyl(powerbi_sus, achieved_int_outcome)
tabyl(powerbi_eff, theme)
tabyl(powerbi_sus, theme)
#From NLO to lokup foas
from_nlo_to_foas <- function(id){
case_when(id == "FOOD and AGRICULTURE" ~ "Food and Agriculture",
id == "HEALTH and NUTRITION" ~ "Health and Nutrition",
id == "ENERGY PLANNING and NUCLEAR POWER" ~ "Energy",
id == "INDUSTRIAL APPLICATIONS and RADIATION TECHNOLOGY" ~ "Industrial Applications/Radiation technology",
id == "WATER and ENVIRONMENT" ~ "Water and the Environment",
id == "NUCLEAR SAFETY AND SECURITY" ~ "Safety and Security",
T ~ "A"
)
}
powerbi_sus <- sustainability %>%
#drop missing foas (we need to associate the missing ones in the mapping_foas)
filter(!is.na(foa)) %>%
mutate(theme = from_nlo_to_foas(theme)) %>%
group_by(country,region, theme,improvement, foa,outcome, int_outcome) %>%
summarise(when_outcome = min(period, na.rm = T),
achieved_outcome = max(achieved),
.groups = 'drop'
) %>%
select(country,theme, foa, outcome,int_outcome, when_outcome, achieved_outcome) %>%
#join with efficiency to get outcomes and int_outcomes in one page
left_join(eff)
tabyl(powerbi_sus, theme)
tabyl(powerbi_sus, achieved_int_outcome)
powerbi_sus <- sustainability %>%
#drop missing foas (we need to associate the missing ones in the mapping_foas)
filter(!is.na(foa)) %>%
mutate(theme = from_nlo_to_foas(theme)) %>%
group_by(country,region, theme,improvement, foa,outcome, int_outcome) %>%
summarise(when_outcome = min(period, na.rm = T),
achieved_outcome = max(achieved),
.groups = 'drop'
) %>%
select(country,theme, foa, outcome,int_outcome, when_outcome, achieved_outcome) %>%
#join with efficiency to get outcomes and int_outcomes in one page
left_join(powerbi_eff) %>%
#by = c("country", "theme", "foa", "int_outcome", "when_outcome"= "when_int_outcome"))
relocate(when_int_outcome,.after = when_outcome)
tabyl(powerbi_sus, achieved_int_outcome)
tabyl(powerbi_sus, achieved_outcome)
export(powerbi_sus, glue('data/11.powerbi/sustainability.csv'))
library(glue)
powerbi_sus <- sustainability %>%
#drop missing foas (we need to associate the missing ones in the mapping_foas)
filter(!is.na(foa)) %>%
mutate(theme = from_nlo_to_foas(theme)) %>%
group_by(country,region, theme,improvement, foa,outcome, int_outcome) %>%
summarise(when_outcome = min(period, na.rm = T),
achieved_outcome = max(achieved),
.groups = 'drop'
) %>%
select(country,theme, foa, outcome,int_outcome, when_outcome, achieved_outcome) %>%
#join with efficiency to get outcomes and int_outcomes in one page
left_join(powerbi_eff) %>%
#by = c("country", "theme", "foa", "int_outcome", "when_outcome"= "when_int_outcome"))
relocate(when_int_outcome,.after = when_outcome)
names(powerbi_sus)
export(powerbi_sus, glue('data/11.powerbi/sustainability.csv'))
#convert to long to allow conneection betwen outcomes and intermediate outcomes
powerbi_long <- powerbi_sus %>%
mutate(id_outcome = int_outcome) %>%
pivot_longer(c(outcome, int_outcome),
names_to = "level",
values_to = "indicator") %>%
mutate(when = ifelse(level== "outcome", as.character(when_outcome), as.character(when_int_outcome))) %>%
mutate(achieved = ifelse(level== "outcome", as.character(achieved_outcome), as.character(achieved_int_outcome))) %>%
relocate(c(when,achieved, level, indicator), .after = when_int_outcome) %>%
select(-when_int_outcome, -when_outcome, - achieved_outcome, - achieved_int_outcome)
library(tidyr)
#convert to long to allow conneection betwen outcomes and intermediate outcomes
powerbi_long <- powerbi_sus %>%
mutate(id_outcome = int_outcome) %>%
pivot_longer(c(outcome, int_outcome),
names_to = "level",
values_to = "indicator") %>%
mutate(when = ifelse(level== "outcome", as.character(when_outcome), as.character(when_int_outcome))) %>%
mutate(achieved = ifelse(level== "outcome", as.character(achieved_outcome), as.character(achieved_int_outcome))) %>%
relocate(c(when,achieved, level, indicator), .after = when_int_outcome) %>%
select(-when_int_outcome, -when_outcome, - achieved_outcome, - achieved_int_outcome)
export(powerbi_long, glue('data/11.powerbi/sustainability_long.csv'))
export(select(powerbi_sus,-id), glue('data/11.powerbi/sustainability.csv'))
powerbi_sus <- sustainability %>%
#drop missing foas (we need to associate the missing ones in the mapping_foas)
filter(!is.na(foa)) %>%
mutate(theme = from_nlo_to_foas(theme)) %>%
group_by(country,region, theme,improvement, foa,outcome, int_outcome) %>%
summarise(when_outcome = min(period, na.rm = T),
achieved_outcome = max(achieved),
.groups = 'drop'
) %>%
select(country,theme, foa, outcome,int_outcome, when_outcome, achieved_outcome) %>%
#join with efficiency to get outcomes and int_outcomes in one page
left_join(powerbi_eff) %>%
relocate(when_int_outcome,.after = when_outcome) %>%
mutate(id = as.character(paste0("A",row_number())), .before = country)
export(select(powerbi_sus,-id), glue('data/11.powerbi/sustainability.csv'))
#convert to long to allow conneection betwen outcomes and intermediate outcomes
powerbi_long <- powerbi_sus %>%
mutate(id_outcome = int_outcome) %>%
pivot_longer(c(outcome, int_outcome),
names_to = "level",
values_to = "indicator") %>%
mutate(when = ifelse(level== "outcome", as.character(when_outcome), as.character(when_int_outcome))) %>%
mutate(achieved = ifelse(level== "outcome", as.character(achieved_outcome), as.character(achieved_int_outcome))) %>%
relocate(c(when,achieved, level, indicator), .after = when_int_outcome) %>%
select(-when_int_outcome, -when_outcome, - achieved_outcome, - achieved_int_outcome)
export(powerbi_long, glue('data/11.powerbi/sustainability_long.csv'))
