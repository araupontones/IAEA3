limit = 100,
ofset = 1
)
#Download all versions of the questionnaire ----------------------------------
#get versions ---------------------------------------------------------------
versions <- susor_questionnaires$Version[susor_questionnaires$Variable == questionnaire]
downloads <- lapply(versions, function(x){
susor::susor_export_file(susor_qn_variable = questionnaire,
susor_qn_version = x,
susor_format = "STATA"
)
})
#append all versions ---------------------------------------------------------
susor::susor_append_versions(susor_qn_variable = questionnaire,
susor_format = "STATA")
#read raw data -----------------------------------------------------
raw_data <- rio::import(file.path(susor_dir_raw, questionnaire, 'cp.dta'))
#count missing values
raw_data$na_count <- apply(raw_data, 1, function(x) sum(is.na(x)))
raw_no_dupes<- raw_data %>%
#Keep only one observation by counterpart
group_by(counterpart) %>%
filter(na_count == min(na_count)) %>%
filter(n_questions_unanswered == min(n_questions_unanswered)) %>%
filter(row_number() == 1) %>%
ungroup() %>%
relocate(counterpart, na_count, n_questions_unanswered, interview__status)
#count number of  duplicates
dupes <- get_dupes(raw_no_dupes, counterpart)
#join with sample
raw_with_sample <- raw_no_dupes %>%
right_join(sample, by = c('counterpart' = 'cp_id')) %>%
mutate(across(c(interview__status, country), function(x)susor_get_stata_labels(x))) %>%
left_join(bounces) %>%
mutate(interview__status = case_when(!is.na(bounce) ~ "Bounced",
is.na(interview__status) ~ "Not Started",
#cases when user did not "completed the interview"
interview__status == "InterviewerAssigned" &
na_count <= 70 &
n_questions_unanswered <=3 ~ "Submitted",
interview__status == "InterviewerAssigned" ~ "Responding",
interview__status == "Completed" ~ "Submitted"
))
tabyl(raw_with_sample, interview__status)
#export raw data
export(raw_with_sample, file.path(susor_dir_raw, questionnaire, 'cp.rds'))
library(dplyr)
library(tidyr)
library(rio)
library(janitor)
library(susor)
library(openxlsx)
library(scales)
library(glue)
gmdacr::load_functions('functions')
#define paths =================================================================
raw_dir <- 'data/6.data-collection/1.raw/cp'
raw_data <- import(file.path(raw_dir, 'cp.rds'))
tabyl(raw_data, interview__status)
data_assignments <- raw_data %>%
filter(!interview__status %in% c("Bounced", "Submitted"))
tabyl(raw_data, interview__status)
tabyl(data_assignments, interview__status)
nrow(data_assignments)
data_not_submitted<- raw_data %>%
filter(!interview__status %in% c("Bounced", "Submitted"))
data_assignments <- data_not_submitted %>%
filter(interview__status == 'Not Started')
data_responding <- data_not_submitted %>%
filter(interview__status == "Responding")
names(data_not_submitted)
data_not_submitted<- raw_data %>%
filter(!interview__status %in% c("Bounced", "Submitted")) %>%
select(interview__status,
country = country_id,
counterpart = cp_id
)
data_not_submitted<- raw_data %>%
filter(!interview__status %in% c("Bounced", "Submitted")) %>%
select(interview__status,
country,
counterpart
)
data_not_submitted<- raw_data %>%
filter(!interview__status %in% c("Bounced", "Submitted")) %>%
select(interview__status,
country,
counterpart
) %>%
mutate(`_quantity` = -1,
`_responsible` = "andres_int",
`_webmode` = 1,
cp_hidden = counterpart
)
names(data_not_submitted)
data_assignments <- data_not_submitted %>%
filter(interview__status == 'Not Started') %>%
select(-interview__status)
data_assignments <- raw_data %>%
filter(!interview__status %in% c("Not Started")) %>%
select(interview__status,
country,
counterpart
) %>%
mutate(`_quantity` = -1,
`_responsible` = "andres_int",
`_webmode` = 1,
cp_hidden = counterpart
)
data_responding <- raw_data %>%
filter(interview__status == "Responding") %>%
#filter(tester) %>%
select(country = country_id,
counterpart = cp_id) %>%
mutate(`_quantity` = -1,
`_responsible` = "andres_int",
`_webmode` = 1,
cp_hidden = counterpart
)
data_responding <- raw_data %>%
filter(interview__status == "Responding")
data_responding <- raw_data %>%
filter(interview__status == "Responding") %>%
select(interview__status,
country,
counterpart)
data_responding <- raw_data %>%
filter(interview__status == "Responding") %>%
select(interview__status,
country,
counterpart,
cp_hidden)
data_assignments <- raw_data %>%
filter(!interview__status %in% c("Not Started")) %>%
select(interview__status,
country,
counterpart
) %>%
mutate(`_quantity` = -1,
`_responsible` = "andres_int",
`_webmode` = 1,
cp_hidden = counterpart
)
data_assignments <- raw_data %>%
filter(interview__status %in% c("Not Started")) %>%
select(interview__status,
country,
counterpart
) %>%
mutate(`_quantity` = -1,
`_responsible` = "andres_int",
`_webmode` = 1,
cp_hidden = counterpart
)
data_responding <- raw_data %>%
filter(interview__status == "Responding") %>%
select(interview__status,
country,
counterpart,
cp_hidden)
export(data_assignments,'questionnaires/assignments/cps_follow_up_26_octubre.txt' )
View(raw_data)
data_not_submitted<- raw_data %>%
filter(!interview__status %in% c("Bounced", "Submitted")) %>%
select(interview__status,
country,
counterpart
) %>%
mutate(`_quantity` = 1,
`_responsible` = "andres_int",
`_webmode` = 1,
cp_hidden = counterpart
)
data_assignments <- raw_data %>%
filter(interview__status %in% c("Not Started")) %>%
select(interview__status,
country,
counterpart
) %>%
mutate(`_quantity` = 1,
`_responsible` = "andres_int",
`_webmode` = 1,
cp_hidden = counterpart
)
export(data_assignments,'questionnaires/assignments/cps_follow_up_26_octubre.txt' )
data_assignments <- raw_data %>%
filter(interview__status %in% c("Not Started", "Responding")) %>%
select(interview__status,
country,
counterpart
) %>%
mutate(`_quantity` = 1,
`_responsible` = "andres_int",
`_webmode` = 1,
cp_hidden = counterpart
)
export(data_assignments,'questionnaires/assignments/cps_follow_up_26_octubre.txt' )
susor_export_file()
susor_export_file
t <- susor_get_assignments(22, 'cp')
View(t)
sprintf("%s/api/v1/assignments", susor_server)
glue("{susor_server}/api/v1/assignments", susor_server)
glue("{susor_server}/api/v1/assignments")
raw_data$interview__id[1]
id <- raw_data$interview__id[1]
glue("{susor_server}/api/v1/assignments/{id}")
glue("{susor_server}/api/v1/assignments/{id}/archive")
url = glue("{susor_server}/api/v1/assignments/{id}/archive")
View(raw_data)
PATCH(url,
authenticate(user = 'araupontones',
password ="Seguridad1" ))
names(raw_data)
id <- 17813
url = glue("{susor_server}/api/v1/assignments/{id}/archive")
PATCH(url,
authenticate(user = 'araupontones',
password ="Seguridad1" ))
11L
11e1
11e20
11e10
11L
10^5
assignments <- susor_get_assignments(21, 'cp' , susor_limit = 12000)
View(assignments)
version <- 21
susor_server = "https://www.pulpodata.solutions"
for( i in 1:times_to_iterate){
print(i)
}
times_to_iterate = 2
for( i in 1:times_to_iterate){
print(i)
}
for( i in 1:times_to_iterate){
#get assignments
assignments_ <- susor_get_assignments(version, 'cp' , susor_limit = 100)
ids <- assignments_$Id
lapply(ids, function(id){
url = glue("{susor_server}/api/v1/assignments/{id}/archive")
PATCH(url,
authenticate(user = 'araupontones',
password ="Seguridad1" ))
})
Sys.sleep(5)
}
for( i in 1:times_to_iterate){
#get assignments
assignments_ <- susor_get_assignments(version, 'cp' , susor_limit = 100)
ids <- assignments_$Id
lapply(ids, function(id){
url = glue("{susor_server}/api/v1/assignments/{id}/archive")
PATCH(url,
authenticate(user = 'araupontones',
password ="Seguridad1" ))
})
Sys.sleep(1)
}
for( i in 1:times_to_iterate){
#get assignments
assignments_ <- susor_get_assignments(version, 'cp' , susor_limit = 100)
ids <- assignments_$Id
lapply(ids, function(id){
url = glue("{susor_server}/api/v1/assignments/{id}/archive")
PATCH(url,
authenticate(user = 'araupontones',
password ="Seguridad1" ))
})
message(glue('batch {i}'))
Sys.sleep(1)
}
times_to_iterate = 10
for( i in 1:times_to_iterate){
#get assignments
assignments_ <- susor_get_assignments(version, 'cp' , susor_limit = 100)
ids <- assignments_$Id
lapply(ids, function(id){
url = glue("{susor_server}/api/v1/assignments/{id}/archive")
PATCH(url,
authenticate(user = 'araupontones',
password ="Seguridad1" ))
})
message(glue('batch {i}'))
}
times_to_iterate = 50
for( i in 1:times_to_iterate){
#get assignments
assignments_ <- susor_get_assignments(version, 'cp' , susor_limit = 100)
ids <- assignments_$Id
lapply(ids, function(id){
url = glue("{susor_server}/api/v1/assignments/{id}/archive")
PATCH(url,
authenticate(user = 'araupontones',
password ="Seguridad1" ))
})
message(glue('batch {i}'))
}
times_to_iterate = 50
for( i in 1:times_to_iterate){
#get assignments
assignments_ <- susor_get_assignments(version, 'cp' , susor_limit = 100)
ids <- assignments_$Id
lapply(ids, function(id){
url = glue("{susor_server}/api/v1/assignments/{id}/archive")
PATCH(url,
authenticate(user = 'araupontones',
password ="Seguridad1" ))
})
message(glue('batch {i}'))
}
View(data_assignments)
export(data_assignments,'questionnaires/assignments/cps_follow_up_26_octubre.txt')
data_assignments <- raw_data %>%
filter(interview__status %in% c("Not Started", "Responding")) %>%
select(interview__status,
country,
counterpart
) %>%
mutate(`_quantity` = -1,
`_responsible` = "andres_int",
`_webmode` = 1,
cp_hidden = counterpart
)
export(data_assignments,'questionnaires/assignments/cps_follow_up_26_octubre.txt')
names(raw_data)
data_assignments <- raw_data %>%
filter(interview__status %in% c("Not Started", "Responding")) %>%
select(interview__status,
country = country_id,
counterpart
) %>%
mutate(`_quantity` = -1,
`_responsible` = "andres_int",
`_webmode` = 1,
cp_hidden = counterpart
)
data_assignments <- raw_data %>%
filter(interview__status %in% c("Not Started", "Responding")) %>%
select(interview__status,
country = country_id,
counterpart
) %>%
mutate(`_quantity` = -1,
`_responsible` = "andres_int",
`_webmode` = 1,
cp_hidden = counterpart
) %>%
select(-interview__status)
export(data_assignments,'questionnaires/assignments/cps_follow_up_26_octubre.txt')
s <- rio::import('data/2.sample/cps_sample_corrected.csv')
#before running, download the interview links.
links <- read.delim('data/3.Assignments/follow-up/interviews.tab')
s <- rio::import('data/2.sample/cps_sample_corrected.csv')
#before running, download the interview links.
links <- read.delim('data/3.Assignments/follow-up/interviews.tab')
clean_links <- links %>%
select(url = assignment__link,
cp_id = cp_hidden
) %>%
left_join(select(s, Name, Country_name, email, region, director, cp_id)) %>%
relocate(Name, email,Country_name, region, director) %>%
select(-cp_id) %>%
rename(Country = Country_name)
View(clean_links)
s <- rio::import('data/2.sample/cps_sample_corrected.csv', encoding = 'UTF-8')
#before running, download the interview links.
links <- read.delim('data/3.Assignments/follow-up/interviews.tab')
clean_links <- links %>%
select(url = assignment__link,
cp_id = cp_hidden
) %>%
left_join(select(s, Name, Country_name, email, region, director, cp_id)) %>%
relocate(Name, email,Country_name, region, director) %>%
select(-cp_id) %>%
rename(Country = Country_name)
export(clean_links, 'data/4.campaigns/cps_follow_up_26_oct.csv')
#load dependencies --------------------------------------------------------------
#source("R_/5.QA/utils_QA.R")
library(dplyr)
library(httr)
library(stringr)
library(lubridate)
library(rio)
library(janitor)
library(susor)
#dfine parameters --------------------------------------------------------------
#sample_girls<- rio::import(survey_girls_sample_path)
questionnaire <- "cp"
sample_file <- 'data/2.sample/cps_sample_corrected.csv'
sample <- import(sample_file)
bounces <- import('data/4.campaigns/bounces_Oct_16_2023.csv') %>%
select(email =`Email Address`,
bounce = `Bounce Type`)
#download data ----------------------------------------------------------------
#login
#Import list of interviewers logged in Survey Solutions -----------------------
susor::susor_login(susor_server = "https://www.pulpodata.solutions",
susor_user = "araupontones",
susor_password = "Seguridad1",
susor_dir_downloads = 'data/6.data-collection/0.downloads',
susor_dir_raw = 'data/6.data-collection/1.raw',
limit = 100,
ofset = 1
)
#Download all versions of the questionnaire ----------------------------------
#get versions ---------------------------------------------------------------
versions <- susor_questionnaires$Version[susor_questionnaires$Variable == questionnaire]
downloads <- lapply(versions, function(x){
susor::susor_export_file(susor_qn_variable = questionnaire,
susor_qn_version = x,
susor_format = "STATA"
)
})
#append all versions ---------------------------------------------------------
susor::susor_append_versions(susor_qn_variable = questionnaire,
susor_format = "STATA")
#read raw data -----------------------------------------------------
raw_data <- rio::import(file.path(susor_dir_raw, questionnaire, 'cp.dta'))
#count missing values
raw_data$na_count <- apply(raw_data, 1, function(x) sum(is.na(x)))
raw_no_dupes<- raw_data %>%
#Keep only one observation by counterpart
group_by(counterpart) %>%
filter(na_count == min(na_count)) %>%
filter(n_questions_unanswered == min(n_questions_unanswered)) %>%
filter(row_number() == 1) %>%
ungroup() %>%
relocate(counterpart, na_count, n_questions_unanswered, interview__status)
#count number of  duplicates
dupes <- get_dupes(raw_no_dupes, counterpart)
#join with sample
raw_with_sample <- raw_no_dupes %>%
right_join(sample, by = c('counterpart' = 'cp_id')) %>%
mutate(across(c(interview__status, country), function(x)susor_get_stata_labels(x))) %>%
left_join(bounces) %>%
mutate(interview__status = case_when(!is.na(bounce) ~ "Bounced",
is.na(interview__status) ~ "Not Started",
#cases when user did not "completed the interview"
interview__status == "InterviewerAssigned" &
na_count <= 70 &
n_questions_unanswered <=3 ~ "Submitted",
interview__status == "InterviewerAssigned" ~ "Responding",
interview__status == "Completed" ~ "Submitted"
))
tabyl(raw_with_sample, interview__status)
#export raw data
export(raw_with_sample, file.path(susor_dir_raw, questionnaire, 'cp.rds'))
#QA response rates by countries
library(dplyr)
library(tidyr)
library(rio)
library(janitor)
library(susor)
library(openxlsx)
library(scales)
library(glue)
gmdacr::load_functions('functions')
#define paths =================================================================
raw_dir <- 'data/6.data-collection/1.raw/cp'
raw_data <- import(file.path(raw_dir, 'cp.rds'))
# gStatus ======================================================================
status <- raw_data %>%
relocate(Country_name, Name, email, interview__status, n_questions_unanswered)
#summary by country
by_country <- status %>%
group_by(Country_name) %>%
summarise(Sampled = n(),
Bounced = sum(interview__status == "Bounced"),
Accessed = sum(interview__status %in% c("Submitted", "Responding")),
Submitted = sum(interview__status == "Submitted"),
Avg_questions_unanswered = round(mean(n_questions_unanswered, na.rm = T),1),
response_rate = Submitted / Sampled
)
#Get row with totals totals --------------------------------------------------------------------
TOTALS <- tibble(
Country_name = "TOTAL",
Sampled = nrow(status),
Bounced = sum(by_country$Bounced),
Accessed = sum(by_country$Accessed),
Submitted = sum(by_country$Submitted),
Avg_questions_unanswered = round(mean(by_country$Avg_questions_unanswered, na.rm = T),1),
response_rate = Submitted/Sampled
)
#Define response rate
by_country_totals <- rbind(by_country, TOTALS) %>%
mutate(response_rate = scales::percent(response_rate, accuracy = .1),
Avg_questions_unanswered = ifelse(is.na(Avg_questions_unanswered), NA_real_, Avg_questions_unanswered))
# export summary by country
crate_xlsx_by_country(db = by_country_totals,
exfile = glue::glue("data/6.data-collection/2.response_rates/responses_by_country_{Sys.Date()}.xlsx")
)
total_countries = length(unique(by_country$Country_name))
havent_submitted =sum(by_country$Submitted ==0)
perc_havent = scales::percent(havent_submitted/total_countries)
sample_n = nrow(sample)
open = 4168
open_perc =scales::percent(open/sample_n)
accessed = comp = by_country_totals$Accessed[by_country_totals$Country_name == 'TOTAL']
acc_pers = percent(accessed/sample_n,accuracy = .01)
comp = by_country_totals$Submitted[by_country_totals$Country_name == 'TOTAL']
comp_pers = percent(comp/sample_n, accuracy = .01)
avg_unanswered = round(mean(status$n_questions_unanswered[status$interview__status == "Submitted"], na.rm = T),1)
max_unanswered = round(max(status$n_questions_unanswered[status$interview__status == "Submitted"], na.rm = T),1)
max_unanswered
glue::glue('from the {total_countries} countries in the sample, {havent_submitted} ({perc_havent}) have not submitted any interview yet.')
glue::glue('{open} ({open_perc}) have opened the invitation email')
glue('{accessed} ({acc_pers}) have accessed')
glue('{comp} ({comp_pers}) have submitted')
glue('The submitted interview with the maximum number of unanswered question, has {max_unanswered} unanswered')
glue("The average submitted interview has a total of {avg_unanswered} question")
