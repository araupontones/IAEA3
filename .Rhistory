library(rio)
library(tidyr)
library(stringr)
url_gs <- 'https://docs.google.com/spreadsheets/d/15SY9gpr5ELo0dLRYZNjqzNzOKbF8JYtkI42eBIZDe68/edit#gid=597634711'
#themes ========================================================================
raw_themes <- read_sheet(url_gs, 'themes')
names(raw_themes)
cat_themes <- raw_themes %>%
#excluding this because it is not part of the report
filter(Theme != "Nuclear Knowledge Development and Management") %>%
rename(title = Theme,
value = theme_code)
export(cat_themes,'questionnaires/categories/themes.xlsx', sheetName = "Categories", overwrite = T)
raw_improvements <- read_sheet(url_gs, "improvements")
names(raw_improvements)
cat_improvements <- raw_improvements %>%
#drop rows used for comments in sheet
dplyr::filter(!str_detect(improvement_code, "Q"),
improvement_code != "NULL")
View(cat_improvements)
cat_improvements <- raw_improvements %>%
#drop rows used for comments in sheet
dplyr::filter(!str_detect(improvement_code, "Q"),
improvement_code != "NULL") %>%
dplyr::filter(Improvement != "Knowledge on application and development of Small Modular Reactors (SMRs)")
cat_improvements <- raw_improvements %>%
#drop rows used for comments in sheet
dplyr::filter(!str_detect(improvement_code, "Q"),
improvement_code != "NULL") %>%
#dropping this because IAEA asked to
dplyr::filter(Improvement != "Knowledge on application and development of Small Modular Reactors (SMRs)") %>%
group_by(Improvement) %>%
slice(1) %>%
ungroup() %>%
select(title = Improvement,
value = improvement_code) %>%
arrange(as.numeric(value))
export(cat_improvements,'questionnaires/categories/improvements.xlsx', sheetName = "Categories", overwrite = T)
library(dplyr)
source("functions/utils_translation.R")
#Define parameters ------------------------------------------------------------
dir_translations <- "data/5.translations"
dir_designer <- file.path(dir_translations,"1.Download_from_designer")
dir_gsheets <- file.path(dir_translations,"2.Translations_Gsheets")
dir_import_back <- file.path(dir_translations,"3.To_import_in_Designer")
lookUp_qns <- rio::import(file.path(dir_translations, "lookUp_translations.xlsx"),
sheet = "questionnaires")
lookUp_countries <- rio::import(file.path(dir_translations, "lookUp_translations.xlsx"),
sheet = "countries")
questionnaires <- lookUp_qns$questionnaire
#countries <- lookUp_countries$country[-which(is.na(lookUp_countries$country))]
countries <- lookUp_countries$country
#countries <- "Russian"
countries
#Download template from designer ---------------------------------------------
downloaded_templates <- download_templates(
x = "CP",
exdir = dir_designer,
lookUp = lookUp_qns)
translations_gsheets <- lapply(countries,
download_gsheets,
lookUp = lookUp_countries,
questionnaires = questionnaires)
names(translations_gsheets) <- countries
join_templates_ss <- lapply(questionnaires,
join_templates_gsheet,
lookUP = lookUp_countries,
dir_designer = dir_designer,
dir_gsheets = dir_gsheets,
dir_import_back  = dir_import_back,
translations_gsheets = translations_gsheets,
countries = countries)
#countries <- "Russian"
countries
library(rio)
library(dplyr)
library(tidyr)
library(janitor)
library(stringr)
gmdacr::load_functions('functions')
projects <- import('data/1.reference/Copy of CPs_2022_09_12.xlsx')
#internal testers of the questionnare
testers <- import('data/1.reference/internal_testers.xlsx')
directors <- import('data/1.reference/directors.xlsx')
#drop missing cases
df_complete <- create_df_complete(plyr::rbind.fill(projects, testers))
#get county codes
country_codes <- import('data/1.reference/Copy of Country_Names_2023_06_12.xlsx') %>%
select(Nationality = CountryCode,
Country_name = Country,
region = Area
) %>%
#get name of regional director
left_join(directors, by = 'region')
sort(unique(country_codes$Nationality))
# create ids -------------------------------------------------------------------
cps_ids <- df_complete %>%
filter(!Nationality %in% c("SOI", "KIR")) %>%
group_by(Name) %>%
slice(1) %>%
ungroup() %>%
left_join(country_codes) %>%
select(Name, Country_name, Nationality, EMail, region,director, tester) %>%
group_by(Country_name) %>%
mutate(country_id = cur_group_id(),
country_id = case_when(country_id < 10 ~ paste0("00", country_id),
between(country_id, 10, 99) ~ paste0("0", country_id),
T ~ as.character(country_id)
)
) %>%
arrange(country_id, Name) %>%
ungroup() %>%
group_by(Country_name, country_id) %>%
mutate(row =  row_number(),
cp = case_when(row < 10 ~ paste0("00", row),
between(row, 10, 99) ~ paste0("0", row),
T ~ as.character(row)
),
cp_id = paste0(country_id, cp)
) %>%
ungroup() %>%
select(Name, Country_name, country_id, cp_id, email = EMail, region, director, tester) %>%
#drop North American CPs
filter(region != "North America") %>%
mutate(Country_name = ifelse(Country_name == "T.T.U.T.J of T. Palestinian A.", "State of Palestine", Country_name))
View(cps_ids)
#final sample
rio::export(cps_ids, "data/2.sample/cps_sample.csv")
library(rio)
library(dplyr)
library(tidyr)
library(janitor)
library(stringr)
gmdacr::load_functions('functions')
projects <- import('data/1.reference/Copy of CPs_2022_09_12.xlsx')
#internal testers of the questionnare
testers <- import('data/1.reference/internal_testers.xlsx')
directors <- import('data/1.reference/directors.xlsx')
#drop missing cases
df_complete <- create_df_complete(plyr::rbind.fill(projects, testers))
#get county codes
country_codes <- import('data/1.reference/Copy of Country_Names_2023_06_12.xlsx') %>%
select(Nationality = CountryCode,
Country_name = Country,
region = Area
) %>%
#get name of regional director
left_join(directors, by = 'region')
sort(unique(country_codes$Nationality))
# create ids -------------------------------------------------------------------
cps_ids <- df_complete %>%
filter(!Nationality %in% c("SOI", "KIR")) %>%
group_by(Name) %>%
slice(1) %>%
ungroup() %>%
left_join(country_codes) %>%
select(Name, Country_name, Nationality, EMail, region,director, tester) %>%
group_by(Country_name) %>%
mutate(country_id = cur_group_id(),
country_id = case_when(country_id < 10 ~ paste0("00", country_id),
between(country_id, 10, 99) ~ paste0("0", country_id),
T ~ as.character(country_id)
)
) %>%
arrange(country_id, Name) %>%
ungroup() %>%
group_by(Country_name, country_id) %>%
mutate(row =  row_number(),
cp = case_when(row < 10 ~ paste0("00", row),
between(row, 10, 99) ~ paste0("0", row),
T ~ as.character(row)
),
cp_id = paste0(country_id, cp)
) %>%
ungroup() %>%
select(Name, Country_name, country_id, cp_id, email = EMail, region, director, tester) %>%
#drop North American CPs
filter(region != "North America") %>%
mutate(Country_name = ifelse(Country_name == "T.T.U.T.J of T. Palestinian A.", "State of Palestine", Country_name))
names(testers)
# create ids -------------------------------------------------------------------
cps_ids <- df_complete %>%
filter(!Nationality %in% c("SOI", "KIR")) %>%
group_by(Name) %>%
slice(1) %>%
ungroup() %>%
left_join(country_codes) %>%
select(Name, Country_name, Nationality, EMail, region,director, tester) %>%
group_by(Country_name) %>%
mutate(country_id = cur_group_id(),
country_id = case_when(country_id < 10 ~ paste0("00", country_id),
between(country_id, 10, 99) ~ paste0("0", country_id),
T ~ as.character(country_id)
)
) %>%
arrange(country_id, Name) %>%
ungroup() %>%
group_by(Country_name, country_id) %>%
mutate(row =  row_number(),
cp = case_when(row < 10 ~ paste0("00", row),
between(row, 10, 99) ~ paste0("0", row),
T ~ as.character(row)
),
cp_id = paste0(country_id, cp)
) %>%
ungroup() %>%
select(Name, Country_name, country_id, cp_id, email = EMail, region, director, tester, keep_sample) %>%
#drop North American CPs
filter(region != "North America") %>%
mutate(Country_name = ifelse(Country_name == "T.T.U.T.J of T. Palestinian A.", "State of Palestine", Country_name))
# create ids -------------------------------------------------------------------
cps_ids <- df_complete %>%
filter(!Nationality %in% c("SOI", "KIR")) %>%
group_by(Name) %>%
slice(1) %>%
ungroup() %>%
left_join(country_codes) %>%
select(Name, Country_name, Nationality, EMail, region,director, tester, keep_sample) %>%
group_by(Country_name) %>%
mutate(country_id = cur_group_id(),
country_id = case_when(country_id < 10 ~ paste0("00", country_id),
between(country_id, 10, 99) ~ paste0("0", country_id),
T ~ as.character(country_id)
)
) %>%
arrange(country_id, Name) %>%
ungroup() %>%
group_by(Country_name, country_id) %>%
mutate(row =  row_number(),
cp = case_when(row < 10 ~ paste0("00", row),
between(row, 10, 99) ~ paste0("0", row),
T ~ as.character(row)
),
cp_id = paste0(country_id, cp)
) %>%
ungroup() %>%
select(Name, Country_name, country_id, cp_id, email = EMail, region, director, tester, keep_sample) %>%
#drop North American CPs
filter(region != "North America") %>%
mutate(Country_name = ifelse(Country_name == "T.T.U.T.J of T. Palestinian A.", "State of Palestine", Country_name))
# create ids -------------------------------------------------------------------
cps_ids <- df_complete %>%
filter(!Nationality %in% c("SOI", "KIR")) %>%
group_by(Name) %>%
slice(1) %>%
ungroup() %>%
left_join(country_codes) %>%
select(Name, Country_name, Nationality, EMail, region,director, tester, keep_sample) %>%
group_by(Country_name) %>%
mutate(country_id = cur_group_id(),
country_id = case_when(country_id < 10 ~ paste0("00", country_id),
between(country_id, 10, 99) ~ paste0("0", country_id),
T ~ as.character(country_id)
)
) %>%
arrange(country_id, Name) %>%
ungroup() %>%
group_by(Country_name, country_id) %>%
mutate(row =  row_number(),
cp = case_when(row < 10 ~ paste0("00", row),
between(row, 10, 99) ~ paste0("0", row),
T ~ as.character(row)
),
cp_id = paste0(country_id, cp)
) %>%
ungroup() %>%
select(Name, Country_name, country_id, cp_id, email = EMail, region, director, tester, keep_sample) %>%
#drop North American CPs
filter(region != "North America") %>%
mutate(Country_name = ifelse(Country_name == "T.T.U.T.J of T. Palestinian A.", "State of Palestine", Country_name)) %>%
dplyr::filter(!keep_sample & is.na(keep_sample))
# create ids -------------------------------------------------------------------
cps_ids <- df_complete %>%
filter(!Nationality %in% c("SOI", "KIR")) %>%
group_by(Name) %>%
slice(1) %>%
ungroup() %>%
left_join(country_codes) %>%
select(Name, Country_name, Nationality, EMail, region,director, tester, keep_sample) %>%
group_by(Country_name) %>%
mutate(country_id = cur_group_id(),
country_id = case_when(country_id < 10 ~ paste0("00", country_id),
between(country_id, 10, 99) ~ paste0("0", country_id),
T ~ as.character(country_id)
)
) %>%
arrange(country_id, Name) %>%
ungroup() %>%
group_by(Country_name, country_id) %>%
mutate(row =  row_number(),
cp = case_when(row < 10 ~ paste0("00", row),
between(row, 10, 99) ~ paste0("0", row),
T ~ as.character(row)
),
cp_id = paste0(country_id, cp)
) %>%
ungroup() %>%
select(Name, Country_name, country_id, cp_id, email = EMail, region, director, tester, keep_sample) %>%
#drop North American CPs
filter(region != "North America") %>%
mutate(Country_name = ifelse(Country_name == "T.T.U.T.J of T. Palestinian A.", "State of Palestine", Country_name)) %>%
dplyr::filter(!keep_sample | is.na(keep_sample))
# create ids -------------------------------------------------------------------
cps_ids <- df_complete %>%
filter(!Nationality %in% c("SOI", "KIR")) %>%
group_by(Name) %>%
slice(1) %>%
ungroup() %>%
left_join(country_codes) %>%
select(Name, Country_name, Nationality, EMail, region,director, tester, keep_sample) %>%
group_by(Country_name) %>%
mutate(country_id = cur_group_id(),
country_id = case_when(country_id < 10 ~ paste0("00", country_id),
between(country_id, 10, 99) ~ paste0("0", country_id),
T ~ as.character(country_id)
)
) %>%
arrange(country_id, Name) %>%
ungroup() %>%
group_by(Country_name, country_id) %>%
mutate(row =  row_number(),
cp = case_when(row < 10 ~ paste0("00", row),
between(row, 10, 99) ~ paste0("0", row),
T ~ as.character(row)
),
cp_id = paste0(country_id, cp)
) %>%
ungroup() %>%
select(Name, Country_name, country_id, cp_id, email = EMail, region, director, tester, keep_sample) %>%
#drop North American CPs
filter(region != "North America") %>%
mutate(Country_name = ifelse(Country_name == "T.T.U.T.J of T. Palestinian A.", "State of Palestine", Country_name)) %>%
dplyr::filter(keep_sample | is.na(keep_sample))
# create ids -------------------------------------------------------------------
cps_ids <- df_complete %>%
filter(!Nationality %in% c("SOI", "KIR")) %>%
group_by(Name) %>%
slice(1) %>%
ungroup() %>%
left_join(country_codes) %>%
select(Name, Country_name, Nationality, EMail, region,director, tester, keep_sample) %>%
group_by(Country_name) %>%
mutate(country_id = cur_group_id(),
country_id = case_when(country_id < 10 ~ paste0("00", country_id),
between(country_id, 10, 99) ~ paste0("0", country_id),
T ~ as.character(country_id)
)
) %>%
arrange(country_id, Name) %>%
ungroup() %>%
group_by(Country_name, country_id) %>%
mutate(row =  row_number(),
cp = case_when(row < 10 ~ paste0("00", row),
between(row, 10, 99) ~ paste0("0", row),
T ~ as.character(row)
),
cp_id = paste0(country_id, cp)
) %>%
ungroup() %>%
select(Name, Country_name, country_id, cp_id, email = EMail, region, director, tester, keep_sample) %>%
#drop North American CPs
filter(region != "North America") %>%
mutate(Country_name = ifelse(Country_name == "T.T.U.T.J of T. Palestinian A.", "State of Palestine", Country_name)) %>%
dplyr::filter(keep_sample | is.na(keep_sample))
# create ids -------------------------------------------------------------------
cps_ids <- df_complete %>%
filter(!Nationality %in% c("SOI", "KIR")) %>%
group_by(Name) %>%
slice(1) %>%
ungroup() %>%
left_join(country_codes) %>%
select(Name, Country_name, Nationality, EMail, region,director, tester, keep_sample) %>%
group_by(Country_name) %>%
mutate(country_id = cur_group_id(),
country_id = case_when(country_id < 10 ~ paste0("00", country_id),
between(country_id, 10, 99) ~ paste0("0", country_id),
T ~ as.character(country_id)
)
) %>%
arrange(country_id, Name) %>%
ungroup() %>%
group_by(Country_name, country_id) %>%
mutate(row =  row_number(),
cp = case_when(row < 10 ~ paste0("00", row),
between(row, 10, 99) ~ paste0("0", row),
T ~ as.character(row)
),
cp_id = paste0(country_id, cp)
) %>%
ungroup() %>%
select(Name, Country_name, country_id, cp_id, email = EMail, region, director, tester, keep_sample) %>%
#drop North American CPs
filter(region != "North America") %>%
mutate(Country_name = ifelse(Country_name == "T.T.U.T.J of T. Palestinian A.", "State of Palestine", Country_name)) %>%
dplyr::filter(keep_sample | is.na(keep_sample)) %>%
select(-keep_sample)
# create ids -------------------------------------------------------------------
cps_ids <- df_complete %>%
filter(!Nationality %in% c("SOI", "KIR")) %>%
group_by(Name) %>%
slice(1) %>%
ungroup() %>%
left_join(country_codes) %>%
select(Name, Country_name, Nationality, EMail, region,director, tester, keep_sample) %>%
group_by(Country_name) %>%
mutate(country_id = cur_group_id(),
country_id = case_when(country_id < 10 ~ paste0("00", country_id),
between(country_id, 10, 99) ~ paste0("0", country_id),
T ~ as.character(country_id)
)
) %>%
arrange(country_id, Name) %>%
ungroup() %>%
group_by(Country_name, country_id) %>%
mutate(row =  row_number(),
cp = case_when(row < 10 ~ paste0("00", row),
between(row, 10, 99) ~ paste0("0", row),
T ~ as.character(row)
),
cp_id = paste0(country_id, cp)
) %>%
ungroup() %>%
select(Name, Country_name, country_id, cp_id, email = EMail, region, director, tester, keep_sample) %>%
#drop North American CPs
filter(region != "North America") %>%
mutate(Country_name = ifelse(Country_name == "T.T.U.T.J of T. Palestinian A.", "State of Palestine", Country_name)) %>%
#from the testers, only keep the one I want (in internal_testers.xlsx)
dplyr::filter(keep_sample | is.na(keep_sample)) %>%
select(-keep_sample)
#final sample
rio::export(cps_ids, "data/2.sample/cps_sample.csv")
#create categories for countries and cps
#This files are used in Survey Solutions as IDs
library(dplyr)
library(rio)
sample <-rio::import("data/2.sample/cps_sample.csv", encoding = "UTF-8")
names(sample)
countries <- sample %>%
select(title = Country_name,
value = country_id) %>%
group_by(title, value) %>%
slice(1) %>%
ungroup() %>%
mutate(parentvalue = "",
attachmentname = "",
title = ifelse(title == "T.T.U.T.J of T. Palestinian A.", "State of Palestine", title)
)
export(countries, 'questionnaires/categories/countries.xlsx', overwrite = T)
cps <- sample %>%
select(title = cp_id,
value = cp_id,
parentvalue = country_id) %>%
mutate(attachmentname = "")
View(cps)
cps <- sample
cps <- sample
select(title = cp_id,
value = cp_id,
parentvalue = country_id) %>%
mutate(attachmentname = "")
cps <- sample %>%
select(title = cp_id,
value = cp_id,
parentvalue = country_id) %>%
mutate(attachmentname = "")
export(cps, 'questionnaires/categories/cps.xlsx', overwrite = T, sheetname = "Categories")
#create assignments
library(dplyr)
library(rio)
assignment <- import("data/2.sample/cps_sample.csv")
View(assignment)
assignment <- import("data/2.sample/cps_sample.csv") %>%
#filter(tester) %>%
select(country = country_id,
counterpart = cp_id) %>%
mutate(`_quantity` = -1,
`_responsible` = "andres_int",
`_webmode` = 1,
cp_hidden = counterpart
)
export(assignment,'questionnaires/assignments/cps.txt' )
assignment <- import("data/2.sample/cps_sample.csv") %>%
#filter(tester) %>%
select(country = country_id,
counterpart = cp_id) %>%
mutate(`_quantity` = -1,
`_responsible` = "andres_int",
`_webmode` = 1,
cp_hidden = counterpart
)
export(assignment,'questionnaires/assignments/cps.txt' )
View(assignment)
library(dplyr)
library(janitor)
s <- rio::import('data/2.sample/cps_sample.csv')
#before running, download the interview links.
links <- read.delim('data/3.Assignments/interviews.tab')
clean_links <- links %>%
select(url = assignment__link,
cp_id = cp_hidden
) %>%
left_join(select(s, Name, Country_name, email, region, director, cp_id)) %>%
relocate(Name, email,Country_name, region, director) %>%
select(-cp_id) %>%
rename(Country = Country_name)
View(clean_links)
export(clean_links, 'data/4.campaigns/cps.csv')
.libPaths()
library(dplyr)
library(rio)
.lib
library(rio)
