})
analysis_themes <- lapply(temas[1], function(tema){
message(tema)
#define parameters of the theme (used to export and organize plots)
theme_id <- ids_themes(str_to_title(tema))
theme_sufix <- theme_suffix(theme_id)
#filter data of the team
data_theme <- filter(future_clean,theme == tema)  %>%
mutate(theme = as.character(tema),
foa = as.character(foa)) %>%
select(-theme) %>%
rename(theme = foa)
#length(list_analysis)
plots_future  <- lapply(c(1:1), function(i){
#create plot
pl <- chart(i, db = data_theme)
pl_2 <- pl +
scale_y_discrete(labels = label_wrap_gen(80))
subtitulo =  list_analysis[[i]]$subtitle
#export chart
ggsave(glue('analysis/plots/1.future/{theme_sufix}_{subtitulo}.png'),
pl_2,
units = 'cm')
}
)
})
analysis_themes <- lapply(temas[1], function(tema){
message(tema)
#define parameters of the theme (used to export and organize plots)
theme_id <- ids_themes(str_to_title(tema))
theme_sufix <- theme_suffix(theme_id)
#filter data of the team
data_theme <- filter(future_clean,theme == tema)  %>%
mutate(theme = as.character(tema),
foa = as.character(foa)) %>%
select(-theme) %>%
rename(theme = foa)
#length(list_analysis)
plots_future  <- lapply(c(1:1), function(i){
#create plot
pl <- chart(i, db = data_theme)
pl_2 <- pl +
scale_y_discrete(labels = label_wrap_gen(70))
subtitulo =  list_analysis[[i]]$subtitle
#export chart
ggsave(glue('analysis/plots/1.future/{theme_sufix}_{subtitulo}.png'),
pl_2,
units = 'cm')
}
)
})
analysis_themes <- lapply(temas[1], function(tema){
message(tema)
#define parameters of the theme (used to export and organize plots)
theme_id <- ids_themes(str_to_title(tema))
theme_sufix <- theme_suffix(theme_id)
#filter data of the team
data_theme <- filter(future_clean,theme == tema)  %>%
mutate(theme = as.character(tema),
foa = as.character(foa)) %>%
select(-theme) %>%
rename(theme = foa)
#length(list_analysis)
plots_future  <- lapply(c(1:1), function(i){
#create plot
pl <- chart(i, db = data_theme)
pl_2 <- pl +
scale_y_discrete(labels = label_wrap_gen(40))
subtitulo =  list_analysis[[i]]$subtitle
#export chart
ggsave(glue('analysis/plots/1.future/{theme_sufix}_{subtitulo}.png'),
pl_2,
units = 'cm')
}
)
})
analysis_themes <- lapply(temas[1], function(tema){
message(tema)
#define parameters of the theme (used to export and organize plots)
theme_id <- ids_themes(str_to_title(tema))
theme_sufix <- theme_suffix(theme_id)
#filter data of the team
data_theme <- filter(future_clean,theme == tema)  %>%
mutate(theme = as.character(tema),
foa = as.character(foa)) %>%
select(-theme) %>%
rename(theme = foa)
plots_future  <- lapply(c(1:length(list_analysis)), function(i){
#create plot
pl <- chart(i, db = data_theme)
pl_2 <- pl +
scale_y_discrete(labels = label_wrap_gen(40))
subtitulo =  list_analysis[[i]]$subtitle
#export chart
ggsave(glue('analysis/plots/1.future/{theme_sufix}_{subtitulo}.png'),
pl_2,
units = 'cm')
}
)
})
analysis_themes <- lapply(temas[1], function(tema){
message(tema)
#define parameters of the theme (used to export and organize plots)
theme_id <- ids_themes(str_to_title(tema))
theme_sufix <- theme_suffix(theme_id)
#filter data of the team
data_theme <- filter(future_clean,theme == tema)  %>%
mutate(theme = as.character(tema),
foa = as.character(foa)) %>%
select(-theme) %>%
rename(theme = foa)
plots_future  <- lapply(c(1:length(list_analysis)), function(i){
#create plot
pl <- chart(i, db = data_theme)
pl_2 <- pl +
scale_y_discrete(labels = label_wrap_gen(40))
subtitulo =  list_analysis[[i]]$subtitle
message(subtitulo)
#export chart
ggsave(glue('analysis/plots/1.future/{theme_sufix}_{subtitulo}.png'),
pl_2,
units = 'cm')
}
)
})
temas <- levels(future_clean$theme)
temas[1]
analysis_themes <- lapply(temas, function(tema){
message(tema)
#define parameters of the theme (used to export and organize plots)
theme_id <- ids_themes(str_to_title(tema))
theme_sufix <- theme_suffix(theme_id)
#filter data of the team
data_theme <- filter(future_clean,theme == tema)  %>%
mutate(theme = as.character(tema),
foa = as.character(foa)) %>%
select(-theme) %>%
rename(theme = foa)
plots_future  <- lapply(c(1:length(list_analysis)), function(i){
#create plot
pl <- chart(i, db = data_theme)
pl_2 <- pl +
scale_y_discrete(labels = label_wrap_gen(40))
subtitulo =  list_analysis[[i]]$subtitle
message(subtitulo)
#export chart
ggsave(glue('analysis/plots/1.future/{theme_sufix}_{subtitulo}.png'),
pl_2,
units = 'cm')
}
)
})
charts_future <- function(i, mode = "themes", db){
#define parameters
grupo1 = list_analysis[[i]]$group_1
grupo2 = list_analysis[[i]]$group_2
subtitulo =  list_analysis[[i]]$subtitle
if(mode != 'themes'){
#grupo1 = str_replace(grupo1, "theme", "foa")
#grupo2 = str_replace(grupo2, "theme", "foa")
subtitulo = str_replace(subtitulo, "Theme", "Field of Activity")
}
#Create data for plot
#by_likert is created in functions/analysis_future
#it counts answers by category
data_plot <- db %>% by_likert(group_1 = grupo1,
group_2 = grupo2)
#create the chart
#ggLikertbarsFuture is created in functions/plots
grafica <- data_plot %>%
ggLikertbarsFuture(titulo = "Importance of TCP in achieving results over the next 5-10 years.",
subtitulo = subtitulo)
#facet only if the list analysis is not 1, if it is not theme
if(i != 1){
grafica <- grafica +
facet_wrap(grupo1[1])
} else{
grafica
}
#export chart
# ggsave(glue('analysis/plots/1.future/{subtitulo}.png'),
#        units = 'cm')
return(grafica)
}
#loop over themes
analysis_themes <- lapply(temas, function(tema){
message(tema)
#define parameters of the theme (used to export and organize plots)
theme_id <- ids_themes(str_to_title(tema))
theme_sufix <- theme_suffix(theme_id)
#filter data of the team
data_theme <- filter(future_clean,theme == tema)  %>%
mutate(theme = as.character(tema),
foa = as.character(foa)) %>%
#doing this so I dont have to modify the function used above
select(-theme) %>%
rename(theme = foa)
plots_future  <- lapply(c(1:length(list_analysis)), function(i){
#create plot
pl <- charts_future(i, db = data_theme)
pl_2 <- pl +
scale_y_discrete(labels = label_wrap_gen(40))
subtitulo =  list_analysis[[i]]$subtitle
message(subtitulo)
#export chart
ggsave(glue('analysis/plots/1.future/{theme_sufix}_{subtitulo}.png'),
pl_2,
units = 'cm')
}
)
})
#loop over themes
analysis_themes <- lapply(temas, function(tema){
message(tema)
#define parameters of the theme (used to export and organize plots)
theme_id <- ids_themes(str_to_title(tema))
theme_sufix <- theme_suffix(theme_id)
#filter data of the team
data_theme <- filter(future_clean,theme == tema)  %>%
mutate(theme = as.character(tema),
foa = as.character(foa)) %>%
#doing this so I dont have to modify the function used above
select(-theme) %>%
rename(theme = foa)
plots_future  <- lapply(c(1:length(list_analysis)), function(i){
#create plot
pl <- charts_future(i, db = data_theme)
pl_2 <- pl +
scale_y_discrete(labels = label_wrap_gen(40))
subtitulo =  list_analysis[[i]]$subtitle
subtitulo = str_replace(subtitulo, "Theme", "Field of Activity")
message(subtitulo)
#export chart
ggsave(glue('analysis/plots/1.future/{theme_sufix}_{subtitulo}.png'),
pl_2,
units = 'cm')
}
)
})
list_analysis <- list(
#1. between thematic areas ---------------------------------------------------
list(
group_1= c('theme', 'likert'),
group_2 = c('theme'),
subtitle = "By Theme."
),
#2. between geographic areas ------------------------------------------------
list(
group_1= c('region','theme', 'likert'),
group_2 = c('region','theme'),
subtitle = "By Theme, Between Regions."
)
,
#3. between LDC status ------------------------------------------------------
list(
group_1= c('ldc','theme', 'likert'),
group_2 = c('ldc','theme'),
subtitle = "By Theme, Between LDC status."
)
,
#between year joined ---------------------------------------------------------
list(
group_1= c('joined','theme', 'likert'),
group_2 = c('joined', 'theme'),
subtitle = "By Theme, Between Year Joined."
)
)
#create plots
plots_future  <- lapply(c(1:length(list_analysis)), function(i){
pl <- charts_future(i, db = future_clean)
subtitulo =  list_analysis[[i]]$subtitle
#export chart
ggsave(glue('analysis/plots/1.future/{subtitulo}.png'),
pl,
units = 'cm')
}
)
library(rio)
library(dplyr)
library(janitor)
gmdacr::load_functions('functions/')
#load data =======================================================================
sample <- import('data/2.sample/cps_sample.csv', encoding = 'UTF-8')
#list of ldcs given by eloisa
ldcs <- import('data/1.reference/countries/Copy of IAEA members as at 14-12-2023.xlsx') %>%
select(country= cName,
ldc = cLDCFlag) %>%
#clean the names to make them consistent with the sample
clean_countries() #function saved in functions/
View(ldcs)
ldcs <- import('data/1.reference/countries/Copy of IAEA members as at 14-12-2023.xlsx') %>%
select(country= cName,
ldc = cLDCFlag) %>%
#clean the names to make them consistent with the sample
clean_countries() %>%#function saved in functions/
mutate(ldc = ifelse(ldc == "Yes", "LDC", "No-LDC"))
library(rio)
library(dplyr)
library(janitor)
gmdacr::load_functions('functions/')
#load data =======================================================================
sample <- import('data/2.sample/cps_sample.csv', encoding = 'UTF-8')
#list of ldcs given by eloisa
ldcs <- import('data/1.reference/countries/Copy of IAEA members as at 14-12-2023.xlsx') %>%
select(country= cName,
ldc = cLDCFlag) %>%
#clean the names to make them consistent with the sample
clean_countries() %>%#function saved in functions/
mutate(ldc = ifelse(ldc == "Yes", "LDC", "No-LDC"))
#lookup table countries =======================================================
#keep unique country names from the sample
countries <- sample %>%
group_by(Country_name) %>%
slice(1) %>%
select(country= Country_name,
region)
#get ldcs and recipients
countries_ldc <- countries %>%
left_join(ldcs) %>%
mutate(joined = case_when(
#Countries with no programme in the 21st century -----------------------------
country %in%
c('Austria', 'Belgium', 'Denmark', 'Finland', 'Netherlands', 'United Kingdom')
~ 'No programme in 21st century',
#Countries that joined Agency since 2020 and should not be considered when referring to ‘future aspects’
country %in% c('Comoros', 'Samoa') ~ 'Since 2020',
#Countries with programme ONLY AFTER 2015:
country %in% c('Barbados', 'Kingdom of Eswatini') ~ "After 2015",
#Countries with programme ONLY DURING 2000-2009:
country %in% c('Cyprus', 'Russian Federation') ~ "2000-2009",
#Countries with programme ONLY DURING 2000-2015:
country %in% c('China') ~ '2000-20015',
#Countries with programme ONLY AFTER 2009:
country %in% c('Bahrain', 'Burundi', 'Cambodia', 'Congo, Rep. of',
'Lesotho', 'Montenegro', 'Oman', 'Lao P.D.R.',
'Dominica', 'Fiji', 'Papua New Guinea', 'Rwanda', 'Togo',
'Trinidad and Tobago', 'Bahamas', 'Brunei Darussalam',
'Antigua and Barbuda', 'Barbados', 'Djibouti', 'Guyana', 'Vanuatu',
'Turkmenistan', 'Saint Vincent & the Grenadines', 'Grenada', 'Saint Lucia') ~ 'After 2009'
)
)
export(countries_ldc,"data/9.lookups/countries.rds" )
export(countries_ldc,"data/9.lookups/countries.xlsx" )
#export summary for eloisa
sum_ldc <- tabyl(countries_ldc, ldc) %>%
select(category = ldc,
n) %>%
mutate(category = ifelse(category == "Yes", "LDC", category)) %>%
filter(category == "LDC")
tabyl(countries, region) %>%
select(category = region,
n) %>%
rbind(sum_ldc)
# Future perspectives
#==============???????????????????????????????????===============================
# Research question
#? how important will the contribution of the TC programme be in achievingresults
# in the following areas in your country over the next 5-10 years?
library(rio)
library(ggplot2)
library(RColorBrewer)
library(extrafont)
library(janitor)
library(dplyr)
library(scales)
library(glue)
library(stringr)
gmdacr::load_functions('functions/analysis_future/')
gmdacr::load_functions('functions/themes/')
gmdacr::load_functions('functions/plots//')
#import data ------------------------------------------------------------------
future_raw <- import('data/7.NLO/2.raw_formatted/Part_1_future.rds')
countries_lkp <- import('data/9.lookups/countries.rds') %>% select(-region)
#drop missing answers
future_clean <- future_raw %>%
dplyr::filter(!is.na(likert)) %>%
left_join(countries_lkp)
#check countries that asked these questions
who_answered <- future_clean %>%
group_by(country) %>%
slice(1)
#define categories of th likert scale, later used in the charts
categories <- levels(future$likert)
#define aggregations ===========================================================
list_analysis <- list(
#1. between thematic areas ---------------------------------------------------
list(
group_1= c('theme', 'likert'),
group_2 = c('theme'),
subtitle = "By Theme."
),
#2. between geographic areas ------------------------------------------------
list(
group_1= c('region','theme', 'likert'),
group_2 = c('region','theme'),
subtitle = "By Theme, Between Regions."
)
,
#3. between LDC status ------------------------------------------------------
list(
group_1= c('ldc','theme', 'likert'),
group_2 = c('ldc','theme'),
subtitle = "By Theme, Between LDC status."
)
,
#between year joined ---------------------------------------------------------
list(
group_1= c('joined','theme', 'likert'),
group_2 = c('joined', 'theme'),
subtitle = "By Theme, Between Year Joined."
)
)
#create plots
plots_future  <- lapply(c(1:length(list_analysis)), function(i){
pl <- charts_future(i, db = future_clean)
subtitulo =  list_analysis[[i]]$subtitle
#export chart
ggsave(glue('analysis/plots/1.future/{subtitulo}.png'),
pl,
units = 'cm')
}
)
plots <- list.files('analysis/plots/1.future/', full.names = T)
lapply(plots, function(x){
print(x)
})
lapply(plots, function(x){
print(str_extract(x, '([^\/]+$)'))
})
lapply(plots, function(x){
print(str_extract(x, '([^\\/]+$)'))
})
png <- str_extract(x, '([^\\/]+$)')
lapply(plots, function(x){
png <- str_extract(x, '([^\\/]+$)')
})
lapply(plots, function(x){
png <- str_extract(x, '([^\\/]+$)')
file_name <- str_extract(png, '.png')
})
lapply(plots, function(x){
png <- str_extract(x, '([^\\/]+$)')
file_name <- str_remove(png, '.png')
})
lapply(plots, function(x){
png <- str_extract(x, '([^\\/]+$)')
file_name <- str_remove(png, '.png')
startsWith(x. "By")
})
lapply(plots, function(x){
png <- str_extract(x, '([^\\/]+$)')
file_name <- str_remove(png, '.png')
startsWith(x, "By")
})
lapply(plots, function(x){
png <- str_extract(x, '([^\\/]+$)')
file_name <- str_remove(png, '.png')
str_detect(x, "^By")
})
lapply(plots, function(x){
png <- str_extract(x, '([^\\/]+$)')
file_name <- str_remove(png, '.png')
str_detect(file_name, "^By")
})
by_themes <- str_detect(file_name, "^By")
lapply(plots, function(x){
png <- str_extract(x, '([^\\/]+$)')
file_name <- str_remove(png, '.png')
by_themes <- file_name[str_detect(file_name, "^By")]
})
png_files <-  str_extract(plots, '([^\\/]+$)')
png_files
main_section <- str_detect(png_files, "^By")
main_section
files_main <- png_files[main_section]
files_main
lapply(files_main, function(x){
title <- str_remove(x, '.png')
#cat(paste('#', ))
})
lapply(files_main, function(x){
title <- str_remove(x, '.png')
cat(paste('#', tilte))
})
lapply(files_main, function(x){
title <- str_remove(x, '.png')
cat(paste('#', title))
})
plots <- list.files('analysis/plots/1.future/', full.names = T)
png_files <-  str_extract(plots, '([^\\/]+$)')
main_section <- str_detect(png_files, "^By")
files_main <- png_files[main_section]
files_main
plots <- list.files('analysis/plots/1.future/', full.names = T)
png_files <-  str_extract(plots, '([^\\/]+$)')
main_section <- str_detect(png_files, "^By")
files_main <- png_files[main_section]
files_main
main_section
files_main <- png_files[main_section]
files_main
lapply(files_main, function(x){
title <- str_remove(x, '.png')
cat(paste('#', title))
})
for(f in files_main){
title <- str_remove_all(files_main, '.png')
cat(paste('#', title, "\n"))
}
files_main
rev(files_main)
library(glue)
