theme(legend.title = element_text())
names(clean_d)
clean_d %>%
filter(rank != 0) %>%
group_by(rank, aspect, theme) %>%
summarise(votes = n(),
.groups = 'drop') %>%
group_by(rank, theme) %>%
mutate(counterparts = sum(votes),
perc = votes/counterparts * 100,
check = sum(perc))
arrange(rank, desc(perc)) %>%
ungroup() %>%
group_by(aspect, theme) %>%
mutate(times_selected = sum(votes),
rank =factor(rank,
levels= c("3", "2", "1"),
ordered = T)) %>%
ungroup()
arrange(rank, desc(perc)) %>%
ungroup() %>%
group_by(aspect, theme) %>%
mutate(times_selected = sum(votes),
rank =factor(rank,
levels= c("3", "2", "1"),
ordered = T)) %>%
ungroup()
t <- clean_d %>%
#drop when rank is 0
filter(rank != 0) %>%
#Count the number of votes by group
group_by(rank, aspect, theme) %>%
summarise(votes = n(),
.groups = 'drop') %>%
#count the number of counterparts by ranking
group_by(rank, theme) %>%
mutate(counterparts = sum(votes),
perc = votes/counterparts * 100,
check = sum(perc))
View(t)
t <- clean_d %>%
#drop when rank is 0
filter(rank != 0) %>%
#Count the number of votes by group
group_by(rank, aspect, theme) %>%
summarise(votes = n(),
.groups = 'drop')
View(raw_d)
#clean CP main
library(janitor)
library(dplyr)
library(tidyr)
library(rio)
library(forcats)
raw_d <- import('data/6.data-collection/1.raw/cp/cp.rds')
raw_foas <- import('data/6.data-collection/1.raw/cp/foas.dta')
countries_lkp <- import('data/9.lookups/countries.rds') %>% select(-region)
names(raw_d)
tabyl(raw_d, interview__status)
#keep completed interviews only -----------------------------------------------
completed_d <- raw_d %>%
filter(interview__status == 'Submitted') %>%
#correct country name discrepancies
mutate(country = fct_recode(country,
'Saint Vincent & the Grenadines' = "Saint Vincent &amp; the Grenadines" )
) %>%
left_join(countries_lkp)
sum(is.na(completed_d$theme))
#keep completed interviews only -----------------------------------------------
completed_d <- raw_d %>%
filter(interview__status == 'Submitted') %>%
filter(!is.na(theme)) %>%
#correct country name discrepancies
mutate(country = fct_recode(country,
'Saint Vincent & the Grenadines' = "Saint Vincent &amp; the Grenadines" )
) %>%
left_join(countries_lkp)
sum(is.na(completed_d$theme))
#clean CP main
library(janitor)
library(dplyr)
library(tidyr)
library(rio)
library(forcats)
raw_d <- import('data/6.data-collection/1.raw/cp/cp.rds')
raw_foas <- import('data/6.data-collection/1.raw/cp/foas.dta')
countries_lkp <- import('data/9.lookups/countries.rds') %>% select(-region)
names(raw_d)
tabyl(raw_d, interview__status)
#keep completed interviews only -----------------------------------------------
completed_d <- raw_d %>%
filter(interview__status == 'Submitted') %>%
filter(!is.na(theme)) %>%
#correct country name discrepancies
mutate(country = fct_recode(country,
'Saint Vincent & the Grenadines' = "Saint Vincent &amp; the Grenadines" )
) %>%
left_join(countries_lkp)
names(completed_d)
#total of 2674 interviews
#check that all countries are in the countries_lkp
# cp_countries <- unique(completed_d$country)
# setdiff(cp_countries, countries_lkp$country)
#check that the join with countries is correct
completed_d$ldc[completed_d$country == 'Saint Vincent & the Grenadines']
#These countries are not in the year of TC recipients
# not_in_programme <- sort(unique(completed_d$country[is.na(completed_d$joined)]))
#
# tibble(
#
#   country = not_in_programme
# ) %>%
#   export(., 'data/1.reference/checks/not_in_TC_recipients_21_century.xlsx')
#
# length(not_in_programme)
# tabyl(completed_d, joined)
#Clean roster of foas ==========================================================
#count missing values
raw_foas$na_count <- apply(raw_foas, 1, function(x) sum(is.na(x)))
completed_foas <- raw_foas %>%
left_join(select(completed_d,
interview__id, interview__status, country, theme)) %>%
relocate(country, interview__status, na_count, theme) %>%
#drop interviews not in completed cp
filter(!is.na(interview__status)) %>%
#drop empty sections
filter(na_count < 36)
#export clean files
export(completed_d, 'data/6.data-collection/4.clean/cps.rds')
export(completed_foas, 'data/6.data-collection/4.clean/foas.rds')
#Future perspective from CPs
#research question ============================================================
#In your opinion, what are the aspects that may help ensuring sustainability of
#the achievements reached with IAEA TCP support?
#Please RANK your 3 priority technical support needed.
library(dplyr)
library(janitor)
library(tidyr)
library(rio)
library(ggplot2)
library(stringr)
library(extrafont)
#load data --------------------------------------------------------------------------
raw_d <- import('data/6.data-collection/4.clean/cps.rds') %>%
select(counterpart,country, region, theme, ldc, joined, starts_with('future'))
#These where the categories in the questionnaire -----------------------------
aspects = c(
'1' ='Trained staff remain in the institution',
'2' ='Trained staff applying knowledge acquired',
'3' = 'Equipment properly maintained',
'4' = 'Appropriate operational funding',
'5' = 'Technology relevant to country priorities',
'98' = 'Others')
aspect_name <- function(x){
aspects[x]
}
#clean a bit ---------------------------------------------------------------------
#identify observations that left this section unanswered
raw_d$na_count <- apply(select(raw_d, starts_with('future')), 1, function(x) sum(is.na(x)) == 6)
clean_d <- raw_d %>%
#drop observations with missing answers
filter(!na_count) %>%
select(-na_count) %>%
#format data to better read
pivot_longer(starts_with('future'),
values_to = 'rank',
names_to = 'aspect_id'
) %>%
#get the names of the aspects
mutate(aspect = str_remove(aspect_id, 'future__'),
aspect = aspect_name(aspect)
) %>%
select(-aspect_id)
#total of 2,605 counterparts
length(unique(clean_d$counterpart))
#analysis ====================================================================
names(clean_d)
global <- clean_d %>%
filter(rank != 0) %>%
group_by(rank, aspect) %>%
summarise(votes = n(),
.groups = 'drop') %>%
group_by(rank) %>%
mutate(counterparts = sum(votes),
perc = votes/counterparts * 100,
check = sum(perc)) %>%
arrange(rank, desc(perc)) %>%
ungroup() %>%
group_by(aspect) %>%
mutate(times_selected = sum(votes),
rank =factor(rank,
levels= c("3", "2", "1"),
ordered = T)) %>%
ungroup()
t <- clean_d %>%
#drop when rank is 0
filter(rank != 0) %>%
#Count the number of votes by group
group_by(rank, aspect, theme) %>%
summarise(votes = n(),
.groups = 'drop')
#count the number of counterparts by ranking
group_by(rank, theme) %>%
mutate(counterparts = sum(votes),
perc = votes/counterparts * 100,
check = sum(perc))
arrange(rank, desc(perc)) %>%
ungroup() %>%
group_by(aspect, theme) %>%
mutate(times_selected = sum(votes),
rank =factor(rank,
levels= c("3", "2", "1"),
ordered = T)) %>%
ungroup()
t <- clean_d %>%
#drop when rank is 0
filter(rank != 0) %>%
#Count the number of votes by group
group_by(rank, aspect, theme) %>%
summarise(votes = n(),
.groups = 'drop')
t <- clean_d %>%
#drop when rank is 0
filter(rank != 0) %>%
#Count the number of votes by group
group_by(rank, aspect, theme) %>%
summarise(votes = n(),
.groups = 'drop') %>%
#count the number of counterparts by ranking
group_by(rank, theme) %>%
mutate(counterparts = sum(votes),
perc = votes/counterparts * 100,
check = sum(perc))
fomat_ranks <- function(.data,
by = c('theme')){
.data %>%
#drop when rank is 0
filter(rank != 0) %>%
#Count the number of votes by group
group_by_at(c('rank', 'aspect', by)) %>%
summarise(votes = n(),
.groups = 'drop') %>%
#count the number of counterparts by ranking
group_by_at(c('rank', by)) %>%
mutate(counterparts = sum(votes),
perc = votes/counterparts * 100,
check = sum(perc))
arrange(rank, desc(perc)) %>%
ungroup() %>%
#count the numner of times an aspect was selected within the group
#to be able to sort the aspects in the plot
group_by_at(c('aspect', theme)) %>%
mutate(times_selected = sum(votes),
rank =factor(rank,
levels= c("3", "2", "1"),
ordered = T)) %>%
ungroup()
}
fomat_ranks <- function(.data,
by = c('theme')){
.data %>%
#drop when rank is 0
filter(rank != 0) %>%
#Count the number of votes by group
group_by_at(c('rank', 'aspect', by)) %>%
summarise(votes = n(),
.groups = 'drop') %>%
#count the number of counterparts by ranking
group_by_at(c('rank', by)) %>%
mutate(counterparts = sum(votes),
perc = votes/counterparts * 100,
check = sum(perc))
arrange(rank, desc(perc)) %>%
ungroup() %>%
#count the numner of times an aspect was selected within the group
#to be able to sort the aspects in the plot
group_by_at(c('aspect', theme)) %>%
mutate(times_selected = sum(votes),
rank =factor(rank,
levels= c("3", "2", "1"),
ordered = T)) %>%
ungroup()
}
t<- clean_d %>% format_ranks('theme')
format_ranks <- function(.data,
by = c('theme')){
.data %>%
#drop when rank is 0
filter(rank != 0) %>%
#Count the number of votes by group
group_by_at(c('rank', 'aspect', by)) %>%
summarise(votes = n(),
.groups = 'drop') %>%
#count the number of counterparts by ranking
group_by_at(c('rank', by)) %>%
mutate(counterparts = sum(votes),
perc = votes/counterparts * 100,
check = sum(perc))
arrange(rank, desc(perc)) %>%
ungroup() %>%
#count the numner of times an aspect was selected within the group
#to be able to sort the aspects in the plot
group_by_at(c('aspect', theme)) %>%
mutate(times_selected = sum(votes),
rank =factor(rank,
levels= c("3", "2", "1"),
ordered = T)) %>%
ungroup()
}
t<- clean_d %>% format_ranks('theme')
format_ranks <- function(.data,
by = c('theme')){
.data %>%
#drop when rank is 0
filter(rank != 0) %>%
#Count the number of votes by group
group_by_at(c('rank', 'aspect', by)) %>%
summarise(votes = n(),
.groups = 'drop') %>%
#count the number of counterparts by ranking
group_by_at(c('rank', by)) %>%
mutate(counterparts = sum(votes),
perc = votes/counterparts * 100,
check = sum(perc)) %>%
arrange(rank, desc(perc)) %>%
ungroup() %>%
#count the numner of times an aspect was selected within the group
#to be able to sort the aspects in the plot
group_by_at(c('aspect', theme)) %>%
mutate(times_selected = sum(votes),
rank =factor(rank,
levels= c("3", "2", "1"),
ordered = T)) %>%
ungroup()
}
t<- clean_d %>% format_ranks('')
t<- clean_d %>% format_ranks(NULL)
t<- clean_d %>% format_ranks('region')
names(clean_d)
t<- clean_d %>% format_ranks('theme')
format_ranks <- function(.data,
by = c('theme')){
.data %>%
#drop when rank is 0
filter(rank != 0) %>%
#Count the number of votes by group
group_by_at(c('rank', 'aspect', by)) %>%
summarise(votes = n(),
.groups = 'drop') %>%
#count the number of counterparts by ranking
group_by_at(c('rank', by)) %>%
mutate(counterparts = sum(votes),
perc = votes/counterparts * 100,
check = sum(perc)) %>%
arrange(rank, desc(perc)) %>%
ungroup() %>%
#count the numner of times an aspect was selected within the group
#to be able to sort the aspects in the plot
group_by_at(c('aspect', theme)) %>%
mutate(times_selected = sum(votes),
rank =factor(rank,
levels= c("3", "2", "1"),
ordered = T)) %>%
ungroup()
}
t<- clean_d %>% format_ranks('region')
t<- clean_d %>% format_ranks('theme')
format_ranks <- function(.data,
by = c('theme')){
.data %>%
#drop when rank is 0
filter(rank != 0) %>%
#Count the number of votes by group
group_by_at(c('rank', 'aspect', by)) %>%
summarise(votes = n(),
.groups = 'drop') %>%
#count the number of counterparts by ranking
group_by_at(c('rank', by)) %>%
mutate(counterparts = sum(votes),
perc = votes/counterparts * 100,
check = sum(perc)) %>%
arrange(rank, desc(perc)) %>%
ungroup() %>%
#count the numner of times an aspect was selected within the group
#to be able to sort the aspects in the plot
group_by_at(c('aspect', theme)) %>%
mutate(times_selected = sum(votes),
rank =factor(rank,
levels= c("3", "2", "1"),
ordered = T)) %>%
ungroup()
}
names(clean_d)
t<- clean_d %>% format_ranks('theme')
t<- clean_d %>% format_ranks(by = 'theme')
rlang::last_trace()
format_ranks <- function(.data,
by = c('theme')){
.data %>%
#drop when rank is 0
filter(rank != 0) %>%
#Count the number of votes by group
group_by_at(c('rank', 'aspect', by)) %>%
summarise(votes = n(),
.groups = 'drop') %>%
#count the number of counterparts by ranking
group_by_at(c('rank', by)) %>%
mutate(counterparts = sum(votes),
perc = votes/counterparts * 100,
check = sum(perc)) %>%
arrange(rank, desc(perc)) %>%
ungroup() %>%
#count the numner of times an aspect was selected within the group
#to be able to sort the aspects in the plot
group_by_at(c('aspect', by)) %>%
mutate(times_selected = sum(votes),
rank =factor(rank,
levels= c("3", "2", "1"),
ordered = T)) %>%
ungroup()
}
t<- clean_d %>% format_ranks(by = 'theme')
t<- clean_d %>% format_ranks(by = 'region')
t<- clean_d %>% format_ranks(by = '')
t<- clean_d %>% format_ranks(NULL)
global<- clean_d %>% format_ranks(NULL)
global %>% ggplot(
aes(x = perc,
y = reorder(aspect, times_selected),
fill = rank
)
) +
geom_col() +
lapply(c(25,50,75), function(x){
geom_vline(xintercept = x,
linetype = 'dashed')
}) +
scale_fill_brewer(breaks = rev(ranks),
labels = rev(ranks),
palette = "Greens",
name = "Ranked"
) +
scale_x_continuous(breaks = seq(0,100, 25),
labels = function(x)paste0(x, "%"),
#labels = seq(0,100, 25),
limits = c(0,100),
expand = c(0,0)
) +
scale_y_discrete(labels = label_wrap_gen(25)) +
labs(title = 'Aspects that may help ensuring sustainability of the\nachievements reached with TCP.',
subtitle = "Ranked by their piority.") +
theme_main() +
theme(legend.title = element_text())
plot_ranks <- function(.data){
.data %>%
ggplot(
aes(x = perc,
y = reorder(aspect, times_selected),
fill = rank
)
) +
geom_col() +
lapply(c(25,50,75), function(x){
geom_vline(xintercept = x,
linetype = 'dashed')
}) +
scale_fill_brewer(breaks = rev(ranks),
labels = rev(ranks),
palette = "Greens",
name = "Ranked"
) +
scale_x_continuous(breaks = seq(0,100, 25),
labels = function(x)paste0(x, "%"),
#labels = seq(0,100, 25),
limits = c(0,100),
expand = c(0,0)
) +
scale_y_discrete(labels = label_wrap_gen(25)) +
labs(title = 'Aspects that may help ensuring sustainability of the\nachievements reached with TCP.',
subtitle = "Ranked by their piority.") +
theme_main() +
theme(legend.title = element_text())
}
global %>% plot_ranks()
themes <- t<- clean_d %>% format_ranks(by = 'theme')
themes  %>% plot_ranks() + facet_wrap(~theme)
themes <- clean_d %>%
mutate(theme = susor::susor_get_stata_labels(theme))
themes <- clean_d %>%
mutate(theme = susor::susor_get_stata_labels(theme)) %>%
format_ranks(by = 'theme')
themes  %>% plot_ranks() + facet_wrap(~theme)
themes_plot <- themes  %>% plot_ranks() + facet_wrap(~theme)
#3. Region
regions <- clean_d %>%
format_ranks(by = 'region')
regions  %>% plot_ranks() + facet_wrap(~region)
regions_plot <- regions  %>% plot_ranks() + facet_wrap(~region)
ggsave('analysis/plots/1.future/cp/global_future.png',
global_plot)
global_plot <- global %>% plot_ranks()
themes_plot <- themes  %>% plot_ranks() + facet_wrap(~theme)
regions_plot <- regions  %>% plot_ranks() + facet_wrap(~region)
ggsave('analysis/plots/1.future/cp/global_future.png',
global_plot)
ggsave('analysis/plots/1.future/cp/themes_future.png',
themes_plot)
ggsave('analysis/plots/1.future/cp/regions_future.png',
regions_plot)
list.files('analysis/plots/1.future/cp')
list.files('analysis/plots/1.future/cp', full.names = )
list.files('analysis/plots/1.future/cp', full.names =T )
