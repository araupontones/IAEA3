cat_themes <- raw_themes %>%
rename(title = Theme,
value = theme_code)
library(rio)
export(cat_themes,'questionnaires/categories/themes.xlsx', sheetName = "Categories", overwrite = T)
raw_improvements <- read_sheet(url_gs, "improvements")
View(raw_improvements)
cat_improvements <- raw_improvements %>%
select(title = Improvement,
value = improvement_code)
export(cat_improvements,'questionnaires/categories/improvements.xlsx', sheetName = "Categories", overwrite = T)
cat_improvements <- raw_improvements %>%
group_by(Improvement) %>%
slice(1) %>%
select(title = Improvement,
value = improvement_code)
cat_improvements <- raw_improvements %>%
group_by(Improvement) %>%
slice(1) %>%
ungroup() %>%
select(title = Improvement,
value = improvement_code)
janitor::get_dupes(cat_improvements, title)
janitor::get_dupes(cat_improvements, value)
export(cat_improvements,'questionnaires/categories/improvements.xlsx', sheetName = "Categories", overwrite = T)
cat_improvements <- raw_improvements %>%
group_by(Improvement) %>%
slice(1) %>%
ungroup() %>%
select(title = Improvement,
value = improvement_code) %>%
arrange(value)
View(cat_improvements)
export(cat_improvements,'questionnaires/categories/improvements.xlsx', sheetName = "Categories", overwrite = T)
names(raw_improvements)
cat_levels <- raw_improvements %>%
select(value = improvement_code,
starts_with("Level"))
library(tidyr)
cat_levels <- raw_improvements %>%
select(improvement_code,
starts_with("Level")) %>%
pivot_longer(-improvement_code)
View(cat_levels)
cat_levels <- raw_improvements %>%
select(improvement_code,
starts_with("Level")) %>%
pivot_longer(-improvement_code,
names_to = 'level')
cat_levels <- raw_improvements %>%
select(improvement_code,
starts_with("Level")) %>%
pivot_longer(-improvement_code,
names_to = 'level',
values_to = 'title')
cat_levels <- raw_improvements %>%
select(improvement_code,
starts_with("Level")) %>%
pivot_longer(-improvement_code,
names_to = 'level',
values_to = 'title') %>%
filter(!is.na(title))
cat_levels <- raw_improvements %>%
select(improvement_code,
starts_with("Level")) %>%
pivot_longer(-improvement_code,
names_to = 'level',
values_to = 'title') %>%
filter(!is.na(title)) %>%
mutate(level = ifelse(is.na(improvement_code), 90, level))
cat_levels <- raw_improvements %>%
select(improvement_code,
starts_with("Level")) %>%
pivot_longer(-improvement_code,
names_to = 'level',
values_to = 'title') %>%
filter(!is.na(title)) %>%
mutate(improvement_code = ifelse(is.na(improvement_code), 90, improvement_code))
cat_levels <- raw_improvements %>%
select(improvement_code,
starts_with("Level")) %>%
pivot_longer(-improvement_code,
names_to = 'level',
values_to = 'title') %>%
filter(!is.na(title)) %>%
mutate(improvement_code = ifelse(is.na(improvement_code), 90, improvement_code),
level = stringr::str_remove(level,"Level"))
cat_levels <- raw_improvements %>%
select(improvement_code,
starts_with("Level")) %>%
pivot_longer(-improvement_code,
names_to = 'level',
values_to = 'title') %>%
filter(!is.na(title)) %>%
mutate(improvement_code = ifelse(is.na(improvement_code), 90, improvement_code),
level = stringr::str_remove(level,"Level "))
cat_levels <- raw_improvements %>%
select(improvement_code,
starts_with("Level")) %>%
pivot_longer(-improvement_code,
names_to = 'level',
values_to = 'title') %>%
filter(!is.na(title)) %>%
mutate(improvement_code = ifelse(is.na(improvement_code), 90, improvement_code),
level = stringr::str_remove(level,"Level "),
value = paste0(improvement_code, level)
)
export(select(cat_levels, title, value),'questionnaires/categories/improvements_levels.xlsx', sheetName = "Categories", overwrite = T )
lkp_categories <- cat_levels %>%
select(rowcode = improvement_code,
value)
lkp_levels <- cat_levels %>%
select(rowcode = improvement_code,
value)
export(lkp_levels,'questionnaires/categories/improvements_levels.xlsx', sep = "\t" )
export(lkp_levels,'questionnaires/categories/lkp_improvement_levels.tab', sep = "\t" )
export(lkp_levels,'questionnaires/categories/lkp_improvement_levels.txt', sep = "\t" )
lkp_levels <- cat_levels %>%
select(rowcode = improvement_code,
value) %>%
group_by(rowcode) %>%
slice(1) %>%
ungroup()
export(lkp_levels,'questionnaires/categories/lkp_improvement_levels.txt', sep = "\t" )
lkp_levels
View(lkp_categories)
View(lkp_levels)
View(cat_levels)
names(cat_improvements)
names(cat_levels)
View(cat_improvements)
lkp_levels <- cat_improvements %>%
left_join(cat_levels)
names(cat_improvements)
names(cat_levels)
View(cat_levels)
unique(cat_levels$level)
unique(cat_levels$improvement_code)
lkp_levels <- cat_improvements %>%
mutate(has_level = value %in% unique(cat_levels$improvement_code))
View(lkp_levels)
lkp_levels <- cat_improvements %>%
mutate(has_level = value %in% unique(cat_levels$improvement_code),
has_level = ifelse(has_level,1,0))
lkp_levels <- cat_improvements %>%
mutate(has_level = value %in% unique(cat_levels$improvement_code),
has_level = ifelse(has_level,1,0)) %>%
filter(!is.na(value))
lkp_levels <- cat_improvements %>%
mutate(has_level = value %in% unique(cat_levels$improvement_code),
has_level = ifelse(has_level,1,0)) %>%
filter(!is.na(value)) %>%
select(rowcode = value,
has_level)
export(lkp_levels,'questionnaires/categories/lkp_improvement_levels.txt', sep = "\t" )
View(raw_improvements)
#look up table FOAs of improvement =============================================
raw_improvements
#look up table FOAs of improvement =============================================
lkp_foas <- raw_improvements %>%
select(FoA_code, rowcode = improvement_code)
View(lkp_foas)
#look up table FOAs of improvement =============================================
lkp_foas <- raw_improvements %>%
select(FoA_code, rowcode = improvement_code) %>%
pivot_longer(-rowcode)
View(lkp_foas)
#look up table FOAs of improvement =============================================
lkp_foas <- raw_improvements %>%
select(FoA_code, rowcode = improvement_code) %>%
pivot_wider(-rowcode)
#look up table FOAs of improvement =============================================
lkp_foas <- raw_improvements %>%
select(FoA_code, rowcode = improvement_code) %>%
pivot_wider(-rowcode,
names_from = FoA_code)
#look up table FOAs of improvement =============================================
lkp_foas <- raw_improvements %>%
select(FoA_code, rowcode = improvement_code) %>%
pivot_wider(rowcode)
View(lkp_foas)
?pivot_wider
#look up table FOAs of improvement =============================================
lkp_foas <- raw_improvements %>%
select(FoA_code, rowcode = improvement_code) %>%
pivot_wider(rowcode,
values_from = FoA_code,
names_prefix = 'foa_')
View(lkp_foas)
#look up table FOAs of improvement =============================================
lkp_foas <- raw_improvements %>%
select(FoA_code, rowcode = improvement_code) %>%
pivot_wider(rowcode,
values_from = FoA_code,
names_from = "HOLA",
names_prefix = 'foa_')
#look up table FOAs of improvement =============================================
lkp_foas <- raw_improvements %>%
select(FoA_code, rowcode = improvement_code) %>%
pivot_wider(rowcode,
values_from = FoA_code,
names_from = c("1","2"),
names_prefix = 'foa_')
#look up table FOAs of improvement =============================================
lkp_foas <- raw_improvements %>%
select(FoA_code, rowcode = improvement_code) %>%
pivot_wider(rowcode,
values_from = FoA_code,
names_from = rowcode,
names_prefix = 'foa_')
#look up table FOAs of improvement =============================================
lkp_foas <- raw_improvements %>%
select(FoA_code, rowcode = improvement_code) %>%
mutate(row = row_number()) %>%
pivot_wider(rowcode,
values_from = FoA_code,
names_from = row,
names_prefix = 'foa_')
#look up table FOAs of improvement =============================================
lkp_foas <- raw_improvements %>%
select(FoA_code, rowcode = improvement_code) %>%
group_by(rowcode) %>%
mutate(row = row_number()) %>%
ungroup() %>%
pivot_wider(rowcode,
values_from = FoA_code,
names_from = row,
names_prefix = 'foa_')
export(lkp_foas,'questionnaires/categories/lkp_improvement_foas.txt', sep = "\t" )
#look up table FOAs of improvement =============================================
lkp_foas <- raw_improvements %>%
select(FoA_code, rowcode = improvement_code) %>%
group_by(rowcode) %>%
mutate(row = row_number()) %>%
ungroup() %>%
pivot_wider(rowcode,
values_from = FoA_code,
names_from = row,
names_prefix = 'foa_') %>%
filter(!is.na(rowcode))
export(lkp_foas,'questionnaires/categories/lkp_improvement_foas.txt', sep = "\t" )
library(googlesheets4)
library(dplyr)
library(rio)
library(tidyr)
url_gs <- 'https://docs.google.com/spreadsheets/d/15SY9gpr5ELo0dLRYZNjqzNzOKbF8JYtkI42eBIZDe68/edit#gid=597634711'
cat_themes <- raw_themes %>%
filter(Theme != "Nuclear Knowledge Development and Management") %>%
rename(title = Theme,
value = theme_code)
#themes ========================================================================
raw_themes <- read_sheet(url_gs, 'themes')
cat_themes <- raw_themes %>%
filter(Theme != "Nuclear Knowledge Development and Management") %>%
rename(title = Theme,
value = theme_code)
View(cat_themes)
raw_improvements <- read_sheet(url_gs, "improvements")
cat_improvements <- raw_improvements %>%
group_by(Improvement) %>%
slice(1) %>%
ungroup() %>%
select(title = Improvement,
value = improvement_code) %>%
arrange(value)
export(cat_improvements,'questionnaires/categories/improvements.xlsx', sheetName = "Categories", overwrite = T)
#Improvement levels ============================================================
#'these are the likert scale for each improvement
cat_levels <- raw_improvements %>%
#'keep only the code and the levels
select(improvement_code,
starts_with("Level")) %>%
pivot_longer(-improvement_code,
names_to = 'level',
values_to = 'title') %>%
filter(!is.na(title)) %>%
#' assign a code to the general categories
mutate(improvement_code = ifelse(is.na(improvement_code), 90, improvement_code),
level = stringr::str_remove(level,"Level "),
value = paste0(improvement_code, level)
)
View(cat_levels)
#Improvement levels ============================================================
#'these are the likert scale for each improvement
cat_levels <- raw_improvements %>%
#'keep only the code and the levels
select(improvement_code,
starts_with("Level")) %>%
pivot_longer(-improvement_code,
names_to = 'level',
values_to = 'title') %>%
filter(!is.na(title)) %>%
#' assign a code to the general categories
mutate(improvement_code = ifelse(is.na(improvement_code), 0, improvement_code),
level = stringr::str_remove(level,"Level "),
value = paste0(improvement_code, level)
)
export(select(cat_levels, title, value),'questionnaires/categories/improvements_levels.xlsx', sheetName = "Categories", overwrite = T )
#Improvement levels ============================================================
#'these are the likert scale for each improvement
cat_levels <- raw_improvements %>%
#'keep only the code and the levels
select(improvement_code,
starts_with("Level")) %>%
pivot_longer(-improvement_code,
names_to = 'level',
values_to = 'title') %>%
filter(!is.na(title)) %>%
#' assign a code to the general categories
#' They start with 0 so No capacity is always the first option in the questionnaire
mutate(improvement_code = ifelse(is.na(improvement_code), 0, improvement_code),
level = stringr::str_remove(level,"Level "),
value = paste0(improvement_code, level)
)
export(select(cat_levels, title, value),'questionnaires/categories/improvements_levels.xlsx', sheetName = "Categories", overwrite = T )
View(raw_improvements)
#look up table whether improvement has custom categories =======================
#' Some improvements do not have a custom level
#' For those, we use the general category
lkp_levels <- cat_improvements %>%
#identify those that do not have a custom level
mutate(has_level = value %in% unique(cat_levels$improvement_code),
has_level = ifelse(has_level,1,0)) %>%
filter(!is.na(value)) %>%
select(rowcode = value,
has_level)
export(lkp_levels,'questionnaires/categories/lkp_improvement_levels.txt', sep = "\t" )
cat_themes <- raw_themes %>%
#excluding this because it is not part of the report
filter(Theme != "Nuclear Knowledge Development and Management") %>%
rename(title = Theme,
value = theme_code)
export(cat_themes,'questionnaires/categories/themes.xlsx', sheetName = "Categories", overwrite = T)
raw_improvements <- read_sheet(url_gs, "improvements")
cat_improvements <- raw_improvements %>%
group_by(Improvement) %>%
slice(1) %>%
ungroup() %>%
select(title = Improvement,
value = improvement_code) %>%
arrange(value)
export(cat_improvements,'questionnaires/categories/improvements.xlsx', sheetName = "Categories", overwrite = T)
#Improvement levels ============================================================
#'these are the likert scale for each improvement
cat_levels <- raw_improvements %>%
#'keep only the code and the levels
select(improvement_code,
starts_with("Level")) %>%
pivot_longer(-improvement_code,
names_to = 'level',
values_to = 'title') %>%
filter(!is.na(title)) %>%
#' assign a code to the general categories
#' They start with 0 so No capacity is always the first option in the questionnaire
mutate(improvement_code = ifelse(is.na(improvement_code), 0, improvement_code),
level = stringr::str_remove(level,"Level "),
value = paste0(improvement_code, level)
)
export(select(cat_levels, title, value),'questionnaires/categories/improvements_levels.xlsx', sheetName = "Categories", overwrite = T )
#Improvement levels ============================================================
#'these are the likert scale for each improvement
cat_levels <- raw_improvements %>%
#'keep only the code and the levels
select(improvement_code,
starts_with("Level")) %>%
pivot_longer(-improvement_code,
names_to = 'level',
values_to = 'title') %>%
filter(!is.na(title)) %>%
#' assign a code to the general categories
#' They start with 0 so No capacity is always the first option in the questionnaire
mutate(improvement_code = ifelse(is.na(improvement_code), 0, improvement_code),
level = stringr::str_remove(level,"Level "),
value = paste0(improvement_code, level)
) %>%
arrange(value)
export(select(cat_levels, title, value),'questionnaires/categories/improvements_levels.xlsx', sheetName = "Categories", overwrite = T )
create_cat_options <- function(.data,
starts_con = "Level ",
names_a = "level",
new_var = level
){
.data %>%
#'keep only the code and the levels
select(improvement_code,
starts_with(starts_con)) %>%
pivot_longer(-improvement_code,
names_to = names_a,
values_to = 'title') %>%
filter(!is.na(title)) %>%
#' assign a code to the general categories
#' They start with 0 so No capacity is always the first option in the questionnaire
mutate(improvement_code = ifelse(is.na(improvement_code), 0, improvement_code),
level = stringr::str_remove({{new_var}},starts_con),
value = paste0(improvement_code, {{new_var}})
) %>%
arrange(value)
}
cat_types <-create_cat_options(raw_improvements, starts_con = "Type ", names_a = "type", new_var = type)
View(cat_types)
create_cat_options <- function(.data,
starts_con = "Level ",
names_a = "level",
new_var = level
){
.data %>%
#'keep only the code and the levels
select(improvement_code,
starts_with(starts_con)) %>%
pivot_longer(-improvement_code,
names_to = names_a,
values_to = 'title') %>%
filter(!is.na(title)) %>%
#' assign a code to the general categories
#' They start with 0 so No capacity is always the first option in the questionnaire
mutate(improvement_code = ifelse(is.na(improvement_code), 0, improvement_code),
level = stringr::str_remove({{new_var}},starts_con),
value = paste0(improvement_code, {{new_var}})
) %>%
arrange(value)
}
raw_improvements <- read_sheet(url_gs, "improvements")
cat_improvements <- raw_improvements %>%
group_by(Improvement) %>%
slice(1) %>%
ungroup() %>%
select(title = Improvement,
value = improvement_code) %>%
arrange(value)
export(cat_improvements,'questionnaires/categories/improvements.xlsx', sheetName = "Categories", overwrite = T)
#Improvement levels ============================================================
#'these are the likert scale for each improvement
cat_levels <- raw_improvements %>%
#'keep only the code and the levels
select(improvement_code,
starts_with("Level")) %>%
pivot_longer(-improvement_code,
names_to = 'level',
values_to = 'title') %>%
filter(!is.na(title)) %>%
#' assign a code to the general categories
#' They start with 0 so No capacity is always the first option in the questionnaire
mutate(improvement_code = ifelse(is.na(improvement_code), 0, improvement_code),
level = stringr::str_remove(level,"Level "),
value = paste0(improvement_code, level)
) %>%
arrange(value)
export(select(cat_levels, title, value),'questionnaires/categories/improvements_levels.xlsx', sheetName = "Categories", overwrite = T )
#look up table whether improvement has custom categories =======================
#' Some improvements do not have a custom level
#' For those, we use the general category
lkp_levels <- cat_improvements %>%
#identify those that do not have a custom level
mutate(has_level = value %in% unique(cat_levels$improvement_code),
has_level = ifelse(has_level,1,0)) %>%
filter(!is.na(value)) %>%
select(rowcode = value,
has_level)
export(lkp_levels,'questionnaires/categories/lkp_improvement_levels.txt', sep = "\t" )
cat_types <-create_cat_options(raw_improvements, starts_con = "Type ", names_a = "type", new_var = type)
create_cat_options <- function(.data,
starts_con = "Level ",
names_a = "level",
new_var = level
){
.data %>%
#'keep only the code and the levels
select(improvement_code,
starts_with(starts_con)) %>%
pivot_longer(-improvement_code,
names_to = names_a,
values_to = 'title') %>%
filter(!is.na(title)) %>%
#' assign a code to the general categories
#' They start with 0 so No capacity is always the first option in the questionnaire
mutate(improvement_code = ifelse(is.na(improvement_code), 0, improvement_code),
{{new_var}} := stringr::str_remove({{new_var}},starts_con),
value = paste0(improvement_code, {{new_var}})
) %>%
arrange(value)
}
cat_types <-create_cat_options(raw_improvements, starts_con = "Type ", names_a = "type", new_var = type)
export(select(cat_levels, title, value),'questionnaires/categories/improvements_tpes.xlsx', sheetName = "Categories", overwrite = T )
export(select(cat_types, title, value),'questionnaires/categories/improvements_types.xlsx', sheetName = "Categories", overwrite = T )
names(cat_types)
View(cat_types)
#
lkp_types <- cat_improvements %>%
#identify those that do not have a custom level
mutate(has_level = value %in% unique(cat_types$improvement_code),
has_level = ifelse(has_level,1,0)) %>%
filter(!is.na(value)) %>%
select(rowcode = value,
has_level)
View(lkp_types)
#
lkp_types <- cat_improvements %>%
#identify those that do not have a custom level
mutate(has_type = value %in% unique(cat_types$improvement_code),
has_type = ifelse(has_level,1,0)) %>%
filter(!is.na(value)) %>%
select(rowcode = value,
has_type)
#
lkp_types <- cat_improvements %>%
#identify those that do not have a custom level
mutate(has_type = value %in% unique(cat_types$improvement_code),
has_type = ifelse(has_type,1,0)) %>%
filter(!is.na(value)) %>%
select(rowcode = value,
has_type)
export(lkp_types,'questionnaires/categories/lkp_improvement_types.txt', sep = "\t" )
